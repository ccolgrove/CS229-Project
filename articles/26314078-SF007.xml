<?xml version="1.0"?><api><query><redirects><r from="Rtmpdump" to="Protected Streaming" tofragment="Encryption" /></redirects><pages><page pageid="20094331" ns="0" title="Protected Streaming"><revisions><rev xml:space="preserve">{{POV|date=January 2010}}

{{Mergeto|Real Time Messaging Protocol|date=May 2009}}
{{Cleanup|date=January 2010}}

'''Protected Streaming'''{{Dubious|The name &quot;Protected Streaming&quot;|date=May 2009}} is a [[digital rights management|DRM]] technology by [[Adobe Systems|Adobe]]. The aim of the technology is to protect digital content (video or audio) from unauthorized use. 

Protected Streaming consists of many different techniques; basically there are two main components: [[encryption]] and [[SWF]] verification.

This technique is used by the [[Hulu]] desktop player and the [[RTE Player]]. Fifa.com also uses this technique to serve the videos on the official site. Some videos on YouTube also use RTMPE, including those uploaded there by BBC Worldwide.

== Encryption ==
Streamed content is encrypted by the Flash Media Server &quot;on the fly&quot;, so that there is no need to encrypt the source file (a significant difference from [[Microsoft]]'s DRM). For transmission (&quot;streaming&quot;), a special protocol is required: either [[RTMPE]] or [[RTMPS]].

RTMPS uses [[Transport Layer Security|SSL]]-encryption. In contrast, RTMPE is designed to be simpler than RTMPS, by removing the need to acquire a SSL Certificate. RTMPE makes use of well-known industry standard cryptographic primitives, consisting of [[Diffie-Hellman key exchange]] and HMACSHA256, generating a pair of [[RC4]] keys, one of which is then used to encrypt the media data sent by the server (the audio or video stream), whilst the other key is used to encrypt any data sent to the server. RTMPE caused less [[CPU]]-load than RTMPS on the [[Adobe Flash Media Server|Flash Media Server]].

Adobe fixed the security issue in January 2009, but did not fix the security holes in the design of the RTMPE algorithm itself&lt;ref&gt;{{cite web|url=http://lkcl.net/rtmp/RTMPE.txt|title=RTMPE Specification and Analysis|date=2009-05-25}}&lt;/ref&gt;. Analysis of the algorithm shows that it relies on [[security through obscurity]]. Amongst other things, this renders RTMPE vulnerable to [[Man-in-the-middle attack|Man in the Middle attacks]].

Tools which have a copy of the well-known constants extracted from the [[Adobe Flash]] player are able to capture RTMPE streams, a form of the [[trusted client]] problem. Adobe issued [[DMCA takedown]]s on RTMPE recording tools, including [[rtmpdump]], to try to limit their distribution. However in the case of [[rtmpdump]], this led to a [[Streisand effect]].&lt;ref&gt;{{cite web|url=http://linuxcentre.net/adobe-has-issued-a-dmca-removal-request-for-rtmpdump/|title=Adobe has issued a DMCA removal request for rtmpdump|date=2009-05-21}}&lt;/ref&gt;

==SWF verification==
The [[Adobe Flash]] player uses a well-known constant, appended to information derived from the SWF file (a hash of the file and its size), as input to HMACSHA256. The HMACSHA256 key is the last 32 bytes of the server's first handshake packet. The Flash Media Server uses this to limit access to those clients which have access to the SWF file (or have been given a copy of the hash and the size of the SWF file).

All officially allowed clients (which are in fact *.swf files) need to be placed on the Flash Media Server streaming the file. Any other client requesting a connection will receive a &quot;connection reject&quot;.

The combination of both techniques is intended to ensure streams cannot be sniffed and stored into a local file, as SWF verification is intended to prevent third party clients from accessing the content. However, it does not achieve this goal. Third party clients are free to write the decrypted content to a local file simply by knowing the hash of the SWF file and its size. In practice, therefore, Adobe's own implementation of the Macromedia Flash Player is the only client which does not allow saving to a local file.

The only possible way to restrict connections to a Flash Media Server is to use a list of known hosts, to avoid the whole player (the Flash client) being placed on an unauthorised website. Even this has no real benefit for mass-distributed files, as any one of the known hosts could take a copy of the data and re-distribute it at will.  Thus &quot;known host&quot; security is only useful when the known hosts can be trusted not to re-distribute the data.

== Notes ==
{{reflist}}

== References ==
* [http://wwwimages.adobe.com/www.adobe.com/content/dam/Adobe/en/devnet/flashmediaserver/pdfs/protecting_video_fms.pdf Whitepaper by Adobe]
* [http://livedocs.adobe.com/flashmediaserver/3.0/docs/help.html?content=08_xmlref_281.html RTMPE (Adobe LiveDocs)]
* [http://livedocs.adobe.com/flashmediaserver/3.0/docs/help.html?content=03_configtasks_25.html RTMPS (Adobe LiveDocs)]
* [http://rtmpdump.mplayerhq.hu/ rtmpdump 2.1+ (Source code and binaries)]
* [http://lkcl.net/rtmp/rtmpdump-v1.6.tar.gz Source code of rtmpdump v1.6 by Andrej Stepanchuk]
* [http://lkcl.net/rtmp/RTMPE.txt RTMPE specification], generated from the rtmpdump source code
* [http://maison.emdx.org/RTMPE/ RTMPE specification], mirror of the above
* [http://rtmpd.com/wiki/rtmfp/ RTMFP encryption mechanism (DRAFT)], reverse engineered from scratch
{{Adobe Flash}}
[[Category:Multimedia]]
[[Category:Network protocols]]

[[de:Protected Streaming]]</rev></revisions></page></pages></query></api>
