<?xml version="1.0"?><api><query><pages><page pageid="1404654" ns="0" title="GObject"><revisions><rev xml:space="preserve">{{Infobox software
| name                   = GObject
| title                  = 
| logo                   = &lt;!-- [[File: ]] --&gt;
| screenshot             = &lt;!-- [[File: ]] --&gt;
| caption                = 
| collapsible            = 
| author                 = 
| developer              = [[GNOME Foundation]]
| released               = &lt;!-- {{Start date|YYYY|MM|DD|df=yes/no}} --&gt;
| discontinued           = 
| latest release version = 2.30.2
| latest release date    = {{release date and age|2011|11|11}}
| latest preview version = 2.31.0
| latest preview date    = {{Start date and age|2011|10|19}}
| frequently updated     = yes
| programming language   = [[C (programming language)|C]]
| operating system       = [[Cross-platform]]
| platform               = [[Cross-platform]]
| size                   = 
| language               = [[Multilingual]]
| status                 =  Active
| genre                  = [[Software library]]
| license                = [[GNU Lesser General Public License]]
| website                = {{URL|http://library.gnome.org/devel/gobject/stable/}}
}}

The '''[[GLib]] Object System''', or '''GObject''', is a [[free software|free]] [[software library]] providing a portable [[object system]] and transparent cross-language interoperability. GObject is designed for use both directly in [[C (programming language)|C]] programs to provide object-oriented C-based APIs and through [[language binding|binding]]s to other languages to provide transparent cross-language interoperability.

==History==
Depending only on [[GLib]] and [[libc]], GObject is a cornerstone of [[GNOME]] and is used throughout [[GTK+]], [[Pango]], [[Accessibility Toolkit]], and most higher-level [[GNOME]] libraries like [[GStreamer]] and applications.  Prior to GTK+ 2.0, code similar to GObject was part of the GTK+ codebase.  (The name âGObjectâ was not yet in use &amp;mdash; the common baseclass was called &lt;code&gt;GtkObject&lt;/code&gt;.)

At the release of GTK+ 2.0, the object system was extracted into a separate library due to its general utility.  In the process, most non-[[GUI]]-specific parts of the &lt;code&gt;GtkObject&lt;/code&gt; class were moved up into &lt;code&gt;GObject&lt;/code&gt;, the new common baseclass.  Having existed as a separate library since March 11, 2002 (the release date of GTK+ 2.0), the GObject library is now used by many non-GUI programs such as [[command-line]] and [[Server (computing)|server]] applications.

==Relation to GLib==
Though GObject has its own separate set of documentation&lt;ref&gt;[http://library.gnome.org/devel/gobject/stable/ GObject Reference Manual]&lt;/ref&gt; and is usually compiled into its own [[shared library]] file, the source code for GObject resides in the [[GLib]] source tree and is distributed along with GLib.  For this reason, GObject uses the GLib version numbers and is typically packaged together with GLib (for example, [[Debian]] puts GObject in its &lt;code&gt;libglib2.0&lt;/code&gt; package family).

==The type system==
At the most basic level of the GObject framework lies a generic and dynamic [[type system]] called GType.  The GType system holds a runtime description of all objects allowing [[glue code]] to facilitate multiple language bindings.  The type system can handle any [[single inheritance|singly inherited]] class structure, in addition to ''non-classed'' types such as [[opaque pointer]]s, [[string (computer science)|strings]], and variously sized [[integer]]s and [[floating point number]]s.

The type system knows how to copy, assign, and destroy values belonging to any of the registered types.  This is trivial for types like integers, but many complex objects are [[reference counting|reference-counted]], while some are complex but not reference-counted.  When the type system âcopiesâ a reference-counted object, it will typically just increase its reference count, whereas when copying a complex, non-reference-counted object (such as a string), it will typically create an actual copy by [[memory allocation|allocating memory]].

This basic functionality is used for implementing &lt;code&gt;GValue&lt;/code&gt;, a type of generic container that can hold values of any type known by the type system.  Such containers are particularly useful when interacting with dynamically typed language environments in which all native values reside in such [[type tag|type-tagged]] containers.

===Fundamental types===
Types that do not have any associated [[class (programming)|class]]es are called ''non-classed''.  These types, together with all types that correspond to some form of [[root class]], are known as ''fundamental types'': the types from which all other types are derived.  These make up a relatively closed set, but although the average user is not expected to create her own fundamental types, the possibility does exist and has been exploited to create custom [[class hierarchy|class hierarchies]] &amp;mdash; i.e., class hierarchies not based on the &lt;code&gt;GObject&lt;/code&gt; class.

As of GLib 2.9.2,&lt;ref&gt;[http://developer.gnome.org/doc/API/2.0/gobject/gobject-Type-Information.html]{{dl|date=October 2011}}&lt;/ref&gt;
the ''non-classed'' built-in fundamental types are
* an empty type, corresponding to Câs &lt;code&gt;void&lt;/code&gt; (&lt;code&gt;G_TYPE_NONE&lt;/code&gt;);
* types corresponding to Câs signed and unsigned &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, and 64-bit integers (&lt;code&gt;G_TYPE_CHAR&lt;/code&gt;, &lt;code&gt;G_TYPE_UCHAR&lt;/code&gt;, &lt;code&gt;G_TYPE_INT&lt;/code&gt;, &lt;code&gt;G_TYPE_UINT&lt;/code&gt;, &lt;code&gt;G_TYPE_LONG&lt;/code&gt;, &lt;code&gt;G_TYPE_ULONG&lt;/code&gt;, &lt;code&gt;G_TYPE_INT64&lt;/code&gt;, and &lt;code&gt;G_TYPE_UINT64&lt;/code&gt;);
* a boolean type (&lt;code&gt;G_TYPE_BOOLEAN&lt;/code&gt;);
* an enumeration type and a âflagsâ type, both corresponding to Câs &lt;code&gt;enum&lt;/code&gt; type, but differing in that the latter is only used for [[bit field]]s (&lt;code&gt;G_TYPE_ENUM&lt;/code&gt; and &lt;code&gt;G_TYPE_FLAGS&lt;/code&gt;);
* types for single- and double-precision [[IEEE float]]s, corresponding to Câs &lt;code&gt;float&lt;/code&gt; and &lt;code&gt;double&lt;/code&gt; (&lt;code&gt;G_TYPE_FLOAT&lt;/code&gt; and &lt;code&gt;G_TYPE_DOUBLE&lt;/code&gt;);
* a string type, corresponding to Câs &lt;code&gt;char *&lt;/code&gt; (&lt;code&gt;G_TYPE_STRING&lt;/code&gt;);
* an opaque pointer type, corresponding to Câs &lt;code&gt;void *&lt;/code&gt; (&lt;code&gt;G_TYPE_POINTER&lt;/code&gt;).

The ''classed'' built-in fundamental types are
* a base class type for instances of &lt;code&gt;GObject&lt;/code&gt;, the root of the standard class inheritance tree (&lt;code&gt;G_TYPE_OBJECT&lt;/code&gt;)
* a base interface type, analoguous to the base class type but representing the root of the standard ''interface'' inheritance tree (&lt;code&gt;G_TYPE_INTERFACE&lt;/code&gt;)
* a type for [[boxing (programming)|boxed]] structures, which are used to wrap simple value objects or foreign objects in reference-counted âboxesâ (&lt;code&gt;G_TYPE_BOXED&lt;/code&gt;)
* a type for âparameter specification objects,â which are used in GObject to describe [[metadata]] for object properties (&lt;code&gt;G_TYPE_PARAM&lt;/code&gt;).

Types that can be instantiated automatically by the type system are called ''instantiable''.  An important characteristic of these types is that the first bytes of any instance always contain a pointer to the ''class structure'' (a form of [[virtual table]]) associated to the type of the instance.  For this reason, any instantiable type must be classed.  Contrapositively, any non-classed type (such as ''integer'' or ''string'') must be non-instantiable.  On the other hand, most classed types are instantiable, but some, such as interface types, are not.

===Derived types===
The types that are derived from the built-in GObject fundamental types fall
roughly into four categories:

; Enumerated types and âflagsâ types : In general, every enumerated type and every integer-based bitfield type (i.e., every &lt;code&gt;enum&lt;/code&gt; type) that one wishes to use in some way that is related to the object system &amp;mdash; for example, as the type of an object property &amp;mdash; should be registered with the type system.  Typically, the initialization code that takes care of registering these types is generated by an automated tool called &lt;code&gt;glib-mkenums&lt;/code&gt; [http://developer.gnome.org/doc/API/2.0/gobject/glib-mkenums.html] and stored in a separate file.
; Boxed types : Some data structures that are too simple to be made full-fledged class types (with all the overhead incurred) may still need to be registered with the type system.  For example, we might have a class to which we want to add a &lt;code&gt;background-color&lt;/code&gt; property, whose values should be instances of a structure that looks like &lt;code&gt;struct color { int r, g, b; }&lt;/code&gt;.  To avoid having to subclass &lt;code&gt;GObject&lt;/code&gt;, we can create a [[boxed type]] to represent this structure, and provide functions for copying and freeing. GObject ships with a handful of boxed types wrapping simple GLib data types. Another use for boxed types is as a way to wrap foreign objects in a tagged container that the type system can identify and will know how to copy and free.
; Opaque pointer types : Sometimes, for objects that need to be neither copied or reference-counted nor freed, even a boxed type would be [[overkill]].  While such objects can be used in GObject by simply treating them as opaque pointers (&lt;code&gt;G_TYPE_POINTER&lt;/code&gt;), it is often a good idea to create a derived pointer type, documenting the fact that the pointers should reference a particular kind of object, even though nothing else is said about it.
; Class and interface types : Most types in a GObject application will be classes &amp;mdash; in the normal object-oriented sense of the word &amp;mdash; derived directly or indirectly from the root class, &lt;code&gt;GObject&lt;/code&gt;.  There are also [[Java (programming language)|Java]]-style interfaces, although {{As of|2006|lc=on}} these are still relatively rarely used, likely because they have only been around since GLib 2.4 (which was released on March 16, 2004). The [[GNU Image Manipulation Program]] uses GObject interfaces.

==Messaging system==
The GObject messaging system consists of two complementary parts: ''closures'' and ''signals''.
; Closures : A GObject closure is a generalized version of a [[Callback (computer science)|callback]]. Support exists for closures written in C and C++, as well as arbitrary languages (when bindings are provided). This allows code written in (for example) Python and Java to be invoked via a GObject closure.

; Signals : Signals are the primary mechanism by which closures are invoked. Objects register signal listeners with the type system, specifying a mapping between a given signal and a given closure. Upon emission of a registered signal, that signal's closure is invoked. In GTK+, all native GUI events (such as mouse motion and keyboard actions) can generate GObject signals for listeners to potentially act upon.

==Class implementation==
Each GObject class is implemented by at least two structures: the ''class structure'' and the ''instance structure''.
; The class structure : The class structure corresponds to the [[vtable]] of a C++ class.  It must begin with the class structure of the superclass. Following that, it will hold a set of function pointers &amp;mdash; one for each [[virtual method]] of the class. Class-specific variables can be used to emulate class members.
; The instance structure : The instance structure, which will exist in one copy per object instance, must begin with the instance structure of the [[superclass (computer science)|superclass]] (this ensures that all instances begin with a pointer to the class structure, since all fundamental instantiable types share this property). After the data belonging to the superclass, the structure can hold any instance-specific variables, corresponding to C++ member variables.

Since a C structure cannot have access modifiers like âpublicâ, âprotectedâ, or âprivateâ, a common technique is to include a pointer to the private data &amp;mdash; conventionally called &lt;code&gt;_priv&lt;/code&gt; &amp;mdash; in the instance structure.  The ''private structure'' can be declared in the public header file, but defined only in the implementation file, with the effect that the private data is opaque to users, but transparent to the implementor.  If the private structure is registered with GType, it will be automatically allocated by the object system.  Indeed, it is not even necessary to include the &lt;code&gt;_priv&lt;/code&gt; pointer, if one is willing to use the incantation &lt;code&gt;G_TYPE_INSTANCE_GET_PRIVATE&lt;/code&gt; every time the private data is needed.

The main drawback of the GObject framework is its verbosity.  Large amounts of [[boilerplate (text)#Boilerplate code|boilerplate]] code, such as manual definitions of type casting macros and obscure type registration incantations, are necessary to create a new class. The GObject Builder, or [http://www.jirka.org/gob.html GOB2], is a tool that attempts to remedy this problem by offering a template syntax reminiscent of Java.  Code written using GOB2 is pre-processed into vanilla C code prior to compilation.  Another compiler-to-C for the GObject type system is [[Vala (programming language)|Vala]], which uses a [[C Sharp (programming language)|C#]]-style syntax.

==Usage==
The combination of C and GObject is used in many successful [[free software]] projects, such as the [[GNOME]] desktop, the [[GTK+]] toolkit and the [[GIMP]] image manipulation program.

Though many GObject applications are written entirely in C, the GObject system maps well into the native object systems of many other languages, like [[C++]], [[Java (programming language)|Java]], [[Ruby programming language|Ruby]], [[Python (programming language)|Python]], [[Common Lisp]], and [[.NET Framework|.NET]]/[[Mono (software)|Mono]].  As a result, it is usually relatively painless to create [[language binding]]s for well-written libraries that use the GObject framework.

Writing GObject code in C in the first place, however, is relatively painful.{{Says who|date=October 2011}}  The [[learning curve]] is quite steep, and programmers with experience in [[high-level]] object-oriented languages are likely to find it very tedious to work with GObject in C.{{Citation needed|date=October 2011}}  For example, creating a non-trivial subclass (even just a subclass of &lt;code&gt;GObject&lt;/code&gt;) can require writing and/or copying hundreds of lines of code.

Although they are not really [[first-class object]]s (there are no actual metatypes in GType), [[metaobject]]s like classes and interfaces are created by GObject applications at runtime, and provide good support for [[introspection (computer science)|introspection]].  The introspective
capabilities are used by language bindings and user interface design applications like [[Glade Interface Designer|Glade]] to allow doing things like loading a [[shared library]] that provides a GObject class - usually some kind of [[Web widget|widget]], in the case of Glade - and then obtain a list of all properties of the class, complete with type information and documentation
strings.

==Comparisons to other object systems==
Since GObject provides a mostly-complete object system for C, it can be seen as an alternative to C-derived languages such as [[C++]] and [[Objective-C]]. (Though C++, in particular, also has many other features apart from its object system.)  An easily observed difference between C++ and GObject is that GObject (like Java) does not support [[multiple inheritance]].

GObject's use of [[GLib]]'s g_malloc() memory allocation function will cause the program to exit unconditionally upon memory exhaustion, unlike the C library's [[malloc]](), C++'s [[new (C++)|new]], and other common memory allocators which allow a program to cope with or even fully recover from out-of-memory situations without simply crashing.  This tends work against including GObject in software where resilience in the face of limited memory is important, or where very many or very large objects are commonly handled.

Another important difference is that while C++ and Objective-C are separate languages, GObject is strictly a library and as such does not introduce any new syntax or compiler intelligence.  For example, when writing GObject-based C code, it is frequently necessary to perform explicit [[Cast (computer science)|upcasting]].  Hence, âC with GObjectâ, considered as a language separate from plain C, is a strict superset of plain C &amp;mdash; unlike C++.

On platforms where there is no standard [[Application binary interface|ABI]] that works across all C++ compilers (which is not usually the case, since either the Itanium ABI or the Microsoft ABI are usually followed), a library compiled with one C++ compiler is not always able to call a library compiled with a different one.  If such compatibility is required, the C++ methods must be exported as plain C functions, partly defeating the purpose of the C++ object system.  The problem occurs in part because different C++ compilers use different kinds of [[name mangling]] to ensure the uniqueness of all exported symbols.  (This is necessary because, for example, two different classes may have identically named member functions, one function name may be [[method overloading|overloaded]] multiple times, or identically named functions may appear in different [[Namespace (computer science)|namespaces]], but in [[object code]] these overlaps are not allowed.)  In contrast, since C does not support any form of overloading or namespacing, authors of C libraries will typically use explicit prefixes to ensure the global uniqueness of their exported names.  Hence, despite being object-oriented, a GObject-based library written in C will always use the same external symbol names regardless of which compiler is used.

Perhaps the most profound difference is GObjectâs emphasis on signals (called [[Event-driven programming|events]] in other languages).  This emphasis derives from the fact that GObject was specifically designed to meet the needs of a GUI toolkit.  Whilst there are signal libraries for most object-oriented languages out there, in the case of GObject it is built into the object system.  Because of this, a typical GObject application will tend to use signals to a much larger extent than a non-GObject application would, making GObject [[Software componentry|components]] much more [[Information hiding|encapsulated]] and reusable than the ones using plain C++ or Java. Note however that signals are available on almost all platforms, although sometimes an extra library is needed, such as Boost.Signals2 for C++.

==See also==
{{Portal|Free software}}
* [[Vala (programming language)|Vala]]
* [[Genie (programming language)|Genie]]

==References==
&lt;references/&gt;

==External links==
* [http://library.gnome.org/devel/gobject/stable/ The GObject Reference Manual (and tutorial)]
* [http://article.gmane.org/gmane.comp.gnome.gtk%2B.devel.general/6329 GObject Tutorial Aug 2004]
* [http://www.jirka.org/gob.html GOB2 &amp;mdash; the GObject Builder]
* [http://live.gnome.org/Vala Vala Homepage]

{{GNOME}}

&lt;!-- Interlang --&gt;

{{DEFAULTSORT:Gobject}}
&lt;!-- Categories --&gt;
[[Category:C libraries]]
[[Category:GNOME]]
[[Category:GTK+]]
[[Category:Freedesktop.org]]

[[de:GObject]]
[[es:GObject]]
[[fr:GObject]]
[[ko:GObject]]
[[ja:GObject]]
[[pl:GObject]]
[[ru:GObject]]
[[zh:GObject]]</rev></revisions></page></pages></query></api>
