<?xml version="1.0"?><api><query><pages><page pageid="55908" ns="0" title="Security-Enhanced Linux"><revisions><rev xml:space="preserve">{{Refimprove|date=June 2009}}

[[Image:SELinux admin.png|thumb|right|The SELinux administrator in [[Fedora (operating system)|Fedora]] 8]]

'''Security-Enhanced Linux''' ('''SELinux''') is a [[Linux kernel|Linux]] feature that provides a mechanism for supporting access control security policies, including [[United States Department of Defense]]-style [[mandatory access control]]s, through the use of [[Linux Security Modules]] (LSM) in the [[Linux kernel]]. It is not a [[Linux distribution]], but rather a set of Kernel modifications and user-space tools that can be added to various Linux distributions. Its architecture strives to separate enforcement of security decisions from the security policy itself and streamlines the volume of software charged with security policy enforcement &lt;ref&gt;http://www.nsa.gov/research/selinux/faqs.shtml&lt;/ref&gt;&lt;ref&gt;http://www.nsa.gov/research/_files/selinux/papers/slinux.pdf&lt;/ref&gt;. The key concepts underlying SELinux can be traced to several earlier projects by the United States [[National Security Agency]].

It has been integrated into the mainline Linux kernel since version 2.6.

==Overview==
The United States National Security Agency (NSA), the original primary developer of SELinux, released the first version to the [[open source]] development community under the [[GNU GPL]] on December 22, 2000.&lt;ref&gt;
Compare 
{{cite web
|url         = http://www.nsa.gov/public_info/press_room/2001/se-linux.shtml
|title       = National Security Agency Shares Security Enhancements to LINUX
|date        = 2001-01-02
|work        = NSA Press Release
|publisher   = National Security Agency Central Security Service
|location    = Fort George G. Meade, Maryland
|accessdate  = 2011-11-17
|quote       = The NSA is pleased to announce that it has developed, and is making available to the public, a prototype version of a security-enhanced Linux system.  
}}
&lt;/ref&gt;
The software merged into the mainline Linux kernel 2.6.0-test3, released on 8 August 2003. Other significant contributors include [[Network Associates]], [[Secure Computing Corporation]], [[Trusted Computer Solutions]], and [[Tresys]]. Experimental ports of the [[FLASK]]/TE implementation have been made available via the [[FreeBSD#TrustedBSD|TrustedBSD]] Project for the [[FreeBSD]] and [[Darwin (operating system)|Darwin]] operating systems.

From [http://www.nsa.gov/research/selinux/index.shtml NSA Security-enhanced Linux Team]:

:&quot;NSA Security-enhanced Linux is a set of [[Patch (computing)|patches]] to the Linux [[Linux kernel|kernel]] and some utilities to incorporate a strong, flexible [[mandatory access control]] (MAC) architecture into the major subsystems of the kernel. It provides an enhanced mechanism to enforce the separation of information based on confidentiality and integrity requirements, which allows threats of tampering and bypassing of application security mechanisms to be addressed and enables the confinement of damage that can be caused by malicious or flawed applications. It includes a set of sample security policy configuration files designed to meet common, general-purpose security goals.&quot;

''(SELinux has been integrated into version 2.6 series of the Linux kernel, and separate patches are now unnecessary; the above is a historical quote.)''

Security-Enhanced Linux implements the [[FLASK|Flux Advanced Security Kernel]] (FLASK) integrated in some versions of the Linux kernel with a number of utilities designed to demonstrate the value of mandatory access controls to the Linux community and how such controls could be added to Linux. Such a kernel contains architectural components prototyped in the Fluke operating system. These provide general support for enforcing many kinds of mandatory access control policies, including those based on the concepts of [[type enforcement]], [[role-based access control]], and [[multilevel security]]. FLASK, in turn, was based on DTOS, a Mach-derived ''Distributed Trusted Operating System'', as well as Trusted Mach, a research project from [[Trusted Information Systems]] that had an influence on the design and implementation of DTOS.

A Linux kernel integrating SELinux enforces [[mandatory access control | mandatory access-control]] policies that confine user programs and system servers to the minimum amount of privilege they require to do their jobs. This reduces or eliminates the ability of these programs and daemons to cause harm when compromised (via buffer overflows or misconfigurations, for example). This confinement mechanism operates independently of the traditional Linux access control mechanisms. It has no concept of a &quot;root&quot; super-user, and does not share the well-known shortcomings of the traditional Linux security mechanisms (such as a dependence on [[setuid]]/[[setgid]] binaries).

The security of an unmodified Linux system depends on the correctness of the kernel, of all the privileged applications, and of each of their configurations. A problem in any one of these areas may allow the compromise of the entire system. In contrast, the security of a modified system based on an SELinux kernel depends primarily on the correctness of the kernel and its security-policy configuration. While problems with the correctness or configuration of applications may allow the limited compromise of individual user programs and system daemons, they do not pose a threat to the security of other user programs and system daemons or to the security of the system as a whole.

From a purist perspective, SELinux provides a hybrid of concepts and capabilities drawn from mandatory access controls, mandatory integrity controls, [[role-based access control]] (RBAC), and [[type enforcement architecture]]. Third-party tools enable one to build a variety of security policies.

== Users, policies and security contexts ==
SELinux users and roles are not related to the actual system users and roles. For every current user or process, SELinux assigns a three string context consisting of a role, user name, and domain (or type). This system is more flexible than normally required: as a rule, most of the real users share the same SELinux username, and all access control is managed through the third tag, the domain. Circumstance for when the user is allowed to get into a certain domain must be configured in the policies. The command ''runcon'' allows for the launching of a process into an explicitly specified context (user, role and domain), but SELinux may deny the transition if it is not approved by the policy configuration.

Files, network ports, and other hardware also have an SELinux context, consisting of a name, role (seldom used), and type. In case of the file systems, mapping between files and the security contexts is called labeling. The labeling is defined in policy files but can also be manually adjusted without changing the policies. Hardware types are quite detailed, for instance, bin_t (all files in the folder /bin) or postgresql_port_t (PostgreSQL port, 5432). The SELinux context for a remote file system can be specified explicitly at mount time. SELinux adds the -Z switch to the shell commands ''ls'', ''ps'', and some others, allowing the security context of the files or process to be seen.
 
Typical policy rules often consist of explicit permissions; which domains the user must possess to perform certain actions with the given target (read, execute, or, in case of network port, bind or connect), and so on. More complex mappings are also possible, involving roles and security levels.
A typical policy consists of a mapping (labeling) file, a rule file, and an interface file, that define the domain transition. These three files must be compiled together with the SELinux tools to produce a single policy file. The resulting policy file can be loaded into the kernel, making it active. Loading and unloading policies does not require a reboot. The policy files are either hand written or can be generated from the more user friendly SELinux management tool. They are normally tested in permissive mode first, where violations are logged but allowed. The ''audit2allow'' tool can be used later to produce additional rules that extend the policy to allow all legitimate activities of the application being confined.

==Features==
* Clean separation of policy from enforcement
* Well-defined policy interfaces
* Support for applications querying the policy and enforcing access control (for example, crond running jobs in the correct context)
* Independent of specific policies and policy languages
* Independent of specific security label formats and contents
* Individual labels and controls for kernel objects and services
* Caching of access decisions for efficiency
* Support for policy changes
* Separate measures for protecting system integrity (domain-type) and data confidentiality ([[multilevel security]])
* Very flexible policy
* Controls over process initialization and inheritance and program execution
* Controls over file systems, directories, files, and open [[file descriptor]]s
* Controls over sockets, messages, and network interfaces
* Controls over use of &quot;capabilities&quot;

== Usage ==
SELinux can potentially control all users, processes and daemons with very precise specifications which activities are allowed for every member. However, it is mostly used to confine [[Daemon (computer software)|daemons]] like database engines or web servers that have more clearly defined data access and activity rights. A confined daemon that becomes compromised is thus limited in the harm it can do. Ordinary user processes often run in the unconfined domain, not restricted by SELinux but still restricted by the classic Linux access rights.

See also: [[chcon]]&lt;ref&gt;http://linuxcommand.org/man_pages/chcon1.html&lt;/ref&gt;, 
[[restorecon]]&lt;ref&gt;http://linux.die.net/man/8/restorecon&lt;/ref&gt;, 
[[restorecond]]&lt;ref&gt;http://linux.die.net/man/8/restorecond&lt;/ref&gt;, 
[[runcon]]&lt;ref&gt;http://linux.die.net/man/1/runcon&lt;/ref&gt;, 
[[secon]]&lt;ref&gt;http://linux.die.net/man/1/secon&lt;/ref&gt;, 
[[fixfiles]]&lt;ref&gt;http://linux.die.net/man/8/fixfiles&lt;/ref&gt;, 
[[setfiles]]&lt;ref&gt;http://linux.die.net/man/8/setfiles&lt;/ref&gt;, 
[[load_policy]]&lt;ref&gt;http://linux.die.net/man/8/load_policy&lt;/ref&gt;, 
[[booleans]]&lt;ref&gt;http://linux.die.net/man/8/booleans&lt;/ref&gt;, 
[[getsebool]]&lt;ref&gt;http://linux.die.net/man/8/getsebool&lt;/ref&gt;, 
[[setsebool]]&lt;ref&gt;http://linux.die.net/man/8/setsebool&lt;/ref&gt;, 
[[togglesebool]]&lt;ref&gt;http://linux.die.net/man/8/togglesebool&lt;/ref&gt;
[[setenforce]], [[load_policy]]
[[setfiles]]&lt;ref&gt;http://linux.die.net/man/8/setfiles&lt;/ref&gt;, 
[[selinuxenabled]], [[semodule]], [[postfix-nochroot]], [[check-selinux-installation]], [[semodule_package]], [[checkmodule]], [http://manpages.ubuntu.com/manpages/natty/man8/selinux-config-enforcing.8.html selinux-config-enforcing], [http://manpages.ubuntu.com/manpages/natty/man1/selinuxenabled.1.html selinuxenabled], [http://manpages.ubuntu.com/manpages/natty/man8/selinux-policy-upgrade.8.html selinux-policy-upgrade] ;

and also: [[security_set_boolean]]&lt;ref&gt;http://linux.die.net/man/3/security_set_boolean&lt;/ref&gt;

Usage example (to put SELinux in permissive mode):
 # setenforce 0

==Implementations==
SELinux is available with commercial support as part of [[Red Hat Enterprise Linux]] (RHEL) version 4 and all future releases. This presence is also reflected in corresponding versions of [[CentOS]].  The supported policy in RHEL4 is the targeted policy which aims for maximum ease of use and thus is not as restrictive as it might be. Future versions of RHEL will have more targets in the targeted policy which will mean more restrictive policies.

In free community supported GNU/Linux distributions, [[Fedora (operating system)|Fedora]] was one of the earliest adopters, including support for it by default since Fedora Core 2. Other distributions include support for it such as [[Debian]] as of the etch release,&lt;ref&gt;[http://wiki.debian.org/SELinux SELinux in Debian]&lt;/ref&gt; [[Ubuntu (operating system)|Ubuntu]] as of 8.04 Hardy Heron,&lt;ref&gt;[http://ubuntu-tutorials.com/2008/03/18/how-to-install-selinux-on-ubuntu-804-hardy-heron/ SELinux support for Ubuntu]&lt;/ref&gt; [[Hardened Gentoo]], and [[Yellow Dog Linux]].

It is also supported in [[EnGarde Secure Linux]].{{Citation needed|date=October 2011}}

As of version 11.1, [[SUSE Linux distributions|openSUSE]] contains SELinux &quot;basic enablement&quot;.&lt;ref&gt;[http://news.opensuse.org/2008/08/20/opensuse-to-add-selinux-basic-enablement-in-111/ SELinux in SUSE]&lt;/ref&gt;  SUSE Linux Enterprise 11 will feature SELinux as a &quot;technology preview&quot;.

There was some work to provide SELinux packages for [[Slackware]],&lt;ref&gt;[http://blog.diyab.net/se-linux/old-files/ SELinux slackware]&lt;/ref&gt; but development seems to have stagnated.

There has been work on other distributions such as [[Familiar Linux]], but some of this was ceased due to technical reasons. (The Familiar Linux work was abandoned when SELinux needed [[extended file attributes]], unsupported in the [[JFFS2]] filesystem.){{Citation needed|date=October 2009}}

The earliest work directed toward standardizing an approach toward provision of mandatory and discretionary access controls (MAC and DAC) within a UNIX (more precisely, POSIX) computing environment can be attributed to the National Security Agency's Trusted UNIX (TRUSIX) Working Group, which met from 1987 to 1991 and published one [[Rainbow Series|Rainbow Book]] (#020A) and produced a formal model and associated evaluation evidence prototype (#020B) that was ultimately unpublished. It was sponsored by Chet Coates and Mario Tinto of the NSA's National Computer Security Center, and managed by Dr. Charles Testa and Bruce Wilner of Infosystems Technology (Greenbelt, Maryland; later, Falls Church, Virginia), the crucial architects of the TRUSIX project, and members of its Modeling Subcommittee&amp;nbsp;&amp;mdash; Steve Bunch, Dr. Frank Knowles, Dr. J. Eric Roskos, Larry Wehr, and Bruce Wilner.&lt;ref&gt;Testa and Wilner, under NSA auspices, also briefly chaired the joint DoD/DOE Labeling Working Group, which counted among its membership such early TCSEC contributors as David Bell, former chief scientist of the DoD Computer Security Center Marvin Schaefer, and Willis Ware, as well as building [[Trusted RUBIX]], the only [[relational database management system]] to offer B2 functionality and assurance atop a B2 POSIX platform, partially under the auspices of the United States Air Force Rome Laboratory.&lt;/ref&gt; Their efforts, particularly as critics of the less technically profound work of the TRUSIX Access Control List (ACL) Subcommittee, survive in the IEEE POSIX 1003.6 &quot;security extensions for portable operating systems environments&quot; specification. {{Citation needed|date=October 2011}}

==Other systems==
SELinux represents one of several possible approaches to the problem of restricting the actions that installed software can take.

The [[AppArmor]] system generally takes a similar approach to SELinux. One important difference is that AppArmor identifies file system objects by path name instead of inode. This means that, for example, a file that is inaccessible may become accessible under AppArmor when a hard link is created to it, while SELinux would deny access through the newly created hard link. On the other hand, data that is inaccessible may become accessible when applications update the file by replacing it with a new version&amp;nbsp;&amp;mdash; a frequently used technique&amp;nbsp;&amp;mdash; while AppArmor would continue to deny access to the data. In both cases, a default policy of &quot;no access&quot; avoids the problem.{{Citation needed|date=August 2011}}

SELinux and AppArmor also differ significantly in how they are administered and how they integrate into the system.{{Citation needed|date=June 2009}}

Isolation of processes can also be accomplished by mechanisms like [[Operating system-level virtualization|virtualization]]; the [[OLPC]] project, for example, in its first implementation&lt;ref&gt;[http://wiki.laptop.org/go/Rainbow OLPC/Sugar Rainbow]&lt;/ref&gt; [[Sandbox_(computer_security)|sandbox]]ed individual applications in lightweight [[Vserver]]s.

==Controversy==
Some software and security analysts pointed to the NSA offering such a tool to the community and the potential conflict of interest inherent to it.&lt;ref&gt;[http://www.slideshare.net/PaulWay/selinux-for-everyday-users SELinux for Everyday Users]&lt;/ref&gt;

==See also==
{{Portal box|Free software|Linux}}
* [[AppArmor]]
* [[Bastille Unix]]
* [[Grsecurity]]
* [[Multilevel security]]
* [[RSBAC|Rule Set Based Access Control (RSBAC)]]
* [[Simplified Mandatory Access Control Kernel]]
* [[Solaris Trusted Extensions]]
* [[TOMOYO Linux|Tomoyo]]
* [[TrustedBSD]]

==References==
{{Reflist}}

==External links==
* [http://www.nsa.gov/research/selinux/index.shtml United States National Security Agency's Security-Enhanced Linux site]
* [http://www.nsa.gov/public_info/press_room/2001/se-linux.shtml NSA press release: NSA shares security enhancements to Linux]
* [http://www.nsa.gov/research/selinux/list.shtml Mailing list announcement of availability]
* [http://selinux.sourceforge.net/ SELinux information for various Linux distributions]
* [http://www.ibm.com/developerworks/linux/library/l-selinux/ Anatomy of Security-Enhanced Linux] by M. Tim Jones
* [http://blog.supportpro.com/?p=115#more-115  Security-Enhanced Linux]
* [http://docs.fedoraproject.org/selinux-user-guide/f12/en-US/ Fedora SELinux User Guide]
* [http://docs.fedoraproject.org/selinux-managing-confined-services-guide/en-US/F11/html/ SELinux Managing Confined Services Guide]

[[Category:Operating system security]]
[[Category:Linux security software]]
[[Category:Linux kernel features]]
[[Category:National Security Agency]]
[[Category:Computer file systems]]

[[cs:SELinux]]
[[de:SELinux]]
[[es:SELinux]]
[[fr:SELinux]]
[[it:Security-Enhanced Linux]]
[[nl:Security-Enhanced Linux]]
[[ja:SELinux]]
[[pl:Security-Enhanced Linux]]
[[pt:SELinux]]
[[ru:SELinux]]
[[simple:Security-Enhanced Linux]]
[[fi:SELinux]]
[[sv:SELinux]]
[[uk:SELinux]]
[[zh:SELinux]]</rev></revisions></page></pages></query></api>
