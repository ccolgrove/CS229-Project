<?xml version="1.0"?><api><query><pages><page pageid="8273596" ns="0" title="Full virtualization"><revisions><rev xml:space="preserve">[[Image:VirtualBox2.png|300px|thumb|Screenshot of one virtualization environment]]&lt;!-- VirtualBox --&gt;
In [[computer science]], '''full virtualization''' is a virtualization technique used to provide a certain kind of [[virtual machine]] environment, namely, one that is a complete simulation of the underlying hardware. Full virtualization requires that every salient feature of the hardware be reflected into one of several [[virtual machine]]s &amp;ndash; including the full instruction set, input/output operations, interrupts, memory access, and whatever other elements are used by the software that runs on the [[bare machine]], and that is intended to run in a virtual machine. In such an environment, any software capable of execution on the raw hardware can be run in the virtual machine and, in particular, any operating systems. The obvious test of virtualization is whether an operating system intended for stand-alone use can successfully run inside a virtual machine.

Other forms of [[platform virtualization]] allow only certain or modified software to run within a virtual machine. The concept of ''full virtualization'' is well established in the literature, but it is not always referred to by this specific term; see platform virtualization for terminology.

An important example of full virtualization was that provided by the control program of IBM's [[CP/CMS]] operating system.  It was first demonstrated with IBM's [[IBM CP-40|CP-40]] research system in 1967, then distributed via [[open source]] in CP/CMS in 1967-1972, and re-implemented in IBM's [[VM (operating system)|VM family]] from 1972 to the present. Each CP/CMS user was provided a simulated, stand-alone computer. Each such virtual machine had the complete capabilities of the underlying machine, and (for its user) the virtual machine was indistinguishable from a private system. This simulation was comprehensive, and was based on the ''Principles of Operation'' manual for the hardware. It thus included such elements as instruction set, main memory, interrupts, exceptions, and device access. The result was a single machine that could be [[multiplexed]] among many users.

Full virtualization is only possible given [[Popek_and_Goldberg_virtualization_requirements|the right combination of hardware and software]] elements. For example, it was not possible with most of IBM's [[System/360]] series with the exception being the [[IBM System/360-67]]; nor was it possible with IBM's early [[System/370]] system until IBM added virtual memory hardware to the System/370 series in 1972.

Similarly, full virtualization was not quite possible with the x86 platform until the 2005-2006 addition of the [[AMD-V]] and [[Intel VT-x]] extensions (see [[x86 virtualization]]). [[Comparison of platform virtual machines|Many platform virtual machines]] for the x86 platform came very close and claimed full virtualization even prior to the AMD-V and Intel VT-x additions. Examples include [[Adeos]], [[Mac-on-Linux]], [[Parallels Desktop for Mac]], [[Parallels Workstation]], [[VMware Workstation]], [[VMware Server]] (formerly GSX Server), [[VirtualBox]], Win4BSD, and [[Win4Lin|Win4Lin Pro]].  VMware, for instance, employs a technique called [[binary translation]] to automatically modify x86 software on-the-fly to replace instructions that &quot;pierce the virtual machine&quot; with a different, virtual machine safe sequence of instructions; this technique provides the appearance of full virtualization.&lt;ref name=&quot;VMware Paper&quot;&gt;
{{cite web
|title=Understanding Full Virtualization, Paravirtualization, and Hardware Assist
|publisher=[[VMware]]
|date=11 Sep 2007
|author=VMware
|accessdate=2007-12-09
|url=http://www.vmware.com/files/pdf/VMware_paravirtualization.pdf
|format=PDF
}}&lt;/ref&gt;

A key challenge for full virtualization is the interception and simulation of privileged operations, such as I/O instructions. The effects of every operation performed within a given virtual machine must be kept within that virtual machine &amp;ndash; virtual operations cannot be allowed to alter the state of any other virtual machine, the control program, or the hardware. Some machine instructions can be executed directly by the hardware, since their effects are entirely contained within the elements managed by the control program, such as memory locations and arithmetic registers. But other instructions that would &quot;pierce the virtual machine&quot; cannot be allowed to execute directly; they must instead be trapped and simulated. Such instructions either access or affect state information that is outside the virtual machine.

Full virtualization has proven highly successful for:
* sharing a computer system among multiple users;
* isolating users from each other (and from the control program);
* emulating new hardware to achieve improved reliability, security and productivity.

==See also==
* [[Platform virtualization]]
* [[CP/CMS]]
* [[Popek_and_Goldberg_virtualization_requirements|Popek and Goldberg Virtualization Requirements]]
* [[Hardware-assisted virtualization]]
* [[Partial virtualization]]
* [[Paravirtualization]]
* [[Comparison of platform virtual machines]]
* [[OS level virtualization]]
* [[LPAR]]
* [[PR/SM]]
* [[Hypervisor]]
* [[I/O_virtualization|I/O Virtualization]]
* [[Virtual machine]]

==References==
{{Reflist|1}}
See specific sources listed under [[platform virtualization]] and (for historical sources) [[CP/CMS]].

==External links==

[[Category:Virtualization software]]
[[Category:Virtual machines]]

[[ko:ìì  ê°ìí]]
[[ru:ÐÐ¾Ð»Ð½Ð°Ñ Ð²Ð¸ÑÑÑÐ°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ]]</rev></revisions></page></pages></query></api>
