<?xml version="1.0"?><api><query><pages><page pageid="86780" ns="0" title="Pike (programming language)"><revisions><rev xml:space="preserve">{{Infobox programming language
|name = Pike
|logo = [[File:Gotpike.png|Pike logo]]
|paradigm = [[multi-paradigm programming language|multi-paradigm]]: [[Object-oriented programming|object-oriented]], [[functional programming|functional]], [[procedural programming|procedural]]
|year = 1994
|designer = Fredrik HÃ¼binette
|developer = Pike development team supported by the Software and Systems division of the Department of Computer and Information Science (IDA) at LinkÃ¶ping University
| latest_release_version = 7.8.352
| latest_release_date    = {{Start date and age|2009|09|23}}
|typing = [[static typing|static]], [[dynamic typing|dynamic]], [[manifest typing|manifest]]
|implementations = Pike
|dialects =
|influenced_by = [[LPC (programming language)|LPC]], [[C (programming language)|C]], [[C++]]
|influenced =
| license                = [[GNU General Public License|GPL]]/[[GNU Lesser General Public License|LGPL]]/[[Mozilla Public License|MPL]]
| website                = {{URL|http://pike.ida.liu.se/}}
| operating system       = Any [[Unix-like]], [[Microsoft Windows|Windows]]
| status                 = Active
}}
'''Pike''' is an [[Interpreter (computer software)|interpreted]], [[General-purpose programming language|general-purpose]], [[High level programming language|high-level]], [[cross-platform]], [[dynamic programming language]], with a syntax similar to that of [[C (programming language)|C]].  Unlike many other dynamic languages, Pike is both statically and dynamically typed, and requires explicit type definitions.  It features a flexible type system that allows the rapid development and flexible code of dynamically typed languages, while still providing some of the benefits of a statically typed language.

Pike features [[garbage collection (computer science)|garbage collection]], advanced data types, and first-class anonymous functions, with support for many programming paradigms, including [[object-oriented programming|object-oriented]], [[functional programming|functional]] and [[imperative programming]].  Pike is [[free software]], released under the [[GNU General Public License|GPL]], [[LGPL]] and [[Mozilla Public License|MPL]] licenses.

== History ==
Pike has its roots in [[LPC (programming language)|LPC]], which was a language developed for [[MUD]]s. Programmers at [[Lysator]] in [[LinkÃ¶ping]], Sweden, most notably Fredrik HÃ¼binette and Per Hedbor, separated the language and virtual machine from the rest of the MUD driver, and used it as a rapid prototyping language for various applications, calling it LPC4. 

LPC's license did not allow use for commercial purposes, and so a new GPL implementation was written in 1994, called ÂµLPC (micro LPC).  

In 1996, ÂµLPC was renamed to Pike in order to provide a more commercially viable name.  Although the name of the company has changed over the years, the company now known as Roxen Internet Software employed many Pike developers, and provided resources for Pike's development. [[Roxen (web server)|Roxen]] is also the name of a web server developed by the company in Pike. In 2002, the programming environment laboratory at [[LinkÃ¶ping University]] took over maintenance of Pike from Roxen. Several Pike programmers have found their way to the LinkÃ¶ping office of [[Opera Software]], where the language plays a central role in the server/gateway parts of the [[Opera Mini]] application.&lt;ref&gt;{{cite web
| url = http://www.lextrait.com/Vincent/implementations.html
| title = The Programming Languages Beacon, v10.0
| first = Vincent
| last = Lextrait
| month = January
| year = 2010
| accessdate = 14 March 2010
}}&lt;/ref&gt;

== Syntax highlights ==
=== Hello World ===
:''For an explanation of the tradition of programming &quot;Hello World&quot;, see [[Hello world program]].''
&lt;source lang=&quot;c&quot;&gt;
int main() {
    write(&quot;Hello world!\n&quot;);
    return 0;
}
&lt;/source&gt;
The syntax above requires some explanation.  Those who are familiar with [[C programing language|C]] or [[C++]] should pick it up right away.

* The first line contains the [[main function]]. This is the first function executed when a program starts. The &quot;int&quot; in front of it tells that a number of type [[Integer]] will be returned when the function ends.
* The write function sends a [[string literal]] to the standard output buffer, which in most cases is a [[command line interface]].
* The third line returns a number to the caller of a function, in this case the [[command line interface]] where zero usually means the program executed without error.
* The curly brackets enclose the function and the semicolon separates statements (meaning the [[function (programming)|function]] could have been written on a single line: ''int main(){write(&quot;Hello world!\n&quot;);return 0;}'')
* The &quot;\n&quot; after &quot;Hello world!&quot; is a [[newline]] character.

=== Data types ===
The following list shows all the standard data types that Pike provides.  Advanced data types such as sequences, queues, heaps, stacks, etc. are available in the ADT module which is included with Pike.

Basic data types:
* int
* float
* string

Container types:
* array
* mapping
* [[multiset]]

Other types:
* program  (the compiled representation of a class)
* object   (an instance of a class)
* function

Pike requires explicit type definitions for all variables. It uses this information to report type errors at compile time. The following code will cause a compile error because the value of the variable &quot;number&quot; must be an integer but the code is attempting to assign floating point and string values to it.
&lt;source lang=&quot;c&quot;&gt;
int number;     // integer variable, it only accepts integers
number = 5.5;   // 5.5 is a floating point value, error
number = &quot;5&quot;;   // &quot;5&quot; is a string, not the integer value 5, error
&lt;/source&gt;
That kind of behavior is traditionally considered restrictive and limiting by proponents of dynamically typed languages.  However unlike C, C++, and Java, Pike uses a more flexible type systemâspecifically, a system of [[tagged union]]s.  The system allows programmers to declare variables that may contain values of multiple types, something impossible in most of the C-family languages without straying from the bounds of [[Union (computer science)#C/C++|safe usage]].

The following demonstrates a variable that can hold either an integer or a floating point number.
&lt;source lang=&quot;c&quot;&gt;
int|float number; // integer OR float variable
number = 5;       // this is legal
number = 5.5;     // this is legal also
&lt;/source&gt;
Because a variable can be declared as holding many different data types, functions are provided to determine what type of data is currently stored.  These functions are all of the form typenamep, as in intp, floatp, stringp, etc.
&lt;source lang=&quot;c&quot;&gt;
int|float number;
number = 5;
intp(number);      // returns true because number holds an int
floatp(number);    // returns false
number = 5.5;
floatp(number);    // returns true because number now holds a float
&lt;/source&gt;
Additionally, there is a special &quot;mixed&quot; data type.  That definition allows a variable to hold any kind of data type.
&lt;source lang=&quot;c&quot;&gt;
mixed anything;
anything = 5;    // anything is now the integer value 5
anything = 5.5;  // anything is now the float value 5.5
anything = &quot;5&quot;;  // anything is now the string value &quot;5&quot;
&lt;/source&gt;
In order to convert a value from one type to another, Pike can use an explicit cast:
&lt;source lang=&quot;c&quot;&gt;
mixed anything;
anything = (int)5.5;         // anything is now the integer value 5
anything = (string)anything; // anything is now the string value &quot;5&quot;
&lt;/source&gt;

==See also==
{{Portal|Free software}}
* [[LPMud family tree]]

==References==
{{Reflist|2}}

==External links==
* [http://pike.ida.liu.se/ Official Homepage]
* [http://www.gotpike.org/ Community Page]

{{DEFAULTSORT:Pike (Programming Language)}}
[[Category:Class-based programming languages]]
[[Category:Scripting languages]]
[[Category:Free compilers and interpreters]]
[[Category:Cross-platform software]]
[[Category:Object-oriented programming languages]]

[[ca:Pike (llenguatge de programaciÃ³)]]
[[de:Pike (Programmiersprache)]]
[[fr:Pike (langage)]]
[[id:Pike (bahasa pemrograman)]]
[[ja:Pike]]
[[no:Pike (programmeringssprÃ¥k)]]
[[pl:Pike]]
[[ru:Pike]]
[[sv:Pike]]
[[tg:Pike]]
[[zh:Pike]]</rev></revisions></page></pages></query></api>
