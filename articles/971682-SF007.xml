<?xml version="1.0"?><api><query><pages><page pageid="971682" ns="0" title="Iptables"><revisions><rev xml:space="preserve">{{lowercase}}
{{Infobox software
 |name = iptables
 |logo =
 |screenshot =
 |caption =
 |author = [[Rusty Russell]]
 |developer = Netfilter Core Team
 |released  = [[1998]]
 |latest_release_version = 1.4.12.1
 |latest_release_date = {{release date and age|2011|09|01}}&lt;ref&gt;{{cite web | url=http://www.netfilter.org/news.html#2011-09-01 | title=iptables 1.4.12.1 released | date=2011-09-01}}&lt;/ref&gt;
 |programming language = [[C (programming language)|C]]
 |operating_system = [[Linux]]
 |genre = [[Network packet|Packet filtering]]
 |license = [[GNU General Public License]]
 |website = [http://www.netfilter.org/ www.netfilter.org]
}}
'''iptables''' is a [[user space]] application program that allows a [[system administrator]] to configure the tables provided by the [[Linux kernel]] [[Firewall (computing)|firewall]] (implemented as different [[Netfilter]] modules) and the chains and rules it stores. Different kernel modules and programs are currently used for different protocols; ''iptables'' applies to IPv4, ''ip6tables'' to IPv6, ''arptables'' to ARP, and ''ebtables'' to Ethernet frames.

iptables requires elevated privileges to operate and must be executed by user [[Superuser|root]], otherwise it fails to function.  On most Linux systems, iptables is installed as &lt;tt&gt;/usr/sbin/iptables&lt;/tt&gt; and documented in its [[man page]],&lt;ref&gt;[http://dev.medozas.de/files/xtables/iptables.html iptables] and [http://dev.medozas.de/files/xtables/ip6tables.html ip6tables] manpages&lt;/ref&gt;&lt;!-- turns out too many people don't have uptodate manpages, including linux.die.net/man --&gt; which can be opened using &lt;code&gt;man iptables&lt;/code&gt; when installed. It may also be found in &lt;tt&gt;/sbin/iptables&lt;/tt&gt;, but since iptables is more like a service rather than an &quot;essential binary&quot;, the preferred location remains &lt;tt&gt;/usr/sbin&lt;/tt&gt;.

''iptables'' is also commonly used to inclusively refer to the kernel-level components. ''x_tables'' is the name of the kernel module carrying the shared code portion used by all four modules that also provides the API used for extensions; subsequently, ''Xtables'' is more or less used to refer to the entire firewall (v4,v6,arp,eb) architecture.

== History ==

{{See also|Netfilter#History}}

Netfilter and iptables were initially designed together, so there is some overlap in early history. See [[Netfilter]]'s article.

&lt;!-- This sentence is copied from [[Netfilter]] for a starting introduction. --&gt;Prior to iptables, the predominant software packages for creating Linux firewalls were [[ipchains]] in Linux 2.2; and [[ipfwadm]] in Linux 2.0 which was based on [[Berkeley Software Distribution|BSD]] [[ipfirewall|ipfw]].

iptables preserves the basic ideas introduced with ipfwadm: lists of rules each of which specified what to match within a packet, and what to do with such a packet. ipchains added the concept of ''chains'' of rules, and iptables extended this further into ''tables'': one table was consulted when deciding whether to [[Network address translation|NAT]] a packet, and another consulted when deciding how to filter a packet. In addition, the three filtering points in a packet's journey were altered such that any packet only passes through one filtering point.

This split allowed iptables, in turn, to use the information the connection tracking layer had determined about a packet. The information was previously tied to NAT. This makes iptables superior to ipchains because it has the ability to monitor the state of a connection and redirect, modify or stop data packets based on the state of the connection, not just on the source, destination or packet data content. (This is done with the &lt;code&gt;-m conntrack&lt;/code&gt; match, explained in the manpages.) A firewall using iptables this way is said to be a [[stateful firewall]] versus ipchains, which can only create a [[stateless firewall]] (except in very limited cases). It can be said that ipchains is not fully aware of the context from which a data packet arises, whereas iptables is. Therefore, iptables can make better decisions on the fate of packets and connections.

The Netfilter maintainer Patrick McHardy proposed to replace iptables with [[nftables]] in the future. The project is currently in the alpha stage of development. Alternate developments include Xtables2&lt;ref&gt;[http://lwn.net/Articles/345176/ Xtables2 snapshot 20090804 ], LWN.net&lt;/ref&gt; that seek to gradually improve the code that is already in the Linux kernel.

==Operational summary==

Xtables allows the [[system administrator]] to define ''tables'' containing ''chains'' of ''rules'' for the treatment of packets. Each table is associated with a [[Netfilter#iptables|different kind of packet processing]]. Packets are processed by sequentially traversing the rules in chains. A rule in a chain can cause a goto or jump to another chain, and this can be repeated to whatever level of nesting is desired. (A jump is like a âcallâ, i.e. the point that was jumped from is remembered.) Every network packet arriving at or leaving from the computer traverses at least one chain.

[[Image:Netfilter-packet-flow.svg|300px|thumb|Packet flow paths. Packets start at a given box and will flow along a certain path, depending on the circumstances.]]

The origin of the packet determines which chain it traverses initially. There are five ''predefined chains'' (mapping to the five available Netfilter hooks), though a table may not have all chains. Predefined chains have a ''policy'', for example DROP, which is applied to the packet if it reaches the end of the chain. The system administrator can create as many other chains as desired. These chains have no policy; if a packet reaches the end of the chain it is returned to the chain which called it. A chain may be empty.

* âPREROUTINGâ: Packets will enter this chain before a routing decision is made.
* âINPUTâ: Packet is going to be locally delivered. (N.B.: It does not have anything to do with processes having a socket open. Local delivery is controlled by the âlocal-deliveryâ routing table: `&lt;code&gt;ip route show table local&lt;/code&gt;`.)
* âFORWARDâ: All packets that have been routed and were not for local delivery will traverse this chain.
* âOUTPUTâ: Packets sent from the machine itself will be visiting this chain.
* âPOSTROUTINGâ: Routing decision has been made. Packets enter this chain just before handing them off to the hardware.

Each rule in a chain contains the specification of which packets it matches. It may also contain a ''target'' (used for extensions) or ''verdict'' (one of the built-in decisions). As a packet traverses a chain, each rule in turn is examined. If a rule does not match the packet, the packet is passed to the next rule. If a rule does match the packet, the rule takes the action indicated by the target/verdict, which may result in the packet being allowed to continue along the chain or it may not. Matches make up the large part of rulesets, as they contain the conditions packets are tested for. These can happen for about any layer in the OSI model, as with e.g. the ''&lt;tt&gt;--mac-source&lt;/tt&gt;'' and ''&lt;tt&gt;-p tcp --dport&lt;/tt&gt;'' parameters, and there are also protocol-independent matches, such as ''&lt;tt&gt;-m time&lt;/tt&gt;''.

The packet continues to traverse the chain until either

# a rule matches the packet and decides the ultimate fate of the packet, for example by calling one of the ACCEPT or DROP, or a module returning such an ultimate fate; or
# a rule calls the RETURN verdict, in which case processing returns to the calling chain; or
# the end of the chain is reached; traversal either continues in the parent chain (as if RETURN was used), or the base chain policy, which is an ultimate fate, is used.

Targets also return a verdict like ACCEPT (NAT modules will do this) or DROP (e.g. the âREJECTâ module), but may also imply CONTINUE (e.g. the &quot;LOG&quot; module; CONTINUE is an internal name) to continue with the next rule as if no target/verdict was specified at all.

== Front-ends and scripts ==

There are numerous third-party software for iptables that try to facilitate setting up rules. Front-ends in [[ncurses|textual]] or graphical fashion allow users to click-generate simple rulesets; scripts usually refer to [[Unix shell|shell scripts]] (but other scripting languages are possible too) that call iptables or (the faster) &lt;code&gt;iptables-restore&lt;/code&gt; with a set of predefined rules, or rules expanded from a template with the help of a simple configuration file. Linux distributions commonly employ the latter scheme of using templates. Such a template-based approach is practically a limited form of a rule generator, and such generators also exist in standalone fashion, for example, as PHP web pages.

Such front-ends, generators and scripts are often limited by their built-in template systems and where the templates offer substitution spots for user-defined rules. Also, the generated rules are generally not optimized for the particular firewalling effect the user wishes, as doing so will likely increase the maintenance cost for the developer. Users who reasonably understand iptables and want their ruleset optimized are advised to construct their own ruleset.

== Other tools ==
&lt;!-- No more links. See Discussion page! --&gt;
*[[NuFW]], an authenticating firewall extension to Netfilter
*[[GUFW]], simple configuration utility for [[Ubuntu (operating system)|Ubuntu]]
*[http://www.cipherdyne.org/fwsnort/ FWSnort], Translates a [[Snort (software)|Snort]] IDS ruleset into an IPTables ruleset.
*[http://www.cipherdyne.org/psad/ psad], Automated iptables log analysis to detect suspicious activity (port scans and probes for backdoors), and passively fingerprint remote TCP stacks.
*[http://www.lowth.com/rope Programming Netfilter/iptables modules in &quot;Rope&quot;]
*[http://sandbox.ltmnet.com/libiptables LibIPTables C API for iptables] (iptables has its own API - libiptc - although this shouldn't be used as a public API, and is known to change, which breaks programs that use it)

===Tutorials===
*[http://www.netfilter.org/documentation/index.html#documentation-howto Netfilter HOWTOs]
*[https://help.ubuntu.com/community/IptablesHowTo How to use iptables on Ubuntu]
*[http://ornellas.apanela.com/dokuwiki/pub:firewall_and_adv_routing Documentation on how to integrate both firewall (IP Tables) and Linux advanced routing]
* â[http://jengelh.medozas.de/documents/Chaostables.pdf Detecting and deceiving network scans]â â countermeasures against nmap

==External links==
{{Portal|Free software}}
* [http://www.netfilter.org/ The netfilter/iptables project Web page]
* {{Freshmeat|iptables|iptables}}
* [http://www.netfilter.org/documentation/index.html The netfilter/iptables documentation page] (outdated){{Clarify|date=November 2009}}

==References==
&lt;references /&gt;

{{Firewall software}}

[[Category:Firewall software]]
[[Category:Linux security software]]
[[Category:Linux kernel features]]

[[ca:Iptables]]
[[cs:Iptables]]
[[de:Iptables]]
[[fa:Iptables]]
[[fr:Iptables]]
[[ja:Iptables]]
[[pl:Iptables]]
[[pt:Iptables]]
[[ru:Iptables]]
[[fi:Iptables]]
[[uk:Iptables]]
[[zh:Iptables]]</rev></revisions></page></pages></query></api>
