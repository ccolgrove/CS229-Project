<?xml version="1.0"?><api><query><pages><page pageid="294229" ns="0" title="DragonFly BSD"><revisions><rev xml:space="preserve">{{Redirect|DragonFly|other uses|Dragonfly (disambiguation)}}
{{multiple issues
|primarysources=April 2009
|update=June 2011
|copyedit=November 2011
}}
{{Infobox OS
| name                   = DragonFly
| logo                   = [[File:DragonFly BSD Logo.png|200px]]
| screenshot             = [[File:DragonFly BSD 2.10.1 boot loader screenshot.png|300px]]
| caption                = DragonFly BSD 2.10.1 boot loader
| developer              = [[Matthew Dillon (computer scientist)|Matthew Dillon]]
| family                 = [[Berkley Software Distribution|BSD]]
| working state          = Current
| source model           = [[Open source]]
| released               = {{Start date|df=yes|2004|7|12}}
| latest release version = 2.10.1
| latest release date    = {{Release date and age|2011|04|26}}
| latest_preview_version = 
| latest_preview_date    = 
| frequently_updated     = 
| marketing_target       = 
| language               = English
| prog_language          = 
| updatemodel            = 
| package_manager        = [[pkgsrc]]
| supported platforms    = [[IA-32]], [[x86-64]]
| kernel type            = [[Hybrid kernel|Hybrid]]
| userland               = BSD
| ui                     = {{nowrap|[[tcsh]] (root) / [[Bourne shell|sh]] (users)}}
| license                = [[BSD license|BSD]]
| preceded_by            = [[FreeBSD]]
| succeeded_by           = 
| website                = {{URL|http://www.dragonflybsd.org}}
}}
'''DragonFly BSD''' is a [[Free software|free]] [[Unix-like]] operating system created as a [[fork (software)|fork]] of [[FreeBSD]] 4.8.  [[Matthew Dillon (computer scientist)|Matthew Dillon]], an [[Amiga]] developer in the late 1980s and early 1990s and a FreeBSD developer between 1994 and 2003, began work on DragonFly BSD in June 2003 and announced it on the FreeBSD mailing lists on July 16, 2003.&lt;ref name=&quot;announcing-dfbsd&quot; /&gt;

Dillon started DragonFly in the belief that the methods and techniques being adopted for [[Thread (software engineering)|threading]] and [[symmetric multiprocessing]] in FreeBSD 5&lt;ref name=&quot;fbsd-smp&quot; /&gt; would lead to poor system performance and would cause maintenance difficulties. He sought to correct these suspected problems within the FreeBSD project.&lt;ref name=&quot;df-released-for-users&quot; /&gt; Due to ongoing conflicts with other FreeBSD developers over the implementation of his ideas,&lt;ref name=&quot;behind-dfbsd&quot; /&gt; and other reasons, his ability to directly change the FreeBSD code was eventually revoked. Despite this, the DragonFly BSD and FreeBSD projects still work together contributing bug fixes, driver updates and other system improvements to each other.

Intended to be the logical continuation of the FreeBSD 4.x series, DragonFly's development has diverged significantly from FreeBSD's, including a new [[Light Weight Kernel Threads]] implementation (''LWKT'') and a light weight ports/messaging system.&lt;ref name=&quot;osnews-interview-2004&quot; /&gt; Many concepts planned for DragonFly were inspired by [[AmigaOS]].&lt;ref name=&quot;unix-for-clusters&quot; /&gt;

== System design ==
=== Kernel ===
Like most modern [[Kernel (software engineering)|kernel]]s, DragonFly is a [[hybrid kernel|hybrid]], containing features of both monolithic and microkernels, such as the message passing capability of microkernels enabling larger portions of the OS to benefit from [[protected memory]], as well as retaining the speed of monolithic kernels for certain critical tasks. The messaging subsystem being developed is similar to those found in microkernels such as [[Mach kernel|Mach]], though it is less complex by design. DragonFly's messaging subsystem has the ability to act in either a synchronous or asynchronous fashion, and attempts to use this capability to achieve the best performance possible in any given situation.&lt;ref name=&quot;dfbsd-os-wp&quot; /&gt;

There is progress being made to provide both device [[input/output]] (I/O) and [[virtual file system]] (VFS) messaging capabilities that will allow the remainder of the project goals to be met. The new infrastructure will allow many parts of the kernel to be migrated out into userland, whereby they will be more easily debugged as they will be smaller, isolated programs, instead of being small parts entwined in a larger chunk of code. The migration of select kernel code into userspace has the additional benefit of making the system more robust; if a userspace driver crashes, it will not crash the kernel.&lt;ref name=&quot;kt-interview&quot; /&gt;

[[System call]]s are being split into userland and kernel versions, as well as being encapsulated into messages. This will help reduce the size and complexity of the kernel by moving variants of standard system calls into a userland [[compatibility layer]], as well as help maintain forwards and backwards compatibility between DragonFly versions. [[Linux]] and other [[Unix-like]] OS compatibility code is being migrated out similarly. Multiple instances of the native userland compatibility layer created in [[FreeBSD Jail|jails]] could give DragonFly functionality similar to that found in [[User-mode Linux|UML]]. Unlike UML (which is essentially a port of Linux to itself as if the host kernel was a different hardware platform), DragonFly's virtualization doesn't require special drivers to communicate with the real hardware on the computer.&lt;ref name=&quot;unix-for-clusters&quot; /&gt;

==== CPU localization ====
In DragonFly, threads are locked to [[Central processing unit|CPUs]] by design, and each processor has its own LWKT scheduler. Threads are never preemptively switched from one processor to another; they are only migrated by the passing of an [[inter-processor interrupt|IPI]] message between the CPUs involved. Inter-processor thread scheduling is also accomplished by sending asynchronous IPI messages. One advantage to this clean compartmentalization of the threading [[subsystem]] is that the processors' on-board [[CPU cache|caches]] in SMP systems do not contain duplicated data, allowing for higher performance by giving each processor in the system the ability to use its own cache to store different things to work on.&lt;ref name=&quot;unix-for-clusters&quot; /&gt;

The LWKT subsystem is being employed to partition work among multiple kernel threads (for example in the networking code; one thread per protocol per processor), reducing contention by removing the need to share certain resources among various kernel tasks. This thread partitioning implementation of CPU localization algorithms is arguably the key differentiating feature of DragonFly's design.&lt;ref name=&quot;behind-dfbsd&quot; /&gt;

==== Protecting shared resources ====
In order to run safely on multiprocessor machines, access to shared resources (files, data structures etc.) must be [[serialization|serialized]] so that threads or processes do not attempt to modify the same resource at the same time. In order to prevent multiple threads from accessing or modifying a shared resource simultaneously, DragonFly employs critical sections, and serializing tokens to prevent concurrent access. Whereas both Linux and FreeBSD 5 employ fine-grained [[mutex]] models to achieve higher performance on [[multiprocessor]] systems, DragonFly does not.  Until recently, DragonFly also employed [[spl (Unix)|SPL]]s, but these were replaced with critical sections.

Much of the system's core, including the LWKT subsystem, the IPI messaging subsystem and the new kernel memory allocator, are lockless, meaning that they work without using mutexes, and operate on a per-CPU basis. Critical sections are used to protect against local interrupts and operate on a per-CPU basis, guaranteeing that a thread currently being executed will not be preempted.

[[Serializing tokens]] are used to prevent concurrent accesses from other CPUs and may be held simultaneously by multiple threads, ensuring that only one of those threads is running at any given time. Blocked or sleeping threads therefore do not prevent other threads from accessing the shared resource unlike a thread that is holding a mutex. Among other things, the use of serializing tokens prevents many of the situations that could result in [[deadlock]]s and [[priority inversion]]s when using mutexes, as well as greatly simplifying the design and implementation of a many-step procedure that would require a resource to be shared among multiple threads. The serializing token code is evolving into something quite similar to the &quot;[[Read-copy-update]]&quot; feature now available in Linux. Unlike Linux's current RCU implementation, DragonFly's is being implemented such that only processors competing for the same token are affected rather than all processors in the computer.

==== Threading ====
As support for multiple [[processor architecture]]s complicates [[symmetric multiprocessing|SMP]] support,&lt;ref name=&quot;behind-dfbsd&quot; /&gt; DragonFly BSD limits its supported platforms to [[x86]] and [[x86-64]], with both single processor and [[Symmetric multiprocessing|SMP]] models.&lt;ref name=&quot;osnews-mp-inproved&quot; /&gt; Since version 1.10, DragonFly supports 1:1 userland threading (one kernel thread for every userland thread),&lt;ref name=&quot;dfbsd-design-goals&quot; /&gt;&lt;ref name=&quot;luciani_dcbsdcon2009&quot; /&gt; which is seen as a relatively simple and easy to maintain solution.&lt;ref name=&quot;unix-for-clusters&quot; /&gt; Inherited from FreeBSD, DragonFly also supports SMP multi-threading imported.&lt;ref name=&quot;paying-off-already&quot; /&gt;

==== Virtual kernel ====

Since release 1.8 DragonFly has a new virtualization mechanism similar to UML,&lt;ref name=&quot;towards-free-clustering&quot; /&gt; allowing to run another kernel in the userland. The virtual kernel is run in completely isolated environment with emulated network and storage interfaces, thus simplifying testing the drivers, kernel subsystems and clustering features.&lt;ref name=&quot;kt-interview&quot; /&gt;&lt;ref name=&quot;unix-for-clusters&quot; /&gt;

==== Memory management ====
Early on in its development, DragonFly acquired a [[slab allocator]], which replaced the aging FreeBSD 4 kernel memory allocator.&lt;ref name=&quot;slab-allocator-fbsd&quot; /&gt; The new slab allocator requires neither mutexes nor blocking operations for memory assignment tasks and, unlike the code it replaced, is multiprocessor safe. It was eventually ported to be utilized outside the kernel in a replacement to the old userland malloc implementation.&lt;ref name=&quot;new-libc-malloc&quot; /&gt;

DragonFly uses SFBUFs (Super-Fast BUFfers) and MSFBUFs (Multi-SFBUFs).  A SFBUF is used to manage ephemeral single-page mappings and cache them when appropriate.  They are used for retrieving a reference to data that is held by a single VM page.  This simple, yet powerful, abstraction gives a broad number of abilities, such as [[zero-copy]] achieved in the sendfile(2) system call.

SFBUFs are used in numerous parts of the kernel, such as the Vnode Object Pager and the [[Pipeline (Unix)|PIPE]] subsystems (indirectly via XIOs) for supporting high-bandwidth transfers.  An SFBUF can only be used for a ''single'' VM page; MSFBUFs are used for managing ephemeral mappings of multiple-pages.

The SFBUF concept was devised by David Greenman of the FreeBSD Project when he wrote the sendfile(2) system call; it was later revised by Dr. Alan L. Cox and Matthew Dillon.  MSFBUFs were designed by Hiten Pandya and Matthew Dillon.

=== Package management ===
DragonFly previously used FreeBSD's [[FreeBSD Ports|Ports]] system for third party software, but since the 1.4 release, NetBSD's [[pkgsrc]] is the official [[package management system]]. With &lt;code&gt;pkgsrc&lt;/code&gt;, the DragonFly developers are largely freed of having to maintain a large number of third party programs while still having access to up to date applications.&lt;ref name=&quot;10-years-of-pkgsrc&quot; /&gt; The pkgsrc developers also benefit from this arrangement as it helps to ensure the portability of the code.&lt;ref name=&quot;df-released-for-users&quot; /&gt;

Still &lt;code&gt;pkgsrc&lt;/code&gt; is seen as a temporary solution. One of the project stated goals is an advanced [[virtual file system|VFS]]-based package management system capable of dealing with multiple packages versions.&lt;ref name=&quot;dfbsd-design-goals&quot; /&gt;

=== CARP support ===
The initial implementation of [[Common Address Redundancy Protocol]] (commonly referred as ''CARP'') to was finished in March 2007&lt;ref name=&quot;carp-first-patch&quot; /&gt;. As of 2011, CARP support is integrated into DragonFly BSD.&lt;ref name=&quot;man-carp&quot; /&gt;

=== HAMMER file system ===
{{main article|HAMMER}}
Alongside with [[Unix File System]], which is typically the default [[file system]] on BSDs, DragonFly BSD supports HAMMER file system. It was developed specifically for DragonFly BSD to provide a feature-rich yet better designed analogue of then increasingly popular [[ZFS]].&lt;ref name=&quot;kt-interview&quot; /&gt;&lt;ref name=&quot;hammer-design-document&quot; /&gt;&lt;ref name=&quot;unix-for-clusters&quot; /&gt;

HAMMER supports configurable file system history, [[snapshot (computer storage)|snapshot]]s, [[checksum]]ming, [[data deduplication]] and other features typical for file systems of its kind.&lt;ref name=&quot;towards-free-clustering&quot; /&gt; Though its performance is currently beyond the similar file systems like ZFS or [[btrfs]], it is recognised as an interesting and perspective option.&lt;ref name=&quot;can-hammer-compete&quot; /&gt;

=== devfs ===
In 2007 DragonFly BSD received a new [[device file system]], which dynamically adds and removed device nodes, allows accessing devices by connection paths, recognises drives by [[serial number]]s and removes the need for pre-populated &lt;code&gt;/dev&lt;/code&gt; file system hierarchy. It was implemented as a [[Google Summer of Code]]'2009 project.&lt;ref name=&quot;bsdtalk184&quot; /&gt;

=== Application snapshots ===
DragonFly BSD supports [[Amiga]]-style ''resident applications'' feature: it takes a snapshot of a large, dynamically linked program's [[virtual memory space]] after loading, allowing future instances of the program to start much more quickly than it otherwise would have. This replaces the [[prelinking]] capability that was being worked on earlier in the project's history, as the resident support is much more efficient. Large programs like those found in [[KDE]] with many [[Library (computer science)|shared libraries]] will benefit the most from this support.&lt;ref name=&quot;dfbsd-diary&quot; /&gt;

== Development and distribution ==
DragonFly forked from FreeBSD 4.8 and imports features and bug fixes from FreeBSD 4 and 5 where appropriate, such as [[Advanced Configuration and Power Interface|ACPI]] and a new [[Advanced Technology Attachment|ATA]] driver framework from FreeBSD 4. As the number of DragonFly developers is currently small, with most of them focused on implementing basic functionality, [[device driver]]s are being kept mostly in sync with FreeBSD 5.x, the branch of FreeBSD where all new drivers are being written. The DragonFly developers are slowly moving toward using the &quot;[[busdma]]&quot; [[API]]s, which will help to make the system easier to port to new architectures, but it is not a major focus at this time.

As with [[FreeBSD]] and [[OpenBSD]], the developers of DragonFly BSD are slowly replacing [[1 true brace style|K&amp;R]] style [[C (programming language)|C]] code with more modern, [[ANSI C|ANSI]] equivalents. Similar to other operating systems, DragonFly's version of the [[GNU Compiler Collection]] has an enhancement called the [[Buffer overflow protection#GCC Stack-Smashing Protector (ProPolice)|Stack-Smashing Protector (ProPolice)]] enabled by default, providing some additional protection against [[buffer overflow]] based attacks. It should be noted that {{asof|2005|7|23|lc=1}}, the kernel is no longer built with this protection by default.&lt;ref name=&quot;dfbsd-diary&quot; /&gt;

Being a derivative of FreeBSD, DragonFly has inherited an easy-to-use integrated build system that can rebuild the entire base system from source with only a few commands. The DragonFly developers use the [[Git (software)|Git]] version control system to manage changes to the DragonFly [[source code]]. Unlike its parent FreeBSD, DragonFly has both stable and unstable releases in a single source tree, due to a smaller developer base.&lt;ref name=&quot;behind-dfbsd&quot; /&gt;

Like the other BSD kernels (and those of most modern operating systems), DragonFly employs a built-in [[kernel debugger]] to help the developers find kernel bugs. Furthermore, {{asof|2004|10|lc=1}}, a debug kernel, which makes bug reports more useful for tracking down kernel-related problems, is installed by default, at the expense of a relatively small quantity of disk space. When a new kernel is installed, the backup copy of the previous kernel and its modules are stripped of their debugging symbols to further minimize disk space usage.

=== Distribution media ===
The operating system is distributed as a [[Live CD]] and [[Live USB]] (''full [[X Window System|X11]]'' flavour available) that boots into a complete DragonFly system.&lt;ref name=&quot;towards-free-clustering&quot; /&gt;&lt;ref name=&quot;bsdtalk184&quot; /&gt; It includes the base system and a complete set of manual pages, and may include source code and useful packages in future versions. The advantage of this is that with a single CD you can install the software onto a computer, use a full set of tools to repair a damaged installation, or demonstrate the capabilities of the system without installing it. Daily snapshots for both i386 and x86-64 architectures are available from the master site for those who want to install the most recent versions of DragonFly without building from source.

Like the other free open source BSDs, DragonFly is distributed under the terms of the modern version of the [[BSD license]].

=== Release history ===

{| class=&quot;wikitable sortable&quot;
|-
! Version
! Date&lt;ref name=&quot;dfly-releases&quot; /&gt;
! Changes
&lt;!--
|-
! 2.12
| {{dts|2011|12||}}
|
*default kernel became multiprocessor-capable
*HAMMER performance improvements
*enhanced [[TrueCrypt]] volumes support
*[[dm-crypt]] replaced with compatible [[BSD licenses#2-clause license (&quot;Simplified BSD License&quot; or &quot;FreeBSD License&quot;)|BSD-licensed]] library
*enhanced [[POSIX]] compatibility
--&gt;
|-
! 2.10
| {{dts|2011|4|26}}
|
*Giant lock removed from every area except the [[virtual memory]] subsystem
*HAMMER deduplication
*GCC 4.4
*[[bridging (networking)|bridging]] system rewritten
*significant performance improvements
|-
! 2.8
| {{dts|2010|10|30}}
|
*Wi-Fi stack ported from [[FreeBSD]]
*[[Logical volume management]]
*[[dm-crypt]]
*new disk scheduler
*reduced [[giant lock]] usage
|-
! 2.6
| {{dts|2010|4|6}}
|
*swapcache
*[[tmpfs]] ported from NetBSD
*HAMMER and general I/O improvements
|-
! 2.4
| {{dts|2009|9|16}}
|
*[[devfs]]
*New AHCI driver
*[[Network File System (protocol)|Network File System]] improvements
*full x86-64 support
|-
! 2.2
| {{dts|2009|2|17}}
|
*HAMMER officially production-ready&lt;ref name=&quot;towards-free-clustering&quot; /&gt;
*major stability improvements
*new release media: [[LiveDVD]] and [[Live USB|LiveUSB]]
|-
! 2.0
| {{dts|2008|7|20}}
|
*major HAMMER improvements
|-
! 1.12
| {{dts|2008|2|26}}
|
*OpenBSD's hardware sensors framework imported from FreeBSD
*[[Bluetooth]] stack
*GCC 4.1
*[[DragonFly Mail Agent]]
*support for the [[Intel 80386|386]] CPU dropped
*preliminary [[x86-64]] support (not functional)
*experimental HAMMER support
|-
! 1.10
| {{dts|2007|8|6}}
|
*userland threading system
*[[Advanced Host Controller Interface]] support
*[[GUID Partition Table]] support
|-
! 1.8
| {{dts|2007|1|30}}
|
*virtual kernel implementation (similar to [[User-mode Linux]] or [[KVM]])
|-
! 1.6
| {{dts|2006|7|24}}
|
*new random number generator
*[[IEEE 802.11]] framework refactored
*major giant lock, clustering and userland VFS improvements
*major stability improvements&lt;ref name=&quot;cuts-the-cord&quot; /&gt;
|-
! 1.4
| {{dts|2006|1|7}}
|
*[[GNU Compiler Collection|GCC]] 3.4
*&lt;code&gt;pkgsrc&lt;/code&gt; used by default&lt;ref name=&quot;cuts-the-cord&quot; /&gt;
*[[Citrus Project|Citrus]] imported from the NetBSD&lt;ref name=&quot;quick-review-dfbsd-14&quot; /&gt;
|-
! 1.2
| {{dts|2005|4|8}}
|
*TCP SACK
*TCP Performance tuning
*[[ALTQ]] and [[PF]]
*[[thread-local storage]]
*Console over [[IEEE 1394]]
*Namecache infrastructure rewritten
*[[X Window System|X11]] support
*&lt;code&gt;pkgsrc&lt;/code&gt; support
|-
! 1.0
| {{dts|2004|7|12}}
|
*''technology showcase''
*new BSD Installer
*LWKT subsystem and lightweight ports/messaging system
*mostly MP safe networking stack
*lockless memory allocator
*[[variant symlinks]]
*[[application checkpointing]] support.&lt;ref name=&quot;behind-dfbsd&quot; /&gt;
|}

== Future directions ==
=== Userland VFS with journaling ===
Userland VFS - the ability to migrate filesystem drivers into userspace, will take a lot of work to accomplish. Some of this work is already complete, though there is still much to do.&lt;ref name=&quot;kt-interview&quot; /&gt; The namecache code has been extracted from and made independent of the VFS code, and converting the VFS code to DragonFly's threaded messaging interface is Matt's next major focus. This will be more difficult than converting the device I/O and system calls was, due to the fact that the VFS system inherited from FreeBSD uses a massively [[Reentrant (subroutine)|reentrant]] model.&lt;ref name=&quot;dfbsd-design-goals&quot; /&gt;

The userland VFS system is a prerequisite of a number of desired features to be incorporated into DragonFly. Dillon envisions a new package management system based at least in part, on ''VFS environments'' which give the packages the environment they expect to be in, independent of the larger filesystem environment and its quirks.&lt;ref name=&quot;dfbsd-design-goals&quot; /&gt; In addition to system call message filtering, VFS environments are also to play a role in future security mechanisms, by restricting users or processes to their own isolated environments.&lt;ref name=&quot;osnews-interview-2004&quot; /&gt;&lt;ref name=&quot;hup-interview&quot; /&gt;

A new journaling layer is being developed for DragonFly for the purpose of transparently backing up entire filesystems in real-time, securely over a network.&lt;ref name=&quot;ml-journaling-topology&quot; /&gt;&lt;ref name=&quot;regarding-filesystems&quot; /&gt; What remains to be done is the ability to restore a filesystem to a previous state, as well as general stability enhancements.&lt;ref name=&quot;regarding-filesystems&quot; /&gt; This differs from traditional meta-data journaling filesystems in two ways:  (1) it will work with all supported filesystems, as it is implemented in the VFS layer instead of in the individual filesystem drivers, and (2) it will back up all of the data contained on a disk or partition, instead of just meta-data, allowing for the recovery of even the most damaged of installations.&lt;ref name=&quot;ml-journaling-topology&quot; /&gt;

While working on the journaling code, Dillon realized that the userland VFS he envisioned may be closer than he initially thought, though it is still some ways off.&lt;ref name=&quot;vfs-similar-tech&quot; /&gt;

=== SSI clustering ===
Ultimately, [[Matthew Dillon (computer scientist)|Dillon]] wants DragonFly to natively enable secure anonymous system [[Computer cluster|clustering]] over the [[Internet]],&lt;ref name=&quot;towards-free-clustering&quot; /&gt; and the light weight ports/messaging system will help to provide this capability.&lt;ref name=&quot;kt-interview&quot; /&gt;&lt;ref name=&quot;osnews-interview-2004&quot; /&gt; Security settings aside, there is technically no difference between messages created locally or on another computer over a network. Achieving this [[single-system image]]&lt;ref name=&quot;dfbsd-design-goals&quot; /&gt; capability transparently will be a big job, and will take quite some time to properly implement, even with the new foundation fully in place.&lt;ref name=&quot;unix-for-clusters&quot; /&gt; While some of the short term goals of the project will be completed in months, other features may take years to complete.&lt;ref name=&quot;behind-dfbsd&quot; /&gt;  SSI clustering will have applications in scientific computing.

== See also ==
{{Portal|Free software}}
* [[Comparison of BSD operating systems]]

== References ==

{{Reflist|30em|refs=

&lt;!-- References are sorted in displayed order. Please keep the sorting --&gt;

&lt;ref name=&quot;announcing-dfbsd&quot;&gt;{{cite mailing list
|url         = http://lists.freebsd.org/pipermail/freebsd-current/2003-July/006889.html
|title       = Announcing DragonFly BSD!
|first       = Matthew
|last        = Dillon
|authorlink  = Matthew Dillon (computer scientist)
|mailinglist = freebsd-current
|date        = 2003-07-16
|accessdate  = 2007-07-26
}}&lt;/ref&gt;

&lt;ref name=&quot;fbsd-smp&quot;&gt;{{citation
|url        = http://www.lemis.com/~grog/SMPng/USENIX/paper.pdf
|format     = pdf
|title      = Improving the FreeBSD SMP implementation
|first      = Greg
|last       = Lehey
|publisher  = [[USENIX]]
|year       = 2001
}}&lt;/ref&gt;

&lt;ref name=&quot;unix-for-clusters&quot;&gt;{{citation
|url        = http://www.informit.com/articles/article.aspx?p=766375
|title      = DragonFly BSD: UNIX for Clusters?
|first      = David
|last       = Chisnall
|work       = [[InformIT]]
|date       = 2007-06-15
|accessdate = 2011-11-22
}}&lt;/ref&gt;

&lt;ref name=&quot;df-released-for-users&quot;&gt;{{citation
|url        = http://www.internetnews.com/dev-news/article.php/3576426
|title      = New DragonFly Released For BSD Users
|first      = Sean Michael
|last       = Kerner
|work       = InternetNews
|date       = 2006-01-10
|accessdate = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;behind-dfbsd&quot;&gt;{{citation
|url        = http://www.onlamp.com/pub/a/bsd/2004/07/08/dragonfly_bsd_interview.html
|title      = Behind DragonFly BSD
|last       = Biancuzzi
|first      = Federico
|work       = [[O'Reilly Media]]
|date       = 2004-07-08
|accessdate = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;osnews-interview-2004&quot;&gt;{{citation
|url        = http://www.osnews.com/story.php?news_id=6338
|title      = Interview with Matthew Dillon of DragonFly BSD
|first      = Eugenia
|last       = Loli-Queru
|work       = [[OSNews]]
|date       = 2004-03-13
}}&lt;/ref&gt;

&lt;ref name=&quot;dfbsd-os-wp&quot;&gt;{{citation
|last       = Hsu
|first      = Jeffery M.
|url        = http://people.freebsd.org/~hsu/papers/dragonflybsd.asiabsdcon04.pdf
|format     = pdf
|title      = The DragonFly BSD Operating System
|accessdate = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;kt-interview&quot;&gt;{{citation
|url        = http://www.kerneltrap.org/node/14116
|title      = Interview: Matthew Dillon
|first      = Jeremy
|last       = Andrews
&lt;!-- |authorlink = Jeremy Andrews *** this redirected to kerneltrap; uncomment if now don't *** --&gt;
|work       = [[KernelTrap]]
|date       = 2007-08-06
|accessdate = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;osnews-mp-inproved&quot;&gt;{{citation
|url        = http://www.osnews.com/story/25334/DragonFly_BSD_MP_Performance_Significantly_Improved
|title      = DragonFly BSD MP Performance Significantly Improved
|work       = [[OSNews]]
|date       = 2011-11-16
|accessdate = 2011-11-19
}}&lt;/ref&gt;

&lt;ref name=&quot;dfbsd-design-goals&quot;&gt;{{citation
|title      = DragonFly Design Goals
|url        = http://www.dragonflybsd.org/goals/
|accessdate = 2011-11-19
}}&lt;/ref&gt;

&lt;ref name=&quot;luciani_dcbsdcon2009&quot;&gt;{{citation
|url         = http://www.dcbsdcon.org/speakers/slides/luciani_dcbsdcon2009.pdf
|format      = pdf
|title       = M:N threading in DragonflyBSD
|first       = Robert
|last        = Luciani
|publisher   = BSDCon
|date        = 2009-05-24
|archiveurl  = http://web.archive.org/web/20101223004617/http://www.dcbsdcon.org/speakers/slides/luciani_dcbsdcon2009.pdf
|archivedate = 2010-12-23
}}&lt;/ref&gt;

&lt;ref name=&quot;paying-off-already&quot;&gt;{{citation
|url        = http://www.shiningsilence.com/dbsdlog/2004/01/11/194.html
|title      = Paying off already
|first      = Justin
|last       = Sherrill
|date       = 2004-01-11
|accessdate = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;towards-free-clustering&quot;&gt;{{citation
|url        = http://lwn.net/Articles/384200/
|title      = DragonFly BSD 2.6: towards a free clustering operating system
|first      = Koen
|last       = Vervloesem
|work       = [[LWN.net]]
|date       = 2010-04-21
|accessdate = 2011-11-19
}}&lt;/ref&gt;

&lt;ref name=&quot;slab-allocator-fbsd&quot;&gt;{{citation
|url         = http://www.usenix.org/event/usenix01/bonwick.html
|title       = Magazines and Vmem: Extending the Slab Allocator to Many CPUs and Arbitrary Resources
|first1      = Jeff
|last1       = Bonwick
|authorlink1 = Jeff Bonwick
|first2      = Jonathan
|last2       = Adams
|year        = 2001
|publisher   = [[USENIX]]
|date        = 2002-01-03
|accessdate  = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;new-libc-malloc&quot;&gt;{{cite mailing list
|url         = http://leaf.dragonflybsd.org/mailarchive/kernel/2009-04/msg00021.html
|title       = New libc malloc committed
|first       = Matthew
|last        = Dillon
|authorlink  = Matthew Dillon (computer scientist)
|mailinglist = kernel
|date        = 2009-04-23
|accessdate  = 2011-08-08
}}&lt;/ref&gt;

&lt;ref name=&quot;10-years-of-pkgsrc&quot;&gt;{{citation
|url         = http://www.netbsd.org/gallery/10years.html
|title       = 10 years of pkgsrc
|first       = Mark
|last        = Weinem
|work        = [[NetBSD]]
|chapter     = Joerg Sonnenberger about pkgsrc on DragonFly BSD and his pkgsrc development projects.
|chapter-url = http://www.netbsd.org/gallery/10years.html#sonnenberger
|year        = 2007
|accessdate  = 2011-11-22
}}&lt;/ref&gt;

&lt;ref name=&quot;carp-first-patch&quot;&gt;{{cite mailing list
|url         = http://leaf.dragonflybsd.org/mailarchive/kernel/2007-03/msg00033.html
|title       = First Patch to get CARP on Dfly
|first       = Jonathan
|last        = Buschmann
|mailinglist = kernel
|date        = 2007-03-14
|accessdate  = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;man-carp&quot;&gt;{{citation
|url         = http://leaf.dragonflybsd.org/cgi/web-man?command=carp&amp;section=4
|title       = CARP(4) manual page
|work        = DragonFly On-Line Manual Pages
|accessdate  = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;hammer-design-document&quot;&gt;{{cite mailing list
|url         = http://leaf.dragonflybsd.org/mailarchive/kernel/2007-10/msg00008.html
|title       = Re: HAMMER filesystem update - design document
|first       = Matthew
|last        = Dillon
|authorlink  = Matthew Dillon (computer scientist)
|mailinglist = kernel
|date        = 2007-10-10
|accessdate  = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;can-hammer-compete&quot;&gt;{{citation
|url        = http://www.phoronix.com/scan.php?page=article&amp;item=dragonfly_hammer
|title      = Can DragonFlyBSD's HAMMER Compete With Btrfs, ZFS?
|first      = Michael
|last       = Larabel
|authorlink = Michael Larabel
|work       = Phoronix
|quote      = HAMMER does appear to be a very interesting BSD file-system. It is though not quite as fast as the ZFS file-system on BSD, but this is also an original file-system to the DragonFlyBSD project rather than being a port from OpenSolaris. Not only is HAMMER generally faster than the common UFS file-system, but it also has a much greater feature-set.
|date       = 2011-01-07
|accessdate = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;bsdtalk184&quot;&gt;{{cite audio
|url        = http://cisx1.uma.maine.edu/~wbackman/bsdtalk/bsdtalk184.ogg
|format     = [[vorbis|ogg]]
|medium     = Podcast
|series     = bsdtalk
|time       = &lt;!-- Needs to be listened again --&gt;
|title      = DragonFlyBSD with Matthew Dillon
|author     = Mr
|date       = 2010-01-07
|accessdate = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;dfbsd-diary&quot;&gt;{{citation
|url          = http://www.dragonflybsd.org/diary/
|title        = DragonFly BSD diary
|date         = 2006-01-07
|accessdate   = 2011-11-19
}}&lt;/ref&gt;

&lt;ref name=&quot;dfly-releases&quot;&gt;{{citation
|url        = http://www.dragonflybsd.org/releases/
|title      = DragonFly: Releases
|accessdate = 2011-11-22
}}&lt;/ref&gt;

&lt;ref name=&quot;cuts-the-cord&quot;&gt;{{citation
|url        = http://www.internetnews.com/dev-news/article.php/3622406
|title      = DragonFly BSD 1.6 Cuts the Cord
|first      = Sean Michael
|last       = Kerner
|work       = InternetNews
|date       = 2006-07-25
|accessdate = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;quick-review-dfbsd-14&quot;&gt;{{citation
|url        = http://www.osnews.com/story/13352/A_Quick_Review_of_DragonFly_BSD_1_4
|title      = A Quick Review of DragonFly BSD 1.4
|first      = Trent
|last       = Townsend
|work       = [[OSNews]]
|date       = 2006-01-18
|accessdate = 2011-11-16
}}&lt;/ref&gt;

&lt;!-- Ref from hidden section
&lt;ref name=&quot;bf-sched-dfbsd&quot;&gt;{{citation
|url        = http://leaf.dragonflybsd.org/~brillsp/bfq_doc/bfq.html
|title      = The Budget Fair Queueing Disk Scheduler for DragonFlyBSD
|first      = Brills
|last       = Peng
|accessdate = 2011-11-19
}}&lt;/ref&gt;
--&gt;

&lt;ref name=&quot;hup-interview&quot;&gt;{{citation
|url        = http://hup.hu/node/4512
|title      = InterjÃº Matthew Dillionnal a DragonFly BSD alapÃ­tÃ³jÃ¡val
|date       = 2003-10-10
|accessdate = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;ml-journaling-topology&quot;&gt;{{cite mailing list
|url         = http://leaf.dragonflybsd.org/mailarchive/kernel/2004-12/msg00105.html
|title       = Description of the Journaling topology
|first       = Matthew
|last        = Dillon
|authorlink  = Matthew Dillon (computer scientist)
|mailinglist = kernel
|date        = 2004-12-28
|accessdate  = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;regarding-filesystems&quot;&gt;{{cite mailing list
|url         = http://leaf.dragonflybsd.org/mailarchive/kernel/2008-07/msg00145.html
|title       = Re: Regarding Filesystems
|first       = Matthew
|last        = Dillon
|authorlink  = Matthew Dillon (computer scientist)
|mailinglist = kernel
|date        = 2008-07-28
|accessdate  = 2011-11-20
}}&lt;/ref&gt;

&lt;ref name=&quot;vfs-similar-tech&quot;&gt;{{cite mailing list
|url         = http://leaf.dragonflybsd.org/mailarchive/kernel/2005-07/msg00045.html
|title       = Re: VFS journaling... similar technology
|first       = Matthew
|last        = Dillon
|authorlink  = Matthew Dillon (computer scientist)
|mailinglist = kernel
|date        = 2005-07-15
|accessdate  = 2011-11-20
}}&lt;/ref&gt;

}}

{{unix-like}}
{{AmigaOS}}

{{DEFAULTSORT:Dragonfly Bsd}}
[[Category:Free software operating systems]]
[[Category:DragonFly BSD]]
[[Category:Software forks]]

[[be:DragonflyBSD]]
[[be-x-old:DragonFlyBSD]]
[[bs:DragonFly BSD]]
[[ca:DragonFly BSD]]
[[cs:DragonFly BSD]]
[[de:DragonFly BSD]]
[[es:DragonFly BSD]]
[[eu:DragonFly BSD]]
[[fr:DragonFly BSD]]
[[gl:DragonFly BSD]]
[[ko:DragonFly BSD]]
[[it:DragonFly BSD]]
[[lt:DragonFly BSD]]
[[nl:DragonFly BSD]]
[[ja:DragonFly BSD]]
[[pl:DragonFly BSD]]
[[pt:DragonFly BSD]]
[[ro:DragonFly BSD]]
[[ru:DragonFly BSD]]
[[sh:DragonFly BSD]]
[[sv:DragonFly BSD]]
[[uk:DragonFly BSD]]
[[zh:DragonFly BSD]]</rev></revisions></page></pages></query></api>
