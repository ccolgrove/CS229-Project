<?xml version="1.0"?><api><query><pages><page pageid="8741" ns="0" title="Dylan (programming language)"><revisions><rev xml:space="preserve">{{Infobox programming language
| name                   = Dylan
| logo                   = [[File:Dylan logo.png]]
| paradigm               = [[Multi-paradigm programming language|multi-paradigm]]: [[Functional programming|functional]], [[Object-oriented programming|object-oriented]]
| year                   = Early 1990s
| designer               =
| developer              = [[Apple Computer]]
| latest_release_version =
| latest_release_date    =
| typing                 = Strong, dynamic
| implementations        = Open Dylan, Gwydion Dylan
| dialects               = 
| influenced_by          = [[Common Lisp Object System|CLOS]], [[ALGOL]], [[Scheme (programming language)|Scheme]], [[EuLisp]]
| influenced             = [[Ruby (programming language)|Ruby]], [[Goo (programming language)|Goo]]
| operating_system       = [[Cross-platform]]
| website                = http://www.opendylan.org
}}

'''Dylan''' ({{IPAc-en|icon|Ë|d|Éª|l|Én}}) is a multi-paradigm [[programming language]] that includes support for [[Functional programming|functional]] and [[Object-oriented programming|object-oriented]] programming, and is [[dynamic programming language|dynamic]] and [[Reflection (computer science)|reflective]] while providing a programming model designed to support efficient machine code generation, including fine-grained control over dynamic and static behaviors. It was created in the early 1990s by a group led by [[Apple Computer]].

Dylan derives from [[Scheme (programming language)|Scheme]] and [[Common Lisp]] and adds an integrated object system derived from the [[Common Lisp Object System]] (CLOS). In Dylan, all values (including numbers, characters, functions, and classes) are [[First-class object|first-class objects]]. Dylan supports multiple inheritance, polymorphism, multiple dispatch, keyword arguments, object introspection, pattern-based syntax extension macros, and many other advanced features. Programs can express fine-grained control over dynamism, admitting programs that occupy a continuum between dynamic and static programming and supporting evolutionary development (allowing for rapid prototyping followed by incremental refinement and optimization).

Dylan's main design goal is to be a dynamic language well-suited for developing commercial software. Dylan attempts to address potential performance issues by introducing &quot;natural&quot; limits to the full flexibility of Lisp systems, allowing the compiler to clearly understand compilable units (i.e., libraries).

Although deriving much of its semantics from Scheme and other Lispsâsome implementations were in fact initially built within existing Lisp systemsâDylan has an [[ALGOL]]-like syntax rather than a Scheme-like prefix syntax.

==History==
{{main|History of the Dylan programming language}}

Dylan was created in the early 1990s by a group led by [[Apple Computer]]. At one point in its development it was intended for use with Apple's [[Apple Newton|Newton]] computer, but the Dylan implementation did not reach sufficient maturity in time, and Newton instead used a combination of C and the [[NewtonScript programming language|NewtonScript]] developed by Walter Smith. Apple ended their Dylan development effort in 1995, though they made a &quot;technology release&quot; version available (&quot;Apple Dylan TR1&quot;) that included an advanced [[Integrated development environment|IDE]].

Two other groups contributed to the design of the language and developed implementations: [[Harlequin (software company)|Harlequin]] released a commercial IDE for [[Microsoft Windows]] and [[Carnegie Mellon University]] released an [[open source]] compiler for [[Unix]] systems. Both of these implementations are now open source and maintained by a group of volunteers, the [http://www.gwydiondylan.org Gwydion Maintainers].

The Dylan language was code-named Ralph. James Joaquin chose the name Dylan for &quot;DYnamic LANguage.&quot;

==Syntax==
Initially, Dylan used a Scheme-like prefix syntax, which is based on [[s-expressions]]:

&lt;code&gt;
 (bind ((radius 5)
        (circumference (* 2 $pi radius)))
   (if (&gt; circumference 42)
       (format-out &quot;Hello big circle! c is %=&quot; circumference)
       (format-out &quot;Hello circle! c is %=&quot; circumference)))
&lt;/code&gt;

By the time the language design was completed, it was changed to an Algol-like syntax, designed by [[Michael Kahl]], with the expectation that it would be more familiar to a wider audience of programmers:

&lt;code&gt;
  let radius = 5;
  let circumference = 2 * $pi * radius;
  if (circumference &gt; 42)
     format-out(&quot;Hello, big circle! c is %=&quot;, circumference);
  else
     format-out(&quot;Hello, circle! c is %=&quot;, circumference);
  end if
&lt;/code&gt;

Similar to other functional programming languages, the result of a function is the value of the last expression evaluatedâthere is no explicit âreturnâ statement. The following function returns the value of the âifâ statement (statements, too, produce results), which evaluates to the value of either â1â or ân * factorial(n - 1)â:

&lt;code&gt;
 define method factorial(n :: &lt;integer&gt;)
   if (n = 0)
     1
   else
     n * factorial(n - 1)
   end
 end method;
&lt;/code&gt;

==Modules vs. namespace==
In many object-oriented languages, classes are the primary means of encapsulation and modularization; each class defines a namespace and controls how and which definitions are externally visible. In addition, classes in many languages define an indivisible unit that must be used as a wholeâif you want to use a String concatenation function, you must import and compile against all of String.

Some languages also include a separate, explicit namespace or module system that performs encapsulation in a more general way. Dylan is such a language. 

In Dylan, the concepts of compile-unit and import-unit are separated, and classes have nothing specifically to do with either. A ''library'' defines items that should be compiled and handled together, while a ''module'' defines the namespace. Classes can be placed together in modules, or cut across them, as the programmer wishes. Often the complete definition for a class does not exist in a single module, but is spread across several that are optionally collected together. Different programs can have different definitions of the same class, including only what they need.

For example, consider an add-on library for [[regex]] support on String. In some languages, in order for the functionality to be included in strings, the functionality has to be added to the String namespace itself. As soon as you do this, the String class becomes larger, and people who don't need to use regex still have to &quot;pay&quot; for it in increased library size. For this reason these sorts of add-ons are typically placed in their own namespaces and objects. The downside to this approach is that the new functionality is no longer a ''part of'' string; instead, it is isolated in its own set of functions that have to be called separately. Instead of &lt;code&gt;myString.parseWith(myPattern)&lt;/code&gt;, which would be the natural organization from an OO point of view, you use something like &lt;code&gt;myPattern.parseString(myString)&lt;/code&gt;, which effectively reverses the ordering.

In addition, under Dylan many interfaces can be defined for the same code, for instance the String concatenation method could be placed in both the String interface, and the &quot;concat&quot; interface which collects together all of the different concatenation functions from various classes. This is more commonly used in math libraries, where functions tend to be applicable to widely differing object types.

A more practical use of the interface construct is to build public and private versions of a module, something that other languages include as a &quot;bolt on&quot; feature that invariably causes problems and adds syntax. Under Dylan the programmer can simply place every function call in the &quot;Private&quot; or &quot;Development&quot; interface, and collect up publicly accessible functions in &quot;Public&quot;. Under [[Java (programming language)|Java]] or [[C++]] the visibility of an object is defined in the code itself, meaning that to support a similar change the programmer would be forced to re-write the definitions completely, and could not have two versions at the same time.

==Classes==
Classes in Dylan describe &quot;slots&quot; (data members, fields, ivars, etc.) of objects in a fashion similar to most OO languages. All access to slots are via methods, as in [[Common Lisp Object System|CLOS]] and [[Smalltalk]]. Default getter and setter methods are automatically generated based on the slot names.  In contrast with most other OO languages, other methods applicable to the class are often  defined outside of the class, and thus class definitions in Dylan typically include the definition of the storage only. For instance:

&lt;code&gt;
  define class &lt;window&gt; (&lt;view&gt;)
    slot title :: &lt;string&gt; = &quot;untitled&quot;, init-keyword: title:;
    slot position :: &lt;point&gt;, required-init-keyword: position:;
  end class;
&lt;/code&gt;

In this example the class &quot;&lt;code&gt;&amp;lt;window&amp;gt;&lt;/code&gt;&quot; is defined. The &amp;lt;class name&amp;gt; syntax is convention only, to make the class names stand outâthe angle brackets are merely part of the class name. In comparison, in some languages the convention is to capitalize the first letter of the class name or to prefix the name with a &quot;C&quot; or &quot;T&quot; (for example). &lt;code&gt;&amp;lt;window&amp;gt;&lt;/code&gt; inherits from a single class, &lt;code&gt;&amp;lt;view&amp;gt;&lt;/code&gt;, and contains two slots, &lt;code&gt;title&lt;/code&gt; holding a string for the window title, and &lt;code&gt;position&lt;/code&gt; holding an X-Y point for a corner of the window. In this particular example the title has been given a default value, while the position has not. The optional &quot;init-keyword&quot; syntax allows the programmer to specify the initial value of the slot when instantiating an object of the class. 

In languages such as C++ or Java, the class would also define its interface. In this case the definition above has no explicit instructions, so in both languages access to the slots and methods is considered &lt;code&gt;protected&lt;/code&gt;, meaning they can be used only by subclasses. In order to allow unrelated code to use the window instances, they would have to be declared &lt;code&gt;public&lt;/code&gt;.

In Dylan these sorts of visibility rules are not considered part of the code itself, but of the module/interface system. This adds considerable flexibility. For instance, one interface used during early development could declare everything public, whereas one used in testing and deployment could limit this. With C++ or Java these changes would require changes to the source code itself, so people won't do it, whereas in Dylan this is a completely unrelated concept.

Although this example does not use it, Dylan also supports [[multiple inheritance]].

==Methods and generic functions==
In Dylan, methods are not intrinsically associated with any particular class; methods can be thought of as existing outside of classes. Like CLOS, Dylan is based on [[multimethods]], where the specific method to be called is chosen based upon the types of all its arguments. The method does not have to be known at compile time, the understanding being that the required functionality may be available or may not, based on the user's preferences.

Under Java the same methods would be isolated in a particular class. In order to use that functionality the programmer is forced to ''import'' that class and refer to it explicitly in order to call the method. If that class is not available, or unknown at compile time, the application simply won't compile.

In Dylan, code is isolated from storage in ''functions''. Many classes have methods that call their own functions, thereby looking and feeling like most other OO languages. However code may also be located in ''generic functions'', meaning they are not attached to a particular class, and can be called natively by anyone. Linking a particular generic function to a method in a class is accomplished this way:

&lt;code&gt;
  define method turn-blue (w :: &lt;window&gt;)
    w.color := $blue;
  end method;
&lt;/code&gt;

This definition is similar to those in other languages, and would likely be encapsulated within the &lt;code&gt;&amp;lt;window&amp;gt;&lt;/code&gt; class. Note the := setter call, which is [[syntactic sugar]] for &lt;code&gt;color-setter($blue, w)&lt;/code&gt;.

The utility of generic methods comes into its own when you consider more &quot;generic&quot; examples. For instance, one common function in most languages is the &lt;code&gt;to-string&lt;/code&gt;, which returns some [[human-readable]] form for the object. For instance, a window might return its title and its position in parens, while a string would return itself. In Dylan these methods could all be collected into a single module called &quot;&lt;code&gt;to-string&lt;/code&gt;&quot;, thereby removing this code from the definition of the class itself. If a particular object did not support a &lt;code&gt;to-string&lt;/code&gt;, it could be easily added in the &lt;code&gt;to-string&lt;/code&gt; module.

==Extensibility==
This whole concept might strike some readers as very odd. The code to handle &lt;code&gt;to-string&lt;/code&gt; for a window isn't defined in &lt;code&gt;&amp;lt;window&amp;gt;&lt;/code&gt;? This might not make any sense until you consider how Dylan handles the call of the &lt;code&gt;to-string&lt;/code&gt;. In most languages when the program is compiled the &lt;code&gt;to-string&lt;/code&gt; for &lt;code&gt;&amp;lt;window&amp;gt;&lt;/code&gt; is looked up and replaced with a pointer (more or less) to the method. In Dylan this occurs when the program is first run; the [[Run time system|runtime]] builds a table of method-name/parameters details and looks up methods dynamically via this table. That means that a function for a particular method can be located anywhere, not just in the compile-time unit. In the end the programmer is given considerable flexibility in terms of where to place their code, collecting it along class lines where appropriate, and functional lines where it's not.

The implication here is that a programmer can add functionality to existing classes by defining functions in a separate file. For instance, you might wish to add spell checking to all &lt;code&gt;&amp;lt;string&amp;gt;&lt;/code&gt;s, which in most languages would require access to the source code of the string class&amp;mdash;and such basic classes are rarely given out in source form. In Dylan (and other &quot;extensible languages&quot;) the spell checking method could be added in the &lt;code&gt;spell-check&lt;/code&gt; module, defining all of the classes on which it can be applied via the &lt;code&gt;define method&lt;/code&gt; construct. In this case the actual functionality might be defined in a single generic function, which takes a string and returns the errors. When the &lt;code&gt;spell-check&lt;/code&gt; module is compiled into your program, all strings (and other objects) will get the added functionality.

This still might not sound all that obvious, but in fact it is a common problem faced by almost all OO languages; not everything fits into a class construct, many problems apply to ''all'' objects in the system and there's no natural way to handle this.

==Apple Dylan==
{{main|Apple Dylan}}
Apple Dylan is the implementation of Dylan produced by [[Apple Computer]]. It was originally developed for the [[Apple Newton]]Â product.

==See also==
*[[Dylan Server Pages]]
*[[Koala (web server)]]

==External links==
*[http://www.opendylan.org/books/drm/ The Dylan Reference Manual] - The core language and library definition
*[http://www.opendylan.org/gdref/tutorial/ Getting Started with Dylan]
*[http://www.opendylan.org/ Gwydion Dylan] - Host of two open source, optimizing Dylan compilers targeting Unix/Linux, Mac OS X, and Microsoft Windows
*[http://www.cis.ufl.edu/~jnw/Marlais/ The Marlais Dylan Interpreter] - An implementation of a subset of Dylan, suitable for bootstrapping a compiler
*[http://www.double.co.nz/dylan/ Dylan Programming Language] - A general information website
*[http://wiki.opendylan.org/ Dylan Language Wiki]
*{{dmoz|Computers/Programming/Languages/Dylan/|Dylan}}
*[http://www.cs.indiana.edu/~jsobel/forschemers.html A Dylan Primer for Scheme Programmers]

[[Category:Dylan programming language| ]]
[[Category:Cross-platform software]]
[[Category:Programming languages created in the 1990s]]
[[Category:Lisp programming language family]]

[[ar:Ø¯ÙÙØ§Ù]]
[[de:Dylan (Programmiersprache)]]
[[es:Dylan (lenguaje de programaciÃ³n)]]
[[fr:Dylan (langage)]]
[[gl:Dylan]]
[[it:Dylan (linguaggio)]]
[[ms:Dylan (bahasa pengaturcaraan)]]
[[ja:Dylan]]
[[pt:Dylan (linguagem de programaÃ§Ã£o)]]
[[ru:Dylan (ÑÐ·ÑÐº Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ)]]</rev></revisions></page></pages></query></api>
