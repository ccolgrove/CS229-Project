<?xml version="1.0"?><api><query><redirects><r from="Software Management System" to="Package management system" /></redirects><pages><page pageid="47017" ns="0" title="Package management system"><revisions><rev xml:space="preserve">{{Merge from|Application Packaging|date=November 2011|discuss=Talk:Package management system#Merger proposal with Application Packaging}}
In [[software]], a '''package management system''', also called '''package manager''', is a collection of software tools to automate the process of installing, upgrading, configuring, and removing [[Software package (installation)|software packages]] for a [[computer]]'s operating system in a consistent manner. It typically maintains a database of software dependencies and version information to prevent software mismatches and missing prerequisites.

Packages are distributions of software, applications and data. Packages also contain [[metadata]], such as the software's name, description of its purpose, version number, vendor, [[checksum]], and a list of [[Coupling (computer science)|dependencies]] necessary for the software to run properly.  Upon installation, metadata is stored in a local package database.

Operating systems based on [[Linux]] and other [[Unix-like]] systems typically consist of hundreds or even thousands of distinct software packages; in the former case, a package management system is a convenience, in the latter case it becomes essential.

[[Image:Synaptic Package Manager.png|thumb|350px|[[Synaptic Package Manager|Synaptic]], one of the most widely used graphical frontends for package management in [[Linux]]]]

==Impact==
[[Ian Murdock]] has commented that package management is &quot;the single biggest advancement [[Linux]] has brought to the industry&quot;, that it blurs the boundaries between operating system and applications, and that it makes it &quot;easier to push new innovations [...] into the marketplace and [...] evolve the OS&quot;.&lt;ref&gt;{{Cite web|title=How package management changed everything|url=http://ianmurdock.com/2007/07/21/how-package-management-changed-everything/|publisher=ianmurdock.com|accessdate=2008-03-01}}&lt;/ref&gt;

==Terminology==
A package management system is often called an &quot;install manager&quot;.   This can
lead to confusion between a package management system and an [[installer]].  The differences include:
{{PMS vs Installer}}

A package, for package managers, denotes a specific set of files bundled with the appropriate metadata
for use by a package manager.  This can be confusing, as some [[programming language]]s often use the word &quot;[[Java package|package]]&quot; as a specific form of [[software library]].   Furthermore, that software library can be distributed in a package of files bundled for a package manager.

==Functions==
[[Image:Pms.svg|thumb|300px|Illustration of a package management system being used to [[download]] new software. A typical manual action requested is [[Soft reboot|restarting]] the computer.]]
Package management systems are charged with the task of organizing all of the packages installed on a system.  Typical functions of a package management system include:

*Verifying file checksums to ensure correct and complete packages.
*Verifying digital signatures to authenticate the origin of packages.
*Applying file archivers to manage encapsulated files.
*Upgrading software with latest versions, typically from a [[software repository]].
*Grouping of packages by function to reduce user confusion.
*Managing dependencies to ensure a package is installed with all packages it requires.

Some additional challenges are met by only a few package management systems.

===Challenges with shared libraries===
Computer systems which rely on [[dynamic library]] linking, instead of [[static library]] linking, share executable libraries of machine instructions across packages and applications.  In these systems, complex relationships between different packages requiring different versions of libraries results in a challenge colloquially known as &quot;[[dependency hell]]&quot;.  On [[Microsoft Windows]] systems, this is also called &quot;[[DLL hell]]&quot; when working with dynamically linked libraries.  Good package management systems become vital on these systems.&lt;ref name=&quot;sharedlibrary&quot;&gt;{{Cite journal| last = Chris | first = Tucker | title = Optimal Package Install/Uninstall Manager
 | publisher = UC San Diego | date = 2007â03â15| page=1 | url = http://cseweb.ucsd.edu/~lerner/papers/opium.pdf | accessdate = 2011â09â14}}&lt;/ref&gt;

===Front-ends for locally compiled packages===
[[System administrator]]s may install and maintain software using tools other than package management software.  For example, a local administrator may [[download]] unpackaged source code, compile it, and install it.  This may cause the state of the local system to fall out of [[Synchronization (computer science)|synchronization]] with the state of the package manager's [[database]]. The local administrator will be required to take additional measures, such as manually managing some dependencies or integrating the changes into the package manager.

There are tools available to ensure that locally compiled packages are integrated with the package management. For distributions based on .deb and .rpm files as well as Slackware Linux, there is [[CheckInstall]], and for recipe-based systems such as [[Gentoo Linux]] and hybrid systems such as [[Arch Linux]], it is possible to write a recipe first, which then ensures that the package fits into the local package database.{{Citation needed|date=July 2007}}

===Maintenance of configuration===
Particularly troublesome with software [[upgrade]]s are upgrades of configuration files. Since package management systems, at least on Unix systems, originated as extensions of [[file archiver|file archiving utilities]], they can usually only either overwrite or retain configuration files, rather than applying rules to them. There are exceptions to this that usually apply to kernel configuration (which, if broken, will render the computer unusable after a restart). Problems can be caused if the format of configuration files changes. For instance, if the old configuration file does not explicitly disable new options that should be disabled. Some package management systems, such as [[Debian]]'s [[dpkg]], allow configuration during installation. In other situations, it is desirable to install packages with the default configuration and then overwrite this configuration, for instance, in [[Headless system|headless]] installations to a large number of computers. (This kind of pre-configured installation is also supported by [[dpkg]].)

===Repositories===
In order to give users more control over the kinds of software that they are allowing to be installed on their system (and sometimes due to legal or convenience reasons on the distributors' side), software is often downloaded from a number of [[software repository|software repositories]].&lt;ref&gt;{{Cite web| title=Linux repository classification schemes | url=http://braintickle.blogspot.com/2006/01/linux-repository-classification.html|publisher=braintickle.blogspot.com | accessdate=2008-03-01}}&lt;/ref&gt;

===Upgrade suppression===
When a user interacts with the package management software to bring about an upgrade, it is customary to present the user with the list of things to be done (usually the list of packages to be upgraded, and possibly giving the old and new version numbers), and allow the user to either accept the upgrade in bulk, or select individual packages for upgrades. Many package management systems can be configured to never upgrade certain packages, or to upgrade them only when critical vulnerabilities or instabilities are found in the previous version, as defined by the packager of the software. This process is sometimes called ''version pinning''.

For instance:
* [[Yellow dog Updater, Modified|yum]] supports this with the syntax ''exclude=openoffice*'',&lt;ref&gt;{{Cite web|title=CentOS yum pinning rpms|url=http://lists.centos.org/pipermail/centos/2005-May/046320.html|publisher=centos.org|accessdate=2008-03-01 |archiveurl = http://web.archive.org/web/20071102203232/http://lists.centos.org/pipermail/centos/2005-May/046320.html &lt;!-- Bot retrieved archive --&gt; |archivedate = 2007-11-02}}&lt;/ref&gt; 
* pacman with ''IgnorePkg = openoffice''&lt;ref name=pacman /&gt; (to suppress upgrading openoffice in both cases)
* [[dpkg]] and [[dselect]] support this partially through the ''hold'' flag in package selections
* [[Advanced Packaging Tool|APT]] extends the ''hold'' flag through the complex &quot;pinning&quot; mechanism&lt;ref&gt;{{Cite web|title=How to keep specific versions of packages installed (complex)|url=http://www.debian.org/doc/manuals/apt-howto/ch-apt-get.en.html#s-pin|publisher=debian.org|accessdate=2008-03-01}}&lt;/ref&gt;
** Users can also blacklist a package&lt;ref&gt;{{Cite web| title=Apt pinning to blacklist a package|url=http://linux.derkeiler.com/Mailing-Lists/Debian/2009-07/msg00476.html|accessdate=2010-08-19}}&lt;/ref&gt;
* [[Aptitude (program)|aptitude]] has &quot;hold&quot; and &quot;forbid&quot; flags
* [[Portage (software)|portage]] supports this through the package.mask configuration file
* DotPet from .PET packages in [[Puppy Linux]], but is efficient in console and lightweight

===Cascading package removal===
Some of the more advanced package management features offer &quot;cascading package removal&quot;,&lt;ref name=pacman&gt;{{Cite web|title=pacman(8) Manual Page|url=http://www.archlinux.org/pacman/pacman.8.html|publisher=archlinux.org|accessdate=2008-03-01}}&lt;/ref&gt; in which all packages that depend on the target package and all packages that only the target package depends on, are also removed.

==Common package management systems and formats==
===Package formats===
{{Main|Linux package formats| file archive}}
Each package manager relies on the format and metadata of the packages it can manage.  That is, package managers need groups of files to be bundled for the specific package manager along with appropriate metadata, such as dependencies.  Often, a core set of utilities manages the basic installation from these packages and multiple package managers use these utilities to provide additional functionality.

For example, [[Yellow dog Updater, Modified|yum]] relies on [[RPM Package Manager|rpm]] as a backend.  Yum extends the functionality of the backend by adding features such as simple configuration for maintaining a network of systems.  As another example, the [[Synaptic Package Manager]] provides a graphical user interface by using the [[Advanced Packaging Tool|Advanced Packaging Tool (apt)]] library, which, in turn, relies on [[dpkg]] for core functionality.

[[Alien (software)|Alien]] is a program that converts between different [[Linux package formats]]. It supports conversion between [[Linux Standard Base]] conform [[RPM Package Manager|RPM]], [[deb (file format)|deb]], Stampede (.slp) and [[Slackware]] ([[tgz]]) packages.

===Free and open source software systems===
By the nature of [[free and open source software]], packages under similar and compatible licenses are available for use on a number of operating systems.  These packages can be combined and distributed using configurable and internally complex packaging systems to handle many permutations of software and manage version-specific dependencies and conflicts.  Some packaging systems of free and open source software are also themselves released as free and open source software. One typical difference between package management in proprietary operating systems, such as Mac OS X and Windows, and those in free and open source software, such as Linux, is that free and open source software systems permit third-party packages to also be installed and upgraded through the same mechanism, whereas the package management systems of Mac OS X and Windows will only upgrade software provided by Apple and Microsoft, respectively (with the exception of some third party drivers in Windows). The ability to continuously upgrade third party software is typically added by adding the [[Uniform Resource Locator|URL]] of the corresponding repository to the package management's configuration file.

===Application-level package managers===
{{Main|List of software package management systems#Application-level package managers|l1=Application-level package managers}}
Besides the systems-level application managers, there are some add-on package managers for operating systems with limited capabilities and for programming languages where developers need the latest libraries.

In contrast to systems-level application managers, application-level package managers focus on a small part of the software system. They typically reside within a directory tree that is not maintained by the systems-level package manager (like c:\cygwin or /usr/local/fink). However, this is not the case for the package managers that deal with programming libraries. This leads to a conflict as both package managers claim to &quot;own&quot; a file and might break upgrades.

== See also ==
* [[List of software package management systems]]

{{Portal|Free software}}

==References==
{{Reflist}}

==External links==
* [http://distrowatch.com/dwres.php?resource=package-management Distrowatch Comparison of Package Management Systems]

{{DEFAULTSORT:Package Management System}}
[[Category:Package management systems| ]]
[[Category:Software distribution]]

[[ar:ÙØ¸Ø§Ù Ø¥Ø¯Ø§Ø±Ø© Ø§ÙØ­Ø²Ù]]
[[cs:BalÃ­ÄkovacÃ­ systÃ©m]]
[[de:Paketverwaltung]]
[[es:Sistema de gestiÃ³n de paquetes]]
[[fr:Gestionnaire de paquets]]
[[id:Package manager]]
[[it:Sistema di gestione dei pacchetti]]
[[ja:ããã±ã¼ã¸ç®¡çã·ã¹ãã ]]
[[no:Pakkesystem]]
[[pl:System zarzÄdzania pakietami]]
[[ru:Ð¡Ð¸ÑÑÐµÐ¼Ð° ÑÐ¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ñ Ð¿Ð°ÐºÐµÑÐ°Ð¼Ð¸]]
[[simple:Package management system]]
[[fi:PaketinhallintajÃ¤rjestelmÃ¤]]
[[sv:Pakethanterare]]
[[zh:è½¯ä»¶åç®¡çç³»ç»]]</rev></revisions></page></pages></query></api>
