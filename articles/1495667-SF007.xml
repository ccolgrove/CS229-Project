<?xml version="1.0"?><api><query><pages><page pageid="1495667" ns="0" title="Homebrew (video games)"><revisions><rev xml:space="preserve">{{Refimprove|date=April 2009}}
{{Original research|date=April 2010}}
[[File:Blueduck.png|thumb|right|200px|Screenshot of the [[Atari 2600 homebrew]] ''[[Duck Attack!]]'' (2010)]]
'''Homebrew''' is a term frequently applied to [[video game]]s or other software produced by consumers to target [[proprietary hardware]] platforms not typically user-programmable or that use proprietary storage methods. This can include games developed with official development kits, such as [[Net Yaroze]], [[Linux for PlayStation 2]] or [[Microsoft XNA]].&lt;ref name=&quot;31Homebrews&quot;&gt;{{cite web
 | url = http://www.1up.com/features/31-homebrew-games-worth-playing
 | title = 31 Homebrew Games Worth Playing
 | first = Ryan
 | last = Winterhalter
 | work = [[1UP.com]]
 | date = April 29, 2011
 | accessdate = May 10, 2011 }}&lt;/ref&gt;

Many homebrew games are offered as [[freeware]], although others are offered for sale, and some can be quite costly.&lt;ref name=&quot;31Homebrews&quot; /&gt; One popular type of homebrew game is the [[fangame]]. In [[Japan]], these games are usually called &quot;[[DÅjin soft]]&quot;.

==Development==
Homebrew games for older systems are typically developed using [[emulator]]s for convenience, since testing them requires no extra hardware on the part of the programmer. Development for newer systems typically involves actual hardware given the lack of accurate [[Console emulator|emulator]]s. Efforts have been made to use actual console hardware for many older systems, though. [[Atari 2600]] homebrew developers use various methods, for example, burning an [[EEPROM]] to plug into a custom [[ROM cartridge|cartridge]] board or audio transfer via the [[Starpath Supercharger]]. [[Game Boy Advance]] homebrew developers have several ways to use [[Game Boy Advance flash cartridge|GBA flash cartridge]]s in this regard.

Along with the [[Dreamcast]], Game Boy Advance, and [[PlayStation Portable]], the most frequently used platforms for homebrew development are older generations of consoles, among them the Atari 2600 and [[Nintendo Entertainment System]] (NES). The Atari 2600 and NES are particularly interesting because they use the [[MOS Technology 6502|6502]] instruction set, likely familiar to people who have programmed 8-bit home computers, such as the [[Commodore 64]] or [[Apple II series|Apple II]]. Another factor in the popularity of older or portable systems for homebrew development, relative to modern consoles, is that their simplicity enables an individual or small group to develop acceptable games in a reasonable time frame.

All major [[History of video game consoles (sixth generation)|sixth generation consoles]] enjoy some popularity with homebrew developers, but less so than earlier generations. This is mostly the case because software production requires more resources, accurate emulators do not exist yet, and the consoles themselves often employ rather complex systems to prevent the execution of unauthorized code. Homebrew developers must often exploit [[loopholes]] to enable their software to run.

Homebrewing is not only limited to games - there are numerous [[Demo (computer programming)|demos]] that have been released for most systems with a homebrew scene.

==First- through fourth-generation consoles==
===Magnavox Odyssey===

In 2009 the release of &quot;Odball&quot; ended the longest game drought on any console. The [[Magnavox Odyssey]], the world's first home console, saw no new releases since 1973.[http://www.revrob.com/sci-a-tech-topmenu-52/129-odball-for-magnavox-odyssey-official-page-]

===Fairchild Channel F===

A handful of homebrew games have been programmed for the Channel F, the world's first programmable game console. The first known release is Sean Riddle's Lights Out that was released with instructions on how to modify the SABA#20 Chess game into a Multi-Cartridge. [http://seanriddle.com/chanf.html] There is also a version of Tetris and in 2008 &quot;Videocart 27: Pac-Man&quot; became the first full production homebrew for the Channel F.

===Atari 2600===
{{Main|Atari 2600 homebrew}}
The [[Atari 2600]], released in 1977, is a popular platform for homebrew projects. Games created for the Atari can be executed using either an [[Console emulator|emulator]] or directly when copied onto a blank [[ROM cartridge|cartridge]] making use of either a [[Programmable read-only memory|PROM]] or [[EPROM]] [[Integrated circuit|chip]]. Unlike later systems, the console does not require a [[modchip]].

Although there is one high-level [[compiler]] available, [[Atari 2600 homebrew#batari Basic|batari Basic]], most development for the Atari 2600 is still done in [[MOS Technology 6502|6502]] [[assembly language]]. Homebrews written in assembly are typically considered programming challenges.

The Atari 2600 lacks video memory, and programs run simultaneously with the television screen, updating graphical [[Hardware register|register]]s a fraction of a second before the television draws each [[scan line]]. For each scan line, the system's [[Television Interface Adapter]] can only draw two custom, eight-bit [[Sprite (computer graphics)|graphical object]]s, a twenty-bit &quot;playfield&quot;, and three solid [[pixel]]s: two &quot;missiles&quot; and one &quot;ball&quot;.&lt;ref&gt;{{cite web|url=http://www.atariage.com/2600/programming|title=AtariAge - Atari 2600 Programming|publisher=AtariAge.com|accessdate=December 27, 2007}}&lt;/ref&gt; Timing is critical in this environment. If a program takes too long to update the registers, the television will update the screen before the graphics are properly initialized, resulting in glitches or other video problems. In this respect, Atari 2600 programming could be considered a form of [[Real-time computing|hard real-time computing]].

===Nintendo Entertainment System (NES)===
Several compilers are available for the [[Nintendo Entertainment System]], but like the Atari 2600, most development directly applies assembly language. One impediment to NES homebrew development is the relative difficulty involved with producing physical cartridges, although third party flash carts do exist, making homebrew possible on original NES hardware.&lt;ref&gt;http://www.retrousb.com/product_info.php?cPath=24&amp;products_id=34&lt;/ref&gt; Several varieties of custom [[integrated circuit]]s are used within NES cartridges to expand system capabilities; most are difficult to replicate except by scavenging old cartridges. The [[10NES|hardware lockout mechanism]] of the NES further complicates construction of usable physical cartridges. However, the [[NES-101]] removed the 10NES lockout chip so any game, whether homebrew, unlicensed, or another region of an official game, can be played.{{Citation needed|date=June 2011}} The 10NES chip can eventually be permanently disabled by performing a minor change to the hardware.

===Sega Mega Drive/Genesis and Master System===
Both the [[Mega Drive|Sega Genesis/Mega Drive]] and [[Sega Master System]] benefit from limited homebrew development, as there is no physical lockout mechanism, thereby easing the operation of software on these platforms. Homebrew efforts for the Mega Drive/Genesis have grown, as there are now several full games scheduled for release in physical form, such as ''Rick Dangerous 1 &amp; 2'' and a port of Teenage Queen. ''[[Pier Solar and the Great Architects]]'' and ''[[Frog Feast]]'' for the Mega Drive/Genesis and ''Mighty Mighty Missile'' for the [[Sega Mega-CD]] are examples of homebrew games already released for Sega consoles.

A [[QBASIC]]-like high level compiler named basiegaxorz exists for the Sega Genesis.

===Super Nintendo Entertainment System (SNES)===
After its discontinuation of games in 1998, and production in 1999, the fans of the [[Super Nintendo Entertainment System]] made homebrew ROM images, even without Nintendo's support for the console.

After the release of SNES there was great interest in reverse engineering the system to allow for homebrew and backup play. Nintendo fitted the machine with various security measures such as the lock-out chip to prevent unauthorized code running on the machine.

Eventually the homebrew community figured out how games ran on the SNES hardware and were able to bypass its security mechanisms. Companies such as BUNG release hardware plugins such as Game Doctor SF series. These allows users to not only copy games but also run homebrew developed games to be run on the SNES hardware. Homebrew ROMS could be converted into the Game Doctor SF format and put onto a 3 1/2&quot; floppy. Games as large as 12Mbits could be put fit on floppy disks formatted to 1.6Mbytes.

An alternative device was the Super Flash, by Tototek, allowed for multiple games to be burned into a flash memory chip of cartridge (allowing up to 48Mbits). This chip is the mask rom for the Super Flash development cartridge. The device is easy to use and has a user interface on the computer end. Simply plug in the Super Flash cartridge and upload the games you want. This allowed users to make a SNES game and play it in an actual cartridge rather than a floppy disk.

The legality of homebew SNES game releases has not been tested in court, and it is debatable whether or not bypassing their security measures would fall foul of modern reverse engineering laws. Presumably homebrew games can be produced legally for the SNES as long as no copyright material is included.

Previously in the 1990s, Nintendo sued Color Dreams for producing NES games without an official license. The outcome was an undisclosed settlement, but Color Dreams continued to produce unlicensed games. The strength of Color Dreams position lies with that they worked around the 10NES lockout chip code rather the illegally duplicating it.

==Fifth-generation consoles==
===Atari Jaguar===
The ''[[Atari Jaguar]]'' was the last console produced by the Tramiel owned version of Atari. The console has an active homebrew development scene strongly facilitated by the release of the publishing rights for the console by one time owners Hasbro.&lt;ref&gt;{{cite web|url=http://www.atariage.com/Jaguar/archives/HasbroRights.html|title=Hasbro release Jaguar Publishing Rights}}&lt;/ref&gt; Prominent homebrews for the console have included ''[[Battlesphere]]'' and ''[[Frog Feast]]'' in addition to many other projects. Coding for the console is predominantly done in assembly language and the Atari SDK has been made available. Since emulation of the console is still limited, coding is best conducted using a real Jaguar console with the official Jaguar 'Alpine' Devkit, a Skunkboard Flash Cart or a BJL uploader.

===PlayStation===
It is possible to play homebrew on any model [[PlayStation]] through the use of a [[modchip]] or the double swap trick (or, for the very first SCPH-1001 models put into production, the CD player trick). Homebrew was promoted by Sony with the [[Net Yaroze]] which had a large scene for quite some time, however the official Net Yaroze site was shut down in mid-2009.

===Sega Saturn===
The [[Sega Saturn]] homebrew scene is small but active. As with the PlayStation, all models are capable of homebrew. Modchips for the Saturn Model 1 have been scarce for sometime now (as it seems that no one has produced any new modchips in years), so the only two options left are to either perform the easy swap trick or extensively modify a Saturn Model 2 modchip.

Running homebrew on the Model 2 is as easy as bridging two points on the modchip, soldering a wire from the modchip to the Saturn power supply, and inserting it where the CD-rom ribbon cable inserts. The swap trick is more difficult to pull off on this Model due to the lack of an access light.

===Nintendo 64===
The [[Nintendo 64]] homebrew scene is small, but homebrew can still be played and developed on one through the use of a [[Doctor V64]] (Acclaim even used some of these to develop Turok){{Citation needed|date=October 2010}}.

==Sixth-generation consoles==
===Nuon===
The [[Nuon]] was a game chip built into several DVD players. [[VM Labs]], which made the system, released a homebrew SDK just before it went bankrupt. The graphical capabilities are on par with the [[PlayStation]]. Homebrew Nuon apps can only be played on Samsung DVD-N50x and RCA Nuon DVD players.

===Dreamcast===
Despite its short commercial lifespan of less than two years in North America, the Dreamcast benefits from an active homebrew scene even ten years after its discontinuation. Due to a flaw in the Dreamcast [[BIOS]], which was intended for use with [[MIL-CD]]'s, the console can run software from [[CD-R]] without the use of a modchip. Sega reacted by removing MIL-CD support from the BIOS of the later produced Dreamcast consoles manufactured from November 2000 onwards.

The console is especially notable for its commercial homebrew scene. One notable project was the [[Bleemcast!]] emulator, which was a series of bootdisks made to play [[PlayStation]] games on the system. Newer independent releases include [[Last Hope (video game)|Last Hope]], released by [[Red Spot Games]] in 2007, and [[DUX (video game)|DUX]], both [[Shoot 'em up]] style games. These releases were written using the KallistiOS development system. A port of the freeware high-level development language [[Fenix Project|Fenix]] and [[BennuGD]] is available for use in game development; many DIV Games Studio games have been ported and others were originally written for the system. There are also homebrew versions of cancelled PC games available.

===PlayStation 2===
Early versions of the [[PlayStation 2]] have a buffer overflow bug in the part of the BIOS that handles PS1 game compatibility; hackers found a way to turn this into a loophole called the PS2 Independence Exploit, allowing the use of homebrew software. Another option for homebrew development is the use of a [[modchip]]. Also, it is possible for developers to utilize a PS2 hard drive and [[HD Loader]].

As of May 2008, there is a superior exploit called Free McBoot, which is applicable to all PS2s including Slimlines except for SCPH-9000x models with BIOS 2.30 and up, where the exploit was patched by [[Sony]]. Manufacturing of such homebrew-proof models started in the third quarter of 2008, which is denoted as date code 8C on the console, although some consoles of this line still have the old unpatched 2.20 BIOS.

Unlike the Independence Exploit, which requires a trigger disk, it only needs a Memory Card, which allows it to be used on systems with broken disk drives. The installation is keyed to the Memory Card and will only be usable on the same version consoles that it was originally installed on, unless a Multi-Install is performed. Also, the installation is locked to the region of the original console.
The drawback of this exploit is that it needs to be installed/compiled on each individual memory card. Simply copying the exploit is not possible; this means that an already modded or exploited system is required to install FMCB on a Memory Card. However using a homebrew application called UlaunchELF and a swap magic disc, one is able to simply copy the install files to the memory card by running the homebrew using swap magic and a thumbdrive. 

After installing an exploit, unsigned executables ([[ELF]]) may be launched from a Memory Card or an USB drive. Such programs include emulators, media players and hard drive management tools. The exploit is also notable for allowing the user to copy PS1/PS2 save files from a Memory Card to a USB drive, a functionality normally only possible with tools such as a [[DexDrive]].

Sony also released an official homebrew-development kit that allows [[PS2 Linux|PlayStation 2 to run Linux]].

===Nintendo GameCube===
Homebrew development on the [[Nintendo GameCube]] tended to be difficult, since it uses a [[MiniDVD]] drive as opposed to the standard DVD drives of the PS2 and Xbox for piracy protection. Also, its connectivity is limited, as is does not feature an USB port or a HDD port like its competitors.

The barrier to burning Nintendo GameCube discs with a consumer DVD burner is the [[Burst Cutting Area]], a &quot;barcode&quot; in the innermost ring of the disc, an area inaccessible to most burners and writeable only by very expensive disc pressing machines. For a long time the only way to run homebrew software on Nintendo GameCube was through a patching-system exploit of ''[[Phantasy Star Online Episode I &amp; II]]'', requiring users to find the game and a Broadband Adapter. Both of these are difficult to find because a follow-up has been released (under the name ''[[Phantasy Star Online Episode I &amp; II Plus]]'') and thus the original PSO was rarely sold after then, and because the Broadband Adapter was not often carried in stores due to the Nintendo GameCube's very limited selection of online games.

Currently the most common method is to use a special loader software, often using a [[modchip]], and homebrew software can be loaded from [[DVD-R]], [[SD card]] (with an SD card adapter), or over Ethernet. As the Nintendo GameCube's case does not fit a full-size DVD-R, third party replacement cases are available. Most of Nintendo GameCube homebrew software is developed to emulate other videogame systems.

The once slow Nintendo GameCube scene is faring better than it was during its commercial lifespan thanks to bearing technical similarities with its popular successor, the [[Wii]].

===Xbox===
[[File:Xboxinside01.jpg|thumb|right|200px|Microsoft [[Xbox]] with modchip installed]]
The [[Xbox]] console uses several measures, including cryptographically signed code to obfuscated firmware. The primary method of executing homebrew code required installing a [[mod chip]] which could be flashed with a modified Microsoft [[BIOS]]. This BIOS allowed the system to boot unsigned executables (XBEs)  and control several hardware variables, such as region coding and video mode. With the leak of Microsoft's official development kit ([[Xbox Development Kit|XDK]]) homebrew coders were able to write replacement Xbox GUIs (known as dashboards), games and applications for the Xbox.

A [[softmod]] which uses a commercial game such as ''[[Agent Under Fire (video game)|007: Agent Under Fire]]'', ''[[Mech Assault]]'' or ''[[Splinter Cell]]'' to load up homebrew software has been discovered. This method utilizes modified font and sound files to cause the Xbox to intentionally crash and load one of the homebrew dashboards. Once in this condition, the Xbox is able to execute homebrew games and applications.

Because the Xbox uses standard PC libraries, writing homebrew games is relatively easy, as the vast majority of libraries available for a PC programmer are available to an Xbox homebrew programmer.

One of the more common type of homebrew games for the Xbox are ports of PC games whose source has been publicly released or leaked. Many classic PC games have been released for Xbox, but most are created with the XDK which limits their availability. The only places to find these ports are through [[IRC]] or [[peer-to-peer]] browsers.

The Xbox system is also very adept at running [[emulators]] which have been ported from PC. The Xbox is able to emulate systems up to the previous generation, including the [[Nintendo 64]] and the [[PlayStation]]. For this reason, many different emulators have been created for the Xbox, and some of them have even more development support than their PC counterparts.

Recently, progress has been made in the creation of a legal development kit for the Xbox, known as OpenXDK. The OpenXDK is intended to allow coders to create new applications and games, as well as port existing source codes, without using illegally obtained Microsoft software. The games and applications created under the OpenXDK can be legally hosted on the net, and downloaded by users.

Even after the release of the [[Xbox 360]], the Xbox homebrew scene remains extremely active, with new game ports, emulators, and applications coming out weekly. [[Microsoft]] is currently encouraging Xbox 360 homebrewed content with [[Microsoft XNA|XNA]], though at a charge of $99 per year.

===Game Boy Advance===

 {{Main|Game Boy Advance#Homebrew_software_development}}

== Seventh-generation consoles ==
===PlayStation Portable (PSP)===
{{Main|PlayStation Portable homebrew}}

=== Nintendo DS ===
{{Main|Nintendo DS homebrew}}
Nintendo DS homebrew is very popular with Windows compatible software called &quot;DS Game Maker&quot; or &quot;DSGM&quot; for short. Though there are a few issues with the software, it has made it easy to make DS homebrew [[ROM cartridge|ROM]]s

=== Nintendo DSi ===
[http://github.com/WinterMute/ClassicHack WinterMute] has released an exploit for Classic Word Games that allows to run a small assembler program in DSi mode with no additional hardware.

Team Twiizers created a DSi mode exploit called &quot;Sudokuhax&quot; using the DSiWare &quot;Sudoku&quot; by EA. Sudoku is only available for regions USA and EUR/AU. Sudokuhax launches &quot;boot.nds&quot; from the root of the SD card in the DSi SD card slot. Nintendo removed Sudoku from the DSiWare shop shortly after the hack was released.

There are many Flashcarts like the Acekard 2i that can be used on a DSi console but only in DS mode, so the extra RAM, cameras and the SD slot are not usable using this method. The CycloDS iEvolution is the first cart to support DSi mode homebrew.

===Xbox 360===
[[Microsoft]] has released a version of its proprietary Software Development Kit (SDK) for free, to would-be homebrew programmers. This [[SDK]], called [[Microsoft XNA|XNA Game Studio]], is a free version of the SDK available to professional development companies and college students. However, to create Xbox 360 games you must pay for a premium membership to the XNA Creators Club. Once the games are verified, the games written with XNA Studio can be made available for 80, 240, or 400 Microsoft Points to all [[Xbox 360]] owners (through [[Xbox Live]]). This allows creators of homebrew content access to their target audience of Xbox 360 owners. This content is available under the Indie Games section of the New Xbox Experience.

On March 20, 2007, it was announced that a hack using the previously discovered hypervisor vulnerability in the Xbox 360 kernel versions 4532 and 4548 had been developed to allow users to run XeLL, a Linux bootloader. The initial hack was beyond the average user and required an Xbox serial cable to be installed and a flashed DVD Drive firmware. Felix Domke, the programmer behind XeLL, has since announced a live bootable Linux CD suitable for novice users, with the capabilities to be installed to the SATA hard drive of the Xbox 360. Despite the availability of such a distribution, the Xbox 360 still isn't considered a popular platform for homebrew development, given the dependence of the exploit on the DVD-ROM being able to load a burnt DVD game, a modified version of the game King Kong, and two older kernel revisions of the console itself.

A group independent of Microsoft is working on the means to run homebrew code, as part of the [[Free60]] project.

Note: The hypervisor vulnerability in the Xbox 360 kernel versions 4532 and 4548 was addressed by Microsoft with the release of the NXE system and dashboard update in 2008.{{Citation needed|date=July 2009}}

Homebrew was since re-enabled on any Xbox 360 with dash 2.0.7371.0 or lower via an exploit referred to a the jtag / jtag smc hack but was promptly patched again by Microsoft with the  2.0.8495.0 update.

=== PlayStation 3 ===
The [[PlayStation 3]] was designed to run other operating systems from day one. Very soon after launch, the first users managed to install Fedora Core 5 onto the PlayStation 3 via the 'Install Other OS' option in the PlayStation 3's XMB (Xross Media Bar), which also allows configuring the PlayStation 3 to boot into the other OS installed by default.

So far, several Linux flavors have been successfully installed to the PlayStation 3, such as [[Fedora (operating system)|Fedora Core]] 5, Fedora Core 6, [[Gentoo Linux|Gentoo]], [[Ubuntu (operating system)|Ubuntu]] and [[Yellow Dog Linux]] (YDL). The latter comes installed with the Cell SDK by default, allowing programmers a low cost entry into Cell programming. See also: [[Linux for PlayStation 3]]

Originally, graphics support was limited to framebuffer access only (no access to the PlayStation 3's graphics chip RSX yet), some access to the RSX graphics chip was achieved however Sony blocked this with firmware release 2.10.

Homebrew developers do have access to the [[Cell microprocessor]], including 6 of its 7 active Synergistic Processing Elements (SPEs). The Game OS resides under a [[hypervisor]] and prevents users from taking full control of the PlayStation 3's hardware. This is a security measure which helps Sony feel secure enough to allow users to install other operating systems on the PS3.

The Sixaxis controller has also been exposed to Linux and Windows,&lt;ref&gt;{{cite web|url=http://forums.ps2dev.org/viewtopic.php?t=7099|title=Sixaxis driver for Windows XP}}&lt;/ref&gt; but as of yet no driver seems to have been successfully created that exposes its [[accelerometer]] functionality. However other drivers have successfully used it as a controller for gaming etc.

In May 2008, a vulnerability was found in the PlayStation 3 allowing users to install a partial debug firmware on a regular console. However, the debug functionality is disabled, so neither homebrew applications nor backup games can be run yet.

Another exploit was found on August 14, 2008, allowing users to boot some backup games from the PlayStation 3's [[Hard disk drive|HDD]], although the exact instructions on how to do this were not released at that time. However, a different person posted instructions 10 days later, which explained the exploit.&lt;ref&gt;{{cite web|url=http://forums.maxconsole.net/showthread.php?t=122140|title=How to run a PS3 game backup}}&lt;/ref&gt;

On January 6, 2009 a hacking ring known as the &quot;''Sh4d0ws''&quot; leaked the jig files needed to launch the PlayStation 3 into service mode. Although the PlayStation 3 can be triggered into service mode, it is not yet of any use because the files needed to make changes to the console have not been leaked.&lt;ref&gt;{{cite web|url=http://www.ps3news.com/PS3Dev/playstation-3-service-mode-jig-set-up-files-leaked|title=PlayStation 3 Service Mode JIG Set-Up Files Leaked!}}&lt;/ref&gt;

On August 31, 2010 PSGroove, an exploit for the PS3 through the USB port, was released and made open source. This exploit works on all of the PS3 models released up until then.&lt;ref&gt;http://www.ps3-hacks.com/2010/08/31/diy-ps-jailbreak-may-be-available-soon/&lt;/ref&gt;  A guide for the creation of the PSGroove is available through several online sources.&lt;ref&gt;http://howtohackps3.com/&lt;/ref&gt;

[[George Hotz]], better known under his nickname &quot;geohot&quot;, has recently appeared on Attack of the Show because he released the PlayStation 3's encryption keys, therefore any homebrew or custom firmware can be signed. Once signed, homebrew can be natively run. It would be difficult for Sony however to fix this because it would most likely require a voluntary recall and the most expensive parts would have to be replaced.&lt;ref&gt;{{cite web|url=http://www.geohot.com|title=Geohotz Page}}&lt;/ref&gt; In 2011, Sony, with help from law firm [[Kilpatrick Stockton]], sued Hotz and associates of the group fail0verflow for their jailbreaking activities. Charges included violating the [[Digital Millenium Copyright Act|DCMA]], [[Computer Fraud and Abuse Act|CFAA]], [[Contributory liability|Copyright law]], and [[California Comprehensive Computer Data Access and Fraud Act|California's CCDAFA]], and for [[Breach of Contract]] (related to the [[PlayStation Network]] [[Terms of service|User Agreement]]), [[Tortious interference]], [[Misappropriation]], and [[Trespass]].&lt;ref&gt;[http://www.engadget.com/2011/01/12/sony-follows-up-officially-sues-geohot-and-fail0verflow-over-ps/ Sony follows up, officially sues Geohot and fail0verflow over PS3 jailbreak]. Nilay Patel, Engadget (2011-01-12). Retrieved on 2011-02-16.&lt;/ref&gt;&lt;ref&gt;See also [[:File:sonyvhotz.djvu]]&lt;/ref&gt;

===Wii===
{{Main|Wii homebrew}}

===GP32===
The [[GP32]] by [[Gamepark Holdings]] could run homebrew software through a special firmware which required the user to register on Gamepark's website, which also hosted some homebrew software.

=== GP2X ===
The [[GP2X]] by [[Gamepark Holdings]] is fully dedicated to running homebrew software.

=== Pandora ===
The [[Pandora (console)]] is able to run homebrew software from almost any source, such as SD cards, USB hard disks and flash drives, and wireless shares. It is also capable of compiling its own software internally using the GNU compiler collection.

===Gizmondo===
The [[Gizmondo]] was cracked in early 2006. Because [[Tiger Telematics]], the creator of Gizmondo, is bankrupt, a small fan base provided a fair amount of homebrew applications and emulators.

==See Also==
*[[Mod (video gaming)]] 
*[[ROM hacking]]


==References==
{{Reflist}}

==External links==
* [http://www.brewology.com/ Brewology news]
* [http://www.gp2x.info GP2x developers forums] (English and Dutch)
* [http://www.dev-scene.com Dev-Scene Nintendo related Homebrew Portal]
* [http://www.console-spot.com/file-downloads/ Console-Spot PS3/PSP/X360/WII Homebrew]
* [http://www.pdroms.de/ PDRoms â Homebrew News and Downloads for many systems]
* [http://creators.xna.com/en-US/XboxLIVECommunityGames XNA Creators Club Online]
* [http://www.xgamestation.com/  XGS AVR 8-Bit]
* [http://belogic.com/uzebox/  Uzebox - The ATMega Game Console]
* [http://www.nesworld.com/homebrew.php NESWORLD.COM - NES Homebrew Archive]
* [http://www.GameHacking.org GameHacking.org] A site with some information and resources related to homebrew, particularly PS2 development.
* [http://ps3jailbreakteam.com  PS3 Jailbreak]

{{Independent production}}

{{DEFAULTSORT:Homebrew (Video Games)}}
[[Category:Aftermarket firmware]]
[[Category:Homebrew software| ]]
[[Category:Video game development]]

[[ca:Homebrew]]
[[de:Homebrew]]
[[es:Homebrew]]
[[fr:Homebrew]]
[[it:Homebrew (informatica)]]
[[ja:Homebrew]]
[[pl:Homebrew (gry wideo)]]
[[pt:Homebrew]]
[[ru:Homebrew (ÐºÐ¾Ð¼Ð¿ÑÑÑÐµÑÐ½ÑÐµ Ð¸Ð³ÑÑ)]]
[[sv:Homebrew]]</rev></revisions></page></pages></query></api>
