<?xml version="1.0"?><api><query><pages><page pageid="1465669" ns="0" title="QEMU"><revisions><rev xml:space="preserve">{{primary sources|date=September 2011}}
{{Infobox software
| developer              = QEMU team:&lt;br/&gt;Fabrice Bellard, Paul Brook, et al.
| author                 = [[Fabrice Bellard]]
| latest release version = 1.0&lt;ref name=&quot;v1.0&quot;&gt;{{cite web | url=http://wiki.qemu.org/ChangeLog/1.0 | title=ChangeLog - QEMU | accessdate = 2011-12-2}}&lt;/ref&gt;
| latest release date    = {{release date and age|2011|12|1}}
| operating system       = [[Cross-platform]]
| genre                  = [[Emulator]]
| license                = [[GNU General Public License version 2|GNU GPL version 2]] &lt;!-- as a whole --&gt;
| website                = http://www.qemu.org/
}}

'''QEMU''' is a [[central processing unit|processor]] [[emulator]] that relies on dynamic [[binary translation]] to achieve a reasonable speed while being easy to port on new host CPU architectures.

In conjunction with CPU emulation, it also provides a set of device models, allowing it to run a variety of unmodified guest [[operating system]]s; it can thus be viewed as a [[Virtual machine monitor#Classification|hosted virtual machine monitor]]. It also provides an accelerated mode for supporting a mixture of binary translation (for kernel code) and native execution (for user code), in the same fashion as [[VMware Workstation]] and [[VirtualBox]]. QEMU can also be used purely for CPU emulation for user level processes, allowing applications compiled for one architecture to be run on another.

==Licensing==

QEMU was written by [[Fabrice Bellard]] and is [[free software]]. Various parts are released under different [[GNU General Public License]] version 2-compatible licenses.  These include the [[GNU Lesser General Public License]] (GNU LGPL) or permissive licenses such as the [[BSD license]].&lt;ref&gt;[http://www.nongnu.org/qemu/license.html QEMU license]&lt;/ref&gt; There is an option to use the proprietary [[FMOD]] library when running on [[Microsoft Windows|Windows]], which, if used, disqualifies the use of a single [[Open Source]] software license. However, the default is to use [[DirectSound]].

==Details==

QEMU has two operating modes:&lt;ref&gt;[http://qemu.weilnetz.de/qemu-tech.html QEMU Internals]&lt;/ref&gt;

; User mode emulation
: In this mode QEMU runs single [[Linux]] or [[Darwin (operating system)|Darwin]]/[[Mac OS X]] programs that were compiled for a different CPU. System calls are [[Thunk (compatibility mapping)|thunk]]ed for [[endianness]] and for 32/64 bit mismatches. Fast cross-compilation and cross-debugging are the main targets for user-mode emulation.
; Computer emulation
: In this mode QEMU emulates a full computer system, including [[peripheral]]s.  It can be used to provide virtual hosting of several virtual computers on a single computer. QEMU can boot many guest [[operating system]]s, including [[Linux]], [[Solaris (operating system)|Solaris]], [[Microsoft Windows]], [[DOS]], and [[BSD]] [http://www.claunia.com/qemu/]; it supports emulating several hardware platforms, including [[x86 architecture|x86]], [[x86-64]], [[ARM architecture|ARM]], [[DEC Alpha|Alpha]], [[ETRAX CRIS]], [[MIPS architecture|MIPS]], [[MicroBlaze]], [[PowerPC]] and [[SPARC]].

==Features==

QEMU can save and restore the state of the virtual machine with all programs running. Guest operating systems do not need to be patched to run safely under QEMU.

QEMU supports the emulation of various architectures, including [[IA-32]] (x86) PCs, [[x86-64]] PCs, [[MIPS Technologies|MIPS]] R4000, Sun's [[SPARC]] sun4m, Sun's [[SPARC]] sun4u, [[ARM architecture|ARM]] development boards (Integrator/CP and Versatile/PB), [[SuperH|SH4]] SHIX board, [[PowerPC]] ([[PReP]] and [[Power Macintosh]]), [[ETRAX CRIS]] and [[MicroBlaze]] architectures. The QEMU homepage provides a complete list of supported architectures.

The virtual machine can be equipped with many types of hardware. Some of these are: hard disks, CD-ROM drives, network cards, sound chips, and USB devices. USB devices can be completely emulated (mass storage from image files, input devices), or the host's USB devices can be used (however, this requires administrator privileges and does not work with all devices).

Virtual hard disk images can be stored in a special format ([[qcow|qcow or qcow2]]) that only takes up disk space that the guest OS actually uses. This way, an emulated 120 GiB disk can still take up just several hundred megabytes on the host. The QCOW2 format also allows the creation of overlay images that record the difference to another base image file which is not modified. This can be useful to have the possibility of reverting the disk's contents to an earlier state. For example, a base image could hold a fresh install of an operating system that is known to work, and the overlay images are worked with. Should the guest system be unusable (virus attack, accidental system destruction, ...), the overlay can be deleted and recreated.

QEMU can emulate network cards (of different models) which share the host system's connectivity by doing network address translation, effectively allowing the guest to use the same network as the host. The virtual network cards can also be connected to network cards of other instances of QEMU or local [[TUN/TAP|TAP]] interfaces.

It also has some features that are not present in many emulators. QEMU integrates several services to allow the host and guest systems to communicate, for example, a [[Server Message Block|SMB]] server and network port redirection (to allow incoming connections to the virtual machine). It can also boot Linux kernels without having to prepare a bootable image with a bootloader.

QEMU does not depend on the presence of graphical output methods on the host system. Instead, it can allow one to access the screen of the guest OS via [[VNC]]. It can also use an emulated serial line, without any screen, with applicable operating systems.

Simulating multiple CPUs that can be used like a real [[Symmetric multiprocessing|SMP]] system is possible.

Unlike some other emulators, QEMU does not require administrative rights to run, except if additional kernel modules for improving speed are used (like [[#Accelerator|KQEMU]]).

===Tiny Code Generator===

The Tiny Code Generator (TCG) aims to remove the shortcoming of relying on a particular version of [[GNU Compiler Collection|GCC]] or any compiler, instead incorporating the compiler (code generator) into other tasks performed by QEMU in run-time.  The whole translation task thus consists of two parts: blocks of target code (''TBs'') being rewritten in '''TCG ops''' - a kind of machine-independent intermediate notation, and subsequently this notation being compiled for the host's architecture by TCG.  Optional optimisation passes are performed between them.

TCG requires that there be dedicated code written to support every architecture it is being run on.  It also requires that the target instruction translation be rewritten to take advantage of TCG ops, instead of the previously used ''dyngen ops''.

Starting with QEMU Version 0.10.0, TCG ships with the QEMU stable release.&lt;ref&gt;[http://lists.gnu.org/archive/html/qemu-devel/2009-03/msg00154.html QEMU 0.10.0 release announcement]&lt;/ref&gt;

===Accelerator===
''KQEMU'' was a [[Linux kernel]] [[Loadable kernel module|module]], also written by Fabrice Bellard, which notably sped up emulation of x86 or x86-64 guests on platforms with the same CPU architecture. This was accomplished by running [[user mode]] code (and optionally some kernel code) directly on the host computer's CPU, and by using processor and peripheral emulation only for [[kernel mode]] and [[real mode]] code.

Unlike [[Kernel-based Virtual Machine|KVM]], for example, KQEMU could execute code from many guest OSes even if the host CPU did not support hardware virtualization.

KQEMU was initially a [[closed-source]] product available free of charge, but as of version 1.3.0pre10,&lt;ref&gt;{{cite web|author= |url=http://lwn.net/Articles/220807/ |title=KQEMU 1.3.0pre10 released - under the GPL [LWN.net&amp;#93; |publisher=Lwn.net |date=February 6, 2007 |accessdate=2009-01-03}}&lt;/ref&gt; it was relicensed under the [[GNU General Public License]].

QEMU versions starting with 0.12.0 ({{as of|2009|08|lc=on}}) support large memory which makes them incompatible with KQEMU.&lt;ref&gt;{{cite web|author=Anthony Liguori |url=http://lists.gnu.org/archive/html/qemu-devel/2009-08/msg00478.html |title=[Qemu-devel&amp;#93; [PATCH 1/2&amp;#93; Unbreak large mem support by removing kqemu |date=10 August 2009 |accessdate=2010-03-11}}&lt;/ref&gt;  Newer releases of QEMU have completely removed support for KQEMU.

QVM86 was a drop-in replacement for the then closed-source KQEMU, licensed under GNU [[GNU General Public License|GPLv2]] license.  The developers of QVM86 ceased development in January, 2007.

== Hardware-assisted emulation ==

The [[MIPS architecture|MIPS]]-compatible [[Loongson]]-3 processor adds 200 new instructions to help QEMU translate x86 instructions; those new instructions lower the overhead of executing x86/[[Complex instruction set computer|CISC]]-style instructions in the MIPS pipeline. With additional improvements in QEMU by the [[Chinese Academy of Sciences]], Loongson-3 achieves an average of 70% the performance of executing native binaries while running x86 binaries from nine benchmarks.&lt;ref&gt;{{cite web|url=http://doi.ieeecomputersociety.org/10.1109/MM.2009.30 |title=Godson-3: A Scalable Multicore RISC Processor with x86 Emulation |publisher=[[IEEE]] |accessdate=2009-04-16}}&lt;/ref&gt;

== Parallel emulation ==

Virtualization solutions that use QEMU are able to execute multiple virtual CPUs in parallel.  QEMU is also able to run multiple threads in user-mode emulation mode.

For full system emulation, QEMU uses a single thread to emulate all the virtual CPUs and hardware. COREMU&lt;ref&gt;[http://sourceforge.net/p/coremu COREMU project page on sourceforge]&lt;/ref&gt; is a patch to QEMU to break this limitation.  Each core uses a separate instance of QEMU binary translation engine, with a thin library layer to handle the inter-core and device communication and synchronization.

==Integration in other virtualization solutions==
===VirtualBox===
{{Main|VirtualBox}}

In January 2007, VirtualBox was released. It uses some of QEMU's virtual hardware devices and has a built-in [[Dynamic recompilation|dynamic recompiler]] that is based on QEMU. As with KQEMU, it runs nearly all guest code natively on the host via the VMM (Virtual Machine Manager), and uses the recompiler only for special situations as a fallback mechanism (this holds true for guest code that executes in [[real mode]] and some other rare scenarios at runtime).&lt;ref&gt;[http://virtualbox.org/wiki/Developer_FAQ VirtualBox's Developer FAQ]&lt;/ref&gt; In addition, VirtualBox goes through a lot of code analysis and patching via a built-in disassembler to reduce usage of the recompiler to a minimum. VirtualBox is open-source software under the GPL, except for a number of enterprise features, and standard user features like USB 2.0.

=== Xen-HVM ===
{{Main|Xen}}

The Xen virtual machine monitor can run in HVM (hardware virtual machine) mode, using [[Intel VT-x]] or [[AMD-V]] hardware [[x86 virtualization]] extensions. This means that instead of paravirtualized devices, a real set of virtual hardware is exposed to the domU to use real device drivers to talk to.

QEMU includes several components: CPU emulators, emulated devices, generic devices, machine descriptions, user interface, and a debugger. The emulated devices and generic devices in QEMU make up its device models for I/O virtualization.&lt;ref&gt;[http://www.sun.com/blueprints/1107/820-3703.pdf Solaris Operating System Hardware Virtualization Product Architecture]&lt;/ref&gt;  They comprise a PIIX3 IDE (with some rudimentary PIIX4 capabilities), Cirrus Logic or plain VGA emulated video, RTL8139 or E1000 network emulation, and ACPI support.&lt;ref&gt;[http://ian.blenke.com/xen/hvm/svm/vtx/qemu Demystifying Xen HVM]&lt;/ref&gt;  APIC support is provided by Xen.

Xen-HVM has device emulation based on the QEMU project to provide I/O virtualization to the VMs. Hardware is emulated via a QEMU &quot;device model&quot; daemon running as a backend in dom0. Unlike other QEMU running modes (dynamic translation or KVM), virtual CPUs are completely managed to the hypervisor, which takes care of stopping them while QEMU is emulating memory-mapped I/O accesses.

=== KVM ===

[[Kernel-based Virtual Machine|KVM]] (Kernel Virtual Machine) is a Linux kernel module that allows a [[user space]] program access to the [[Hardware-assisted virtualization|hardware virtualization]] features of various processors, with which QEMU is able to offer virtualization for x86, PowerPC, and S/390 guests. When the target architecture is the same as the host architecture, QEMU can make use of KVM particular features, such as acceleration.

=== Win4Lin Pro Desktop ===
{{Main|Win4Lin}}

In early 2005, Win4Lin introduced Win4Lin Pro Desktop, based on a 'tuned' version of QEMU and KQEMU and it hosts NT-versions of Windows. In June 2006,&lt;ref&gt;[http://weblog.infoworld.com/virtualization/archives/2006/06/win4lin_announc.html win4lin VDS announcement]&lt;/ref&gt; Win4Lin released Win4Lin Virtual Desktop Server based on the same code base. Win4Lin Virtual Desktop Server serves Microsoft Windows sessions to thin clients from a Linux server.

In September 2006, Win4Lin announced a change of the company name to [http://vbridges.com/home.php Virtual Bridges] with the release of Win4BSD Pro Desktop, a port of the product to FreeBSD and PC-BSD. Solaris support followed in May 2007 with the release of Win4Solaris Pro Desktop and Win4Solaris Virtual Desktop Server.&lt;ref&gt;[http://win4solaris.com/jml/index.php?option=com_content&amp;task=view&amp;id=17&amp;Itemid=1 Win4Solaris announcement]&lt;/ref&gt;

=== SerialICE ===
{{Main|SerialICE}}

SerialICE is a QEMU-based firmware debugging tool running system firmware inside of QEMU while accessing real hardware through a serial connection to a host system. This can be used as a cheap replacement for hardware ICEs.&lt;ref&gt;[http://serialice.com/ SerialICE web page]&lt;/ref&gt;

==Shortcomings==
{{Ref improve section|date=September 2008}}

* Incomplete support for less frequently-used architectures
* {{As of | 2011}} only supports the traditional BIOS boot model for the guest OSes, no [[Extensible Firmware Interface|UEFI]] boot model support yet on x86-64 systems
* Few special [[device driver]]s (graphics, sound, IO) for guests are available, thus there is quite a large overhead for multimedia applications.  For example, a [[Cirrus Logic]] graphics chip and various popular sound cards ([[Ensoniq ES1370|ES1370]], [[Sound Blaster 16]], [[Gravis Ultrasound]] and [[AdLib]]) are emulated, but they do not take advantage of hardware acceleration on the host system.  Recently a virtual video device compatible with the VMWare video driver has been added; however, it does not support any scaled video or 3D features.
* QEMU only supports [[Simple DirectMedia Layer|SDL]] or [[Cocoa (API)|Cocoa]] libraries for video output, in addition to [[Virtual Network Computing|VNC]] for networked operation.
* Runs significantly slower than alternatives on PCs that lack hardware CPU virtualization.

==Emulated hardware platforms==
=== x86 ===
[[Image:qemu linux.png|thumb|QEMU with the free operating system [[ReactOS]]]]

Besides the [[Central processing unit|CPU]], the following devices are emulated:
* [[CD-ROM]]/[[DVD]]-drive using an [[ISO image]]
* [[Floppy disk]]
* [[Video card|Graphics card]] (''Cirrus CLGD 5446 PCI VGA''-card or Standard-VGA graphics card with Bochs-[[VESA BIOS Extension|VESA-BIOS-Extensions]]&amp;nbsp;-  Hardware level, including all non-standard modes, and an experimental patch that can accelerate simple 3D graphics via OpenGL&lt;!-- Check this translation --&gt;)
* [[Network card]] (RealTek 8139C+ PCI-Network adapter) &lt;!-- and a [[Dynamic Host Configuration Protocol|DHCP]]-[[Server (computing)|server]] really don't know whether to include this sort of thing in &quot;what is emulated.&quot;  Seems like a DHCP server, not an emulated DHCP server.  Would one similarly say it emulates a router and firewall?  don't think so. : Removed --&gt;
* [[Parallel port]]
* [[PC speaker]]
* Two PCI-[[Parallel ATA|ATA]]-interfaces with a maximum of four [[hard disk drive]] images either in QEMU's own format or in [[VMware]]-, [[VirtualPC]]-, [[Bochs]]-, [[Knoppix]]- (cloop) or ''dd''- (raw) format.
* [[Peripheral Component Interconnect|PCI]] and [[Industry Standard Architecture|ISA]]-system (''i440FX host PCI bridge'' and ''PIIX3 PCI to ISA bridge'')
* [[PS/2 connector|PS/2]]-[[Mouse (computing)|mouse]] and -[[Keyboard (computing)|keyboard]]
* [[Serial communication|Serial interface]]
* [[Sound card]] ([[Sound Blaster 16]], ES1370 PCI, [[Gravis Ultrasound]], and/or [[Intel High Definition Audio|Intel HD Audio]]&lt;ref name=&quot;0.14&quot;&gt;{{cite web | url=http://wiki.qemu.org/ChangeLog/0.14#Sound | title=ChangeLog/0.14 | accessdate = 2011-08-08}}&lt;/ref&gt;)
* [[Universal Serial Bus|USB]]-controller (Intel SB82371, [[Host controller interface#Universal Host Controller Interface|UHCI]])

The [[Basic Input Output System|BIOS]] implementation used by QEMU starting from version 0.12 is [[SeaBIOS]].  The VGA BIOS implementation comes from [[X86 virtualization|Plex86]]/Bochs.

===PowerPC===
On the PowerPC target, ''Open Hack'Ware'', an [[Open Firmware|Open-Firmware]]-compatible BIOS, is used.

====PowerMac====
QEMU emulates the following [[PowerMac]] peripherals:
* UniNorth PCI Bridge
* PCI-VGA-compatible Graphics card which maps the ''VESA Bochs Extensions''
* Two PMAC-IDE-Interfaces with hard disk and CD-ROM support.
* [[NE2000]] PCI adapter
* Non-volatile RAM
* VIA-CUDA with [[Apple Desktop Bus|ADB]] keyboard and mouse.

====PREP====
QEMU emulates the following [[PowerPC Reference Platform|PREP]] peripherals:
* PCI bridge
* PCI VGA-compatible graphics card with ''VESA Bochs Extensions''
* Two IDE interfaces with hard disk and CD-ROM support
* Floppy disk drive
* [[NE2000]] network adapter
* Serial interface
* PREP non-volatile RAM
* PC-compatible keyboard and mouse

===ARM===
[[Image:QEMU ARM Fedora Login1.png|thumb|QEMU booted into the ARM port of [[Fedora (operating system)|Fedora 8]]]]
QEMU emulates the [[ARM architecture#ARM cores|ARMv5TEJ]] [[instruction set]] and all the derivative processors families like ARM7, ARM9E, ARM10E and XScale. It emulates full systems like Integrator/CP board, Versatile baseboard, RealView Emulation baseboard, XScale-based PDAs, Palm Tungsten|E PDA, [[Nokia N800]] and [[Nokia N810]] internet tablets etc. QEMU also powers the Android emulator which is part of the [[Android software development|Android SDK]] (most current Android implementations are ARM based). Under development is [http://iemu.org/index.php/Main_Page iEmu], emulator of Apple's iPhone. Starting from version 2.0.0 of their BADA SDK, Samsung has also chosen QEMU to help development on emulated 'Wave' devices.

===SPARC===
[[Sun SPARC]]-Architecture = ('''S'''calable '''P'''rocessor '''ARC'''hitecture)

When the BIOS in the [[JavaStation]] (sun4m-Architecture) became Version 0.8.1 ''Proll'',&lt;ref name=&quot;people_redhat_com_zaitcev_proll&quot;&gt;{{cite web|title=Zaitcev's Linux|url=http://people.redhat.com/zaitcev/linux/}} 090427 people.redhat.com&lt;/ref&gt; a [[Programmable read-only memory|PROM]] replacement used in Version 0.8.2, was replaced with [[OpenBIOS]].&lt;!-- Double check the translation of this sentence! --&gt;

====Sparc32====
QEMU emulates the following ''[[Sun-4#Sun-4 architecture|sun4m/sun4c/sun4d]]'' peripherals:
* IOMMU or IO-UNITs
* TCX Frame buffer (graphics card)
* [[AMD Lance Am7990|Lance (Am7990)]] [[Ethernet]]
* Non-volatile RAM [[SPARCstation 1#NVRAM|M48T02/M48T08]]
* Slave I/O: timers, interrupt controllers, [[Zilog]] serial ports, keyboard and power/reset logic
* ESP SCSI controller with hard disk and CD-ROM support
* Floppy drive (not on SS-600MP)
* CS4231 sound device (only on SS-5, not working yet)

====Sparc64====
Emulating [[Sun-4#Sun-4 architecture|Sun4u]] (UltraSPARC PC-like machine), [[Sun-4#Sun-4 architecture|Sun4v]] (T1 PC-like machine), or generic [[UltraSPARC T1|Niagara]] (T1) machine with the following peripherals:
* [[UltraSPARC II#UltraSPARC IIi|UltraSparc IIi]] APB PCI Bridge
* PCI VGA compatible card with VESA Bochs Extensions
* PS/2 mouse and keyboard
* Non-volatile RAM M48T59
* PC-compatible serial ports
* 2 PCI IDE interfaces with hard disk and CD-ROM support
* Floppy disk

===MicroBlaze===

Supported peripherals:
* [[MicroBlaze]] with/without MMU
* timer
* intc
* uartlite
* emaclite

===LatticeMico32===
Supported peripherals:

From the [[Milkymist]] SoC
* uart
* vga
* memory card
* ethernet
* pfu
* timer

===CRIS===
{{Empty section|date=January 2011}}
{{Main|ETRAX CRIS}}

===External patches===

External trees exist supporting the following targets:

* [[Zilog Z80]]&lt;ref name=&quot;homepage_ntlworld_com-z80&quot;&gt;{{cite web|title=QEMU Z80 Target|url=http://homepage.ntlworld.com/wholehog/stuart/qemu/z80.html}} 090506 homepage.ntlworld.com&lt;/ref&gt; emulating a [[Sinclair ZX Spectrum|Sinclair 48K ZX Spectrum]]
* HP [[PA-RISC]]&lt;ref name=&quot;nongnu_org_qemu_links&quot;&gt;{{cite web|title=QEMU links|url=http://wiki.qemu.org/Links}} 090506 nongnu.org&lt;/ref&gt;

==See also==
{{Commons category}}
{{Portal|Free software}}
* [[qcow]] - qcow and qcow2 disc image formats
* [[Comparison of platform virtual machines]]
* [[Emulator]]
* [[iEmulator]] - shareware PC emulator for PowerPC and Intel Macs
* [[Mtools]] - MS-DOS disc manipulation tools
* [[Q (emulator)]] - Mac OS X port of QEMU
* [[SPIM]] - MIPS processor simulator

==References==

{{Reflist|2}}

==External links==
{{Wikibooks}}
* {{Official website|http://wiki.qemu.org/Main_Page}}
* [http://www.ibm.com/developerworks/linux/library/l-qemu/ Systems emulation with QEMU] an IBM developerWorks article by M. Tim Jones
* [http://savannah.nongnu.org/projects/qvm86/ QVM86 project page]
* [http://www.goitexpert.com/entry.cfm?entry=ARM-Emulation-With-QEMU ARM emulation with QEMU] (Broken link)
* [http://fedoraproject.org/wiki/Architectures/ARM/HowToQemu Fedora ARM port emulation with QEMU]
* [http://qemu-buch.de/ The Wikibook &quot;QEMU and KVM&quot;] (in German, or computer translated to English)
* [http://lassauge.free.fr/qemu/ QEMU on Windows]
* [http://www.monstr.eu/qemu/ Microblaze emulation with QEMU]
* [http://www.blacksvk.eu/qemu-speed QEMU speed comparison]{{Dead link|date=August 2011}}
* [http://www.unifiedsessionsmanager.org/doc/en/html/man1/ctys-createConfVM.html UnifiedSessionsManager - An unofficial QEMU/KVM configuration file definition]
*Unofficial [http://tech.groups.yahoo.com/group/qemu-users/ mailing list] for qemu users

{{DEFAULTSORT:Qemu}}
[[Category:Free cross-platform software]]
[[Category:Free virtualization software]]
[[Category:Linux emulation software]]
[[Category:Mac OS X emulation software]]
[[Category:PowerPC emulators]]
[[Category:Windows emulation software]]
[[Category:X86 emulators]]

[[ca:QEMU]]
[[de:QEMU]]
[[es:QEMU]]
[[fr:QEMU]]
[[ko:QEMU]]
[[it:QEMU]]
[[nl:QEMU]]
[[ja:QEMU]]
[[pl:QEMU]]
[[pt:QEMU]]
[[ru:QEMU]]
[[fi:QEMU]]
[[sv:QEMU]]
[[zh:QEMU]]</rev></revisions></page></pages></query></api>
