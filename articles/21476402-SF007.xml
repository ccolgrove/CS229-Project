<?xml version="1.0"?><api><query><pages><page pageid="21476402" ns="0" title="Carl Hewitt"><revisions><rev xml:space="preserve">{{pp-protected|reason=of violations of Wikipedia's [[WP:BLP|biographies of living persons policy]]}}
{{Pp-move-indef}}

'''Carl Hewitt''' is Board Chair of the International Society for Inconsistency Robustness.&lt;ref name=carlhewitt.info&gt;{{cite web|title=Carl Hewitt's homepage|url=http://carlhewitt.info/|accessdate=30 July 2011}}&lt;/ref&gt; He has been a Visiting Professor at Stanford University and the University of Keio. In 2000, he became emeritus in the [[Electrical_Engineering_and_Computer_Science|EECS]] department at [[MIT]].&lt;ref&gt;{{cite web|title=Stanford EE Computer Systems Colloquium|url=http://www.stanford.edu/class/ee380/Abstracts/081022.html|publisher=Standford University|accessdate=30 July 2011}}&lt;/ref&gt;

Hewitt is known for his design of [[Planner programming language|Planner]].&lt;ref name=&quot;hewitt69&quot;&gt;Carl Hewitt. [https://dspace.mit.edu/handle/1721.1/6171 ''PLANNER: A Language for Proving Theorems in Robots''] IJCAI. 1969.&lt;/ref&gt; This was the first [[programming language]] based on procedural plans invoked using pattern-directed invocation from assertions and goals.  Planner was influential in the development of both [[logic programming]] and [[object-oriented programming]].  He is also known for his work on the [[Actor model]]&lt;ref name=&quot;Actors&quot;&gt;{{cite arxiv | author=Hewitt, Carl| title=Actor Model of computation | eprint= 1008.1459 | class=cs.PL | year=2010}}&lt;/ref&gt; of [[concurrent computing|concurrent computation]],&lt;ref&gt;{{cite book|last=Filman|first=Robert|coauthors=Daniel Friedman|title=Coordinated Computing - Tools and Techniques for Distributed Software|year=1984|publisher=McGraw-Hill|isbn=0-07-022439-0|url=http://ic.arc.nasa.gov/people/filman/text/dpl/dpl.html|chapter=Actors|quote=Carl Hewitt and his colleagues at M.I.T. are developing the Actor model.|page= 145}}&lt;/ref&gt; which influenced the development of the [[Scheme (programming language)|Scheme]] programming language&lt;ref&gt;{{cite journal|last=Krishnamurthi|first=Shriram|title= An Introduction to Scheme|journal=Crossroads|volume =1|issue=2|month=December | year=1994|url=http://www.acm.org/crossroads/xrds1-2/scheme.html|doi=10.1145/197149.197166|pages=19}}&lt;/ref&gt; and the [[pi calculus|Ï calculus]],&lt;ref&gt;{{cite journal|last=Milner|first=Robin|authorlink=Robin Milner |title=ACM Turing Award Lecture: The Elements of Interaction|url=http://fresh.homeunix.net/~luke/misc/papers/milner-interaction.pdf|format=PDF|journal=Communications of the ACM|volume=36|issue = 1|month=January | year=1993|doi=10.1145/151233.151240|pages=78}}&lt;/ref&gt; and served as an inspiration for several other programming languages.&lt;ref name=&quot;miller2006&quot;&gt;{{cite journal| author = Mark S. Miller | title = Robust Composition - Towards a Unified Approach to Access Control and Concurrency Control | version = PhD dissertation| url = http://www.cypherpunks.to/erights/talks/thesis/submitted/markm-thesis.pdf | format=PDF
  | publisher = Johns Hopkins University | year = 2006 | accessdate = 2007-05-26}}&lt;/ref&gt; His publications also include contributions in the areas of [[open systems|open information systems]],&lt;ref name=&quot;Hewitt1986&quot;&gt;{{cite journal|author=Carl Hewitt|title=Offices Are Open Systems|journal=ACM Trans. Inf. Syst. |volume=4 |issue=3 |pages=271â287|year=1986|doi=10.1145/214427.214432}}&lt;/ref&gt; organizational and [[multi-agent system]]s,&lt;ref&gt;{{cite book|author=Jacques Ferber|title=Multi-Agent Systems: An Introduction to Distributed Artificial Intelligence|publisher=Addison-Wesley|year=1999}}&lt;/ref&gt;&lt;ref&gt;{{cite arxiv | author=Carl Hewitt | title= ''Norms and Commitment for iOrgs&lt;sup&gt;TM&lt;/sup&gt; Information Systems: Direct Logic&lt;sup&gt;TM&lt;/sup&gt; and Participatory Grounding Checking&lt;sup&gt;TM&lt;/sub&gt;'' | eprint=0906.2756 | class=cs.MA | year=2009}}&lt;/ref&gt;
[[logic programming]],&lt;ref name=&quot;hewitt69&quot;/&gt;&lt;ref name=&quot;middlehistory&quot;&gt;{{cite arxiv | author=Carl Hewitt | title= Middle History of Logic Programming: Resolution, Planner, Prolog and the Japanese Fifth Generation Project | eprint=0904.3036 | class=cs.LO | year=2009}}&lt;/ref&gt; concurrent [[programming language]]s,&lt;ref name=&quot;Actors&quot; /&gt;
&lt;ref name=&quot;ActorScript&quot;&gt;{{cite arxiv | author=Hewitt, Carl| title=ActorScript&lt;sup&gt;TM&lt;/sup&gt; extension of C#&lt;sup&gt;TM&gt;&lt;/sub&gt;, Java&lt;sup&gt;TM&lt;/sup&gt;, andObjective C&lt;sup&gt;Tm&lt;/sup&gt;| eprint=1008.2748 | class=cs.PL | year=2010 }}&lt;/ref&gt; direct inference,&lt;ref name=&quot;Hewitt2008&quot;&gt;{{Cite book |first=Carl|last=Hewitt|url=http://hewitt-seminars.blogspot.com/2008/03/large-scale-organizational-computing.html |chapter = Large-scale Organizational Computing requires Unstratified Reflection and Strong Paraconsistency|publisher=Springer-Verlag|year=2008|title=Coordination, Organizations, Institutions, and Norms in Agent Systems III|editor-first=Jaime|editor-last=Sichman|editor2-first=Pablo|editor2-last=Noriega|editor3-first=Julian|editor3-last=Padget|editor4-first=Sascha|editor4-last=Ossowski}}&lt;/ref&gt;&lt;ref&gt;{{cite arxiv|author = Carl Hewitt |title= Common sense for concurrency and inconsistency tolerance using Direct Logic(TM) and the Actor Model|eprint = 0812.4852|class = cs.LO|year = 2008}}&lt;/ref&gt; client [[cloud computing]].&lt;ref&gt;{{cite journal|author=Carl Hewitt|title=ORGs for Scalable, Robust, Privacy-Friendly Client Cloud Computing|journal=IEEE Internet Computing|volume=12|issue=5|date=September/October 2008}}&lt;/ref&gt;&lt;ref name=&quot;hewitt10&quot;&gt;{{cite arxiv|author = Carl Hewitt |title= A historical perspective on developing foundations for privacy-friendly client cloud computing: iConsult(TM) apps using iDescribers(TM) Information Integration for iOrgs(TM) Information Systems|eprint = 0901.4934|class = cs.DC|year = 2009}}&lt;/ref&gt;&lt;ref&gt;{{cite web|author = Carl Hewitt |title= Intimate personal information in client-cloud aggregator datacenters is headed for strong government regulation |url = http://knol.google.com/k/carl-hewitt-see-http-carlhewitt-info/intimate-personal-information-in-client/pcxtp4rx7g1t/26#}}&lt;/ref&gt; His [[ErdÅs number]] is 3 (by two different co-authors).

==Education and career==
Hewitt obtained his [[PhD]] in mathematics at MIT in 1971, under the supervision of [[Seymour Papert]], [[Marvin Minsky]], and [[Mike Paterson]]. Hewitt started his employment at MIT in 1971.&lt;ref&gt;{{cite web|author = MIT News Office |title = Quarter Century Club inducts 73 new members |url = http://web.mit.edu/newsoffice/1996/qcc-0410.html| date = April 10, 1996| accessdate = 2007-06-19}}&lt;/ref&gt; He retired from the faculty of the MIT Department of Electrical Engineering and Computer Science during the 1999-2000 school year.&lt;ref&gt;{{cite web|author=John V. Guttag|title= MIT Reports to the President 1999â2000 - Department of Electrical Engineering and Computer Science| url=http://web.mit.edu/annualreports/pres00/11.05.html|year = 2000 | accessdate = 2007-06-19}}&lt;/ref&gt; Among the doctoral students that Hewitt supervised during his time at MIT are Professor [[Gul Agha (computer scientist)|Gul Agha]], Dr. Russell Atkinson, Dr. [[Henry Baker (computer scientist)|Henry Baker]], Dr. Gerald Barber, Dr. Peter Bishop, Dr. Gene Ciccarelli, Professor [[William Clinger (computer scientist)|William Clinger]], Dr. Peter de Jong, Dr. Michael Freiling, Dr. Irene Greif, Dr. Kenneth Kahn, Dr. William Kornfeld  and Professor [[Akinori Yonezawa]].&lt;ref&gt;{{cite web|author = Carl Hewitt |title= Academic Biography of Carl Hewitt|url = http://biography.carlhewitt.info|year= 2007|accessdate = 2007-11-22}}&lt;/ref&gt;

From September 1989 to August 1990, Hewitt was the ''IBM Chair Visiting Professor'' in the Department of Computer Science at [[Keio University]] in Japan.&lt;ref&gt;{{cite web|author = Ryuichiro Ohyama |title= Department of Computer Science-Recent and Current Visiting Professors|url = http://www.cs.keio.ac.jp/DCS/Visit.html|year= 1991|accessdate = 2007-06-19}}&lt;/ref&gt;

== Research ==
Hewitt's research has spanned a range of topics generally concerning the Procedural Embedding of Knowledge.

===Planner===
{{Main|Planner (programming language)}}
The Planner language was developed during the late 1960s as part of Hewitt's doctoral research in MIT's Artificial Intelligence Laboratory. Hewitt's work on Planner introduced the notion of the &quot;procedural embedding of knowledge&quot;,&lt;ref&gt;Carl Hewitt. ''Procedural Embedding of Knowledge In Planner'' IJCAI. 1971.&lt;/ref&gt; which was an alternative to the logical approach to knowledge encoding for [[artificial intelligence]] pioneered by [[John McCarthy (computer scientist)|John McCarthy]].&lt;ref&gt;Philippe Rouchy, [http://www.teamethno-online.org.uk/Issue2/Rouchy.pdf Aspects of PROLOG History: Logic Programming and Professional Dynamics], TeamEthno-Online Issue 2, June 2006, 85-100.&lt;/ref&gt; Planner has been described as &quot;extremely ambitious&quot;.&lt;ref name=&quot;sussman1998&quot;&gt;{{cite journal|doi=10.1023/A:1010079421970|last=Sussman|first=Gerald Jay|coauthors=Guy L. Steele|year=1998|title=The First Report on Scheme Revisited |journal=Higher-Order and Symbolic Computation|publisher=Kluwer Academic Publishers|location=Boston|volume=11|pages=399â404|url=http://www.brics.dk/~hosc/local/HOSC-11-4-pp399-404.pdf|accessdate=2009-01-03|issue=4}}&lt;/ref&gt; A subset of Planner called Micro-Planner was implemented at MIT by [[Gerry Sussman]], [[Drew McDermott]], [[Eugene Charniak]] and [[Terry Winograd]]&lt;ref name=&quot;SussmanWinograd&quot;&gt;Gerry Sussman and Terry Winograd. ''[http://hdl.handle.net/1721.1/5833 Micro-planner Reference Manual]'' AI Memo No, 203, MIT Project MAC, July 1970.&lt;/ref&gt; and was used in Winograd's famous [[SHRDLU]] program,&lt;ref name=&quot;Winograd&quot;&gt;Terry Winograd. ''[http://hdl.handle.net/1721.1/7095 Procedures as a Representation for Data in a Computer Program for Understanding Natural Language]''  MIT AI TR-235.  January 1971.&lt;/ref&gt; Charniak's natural language story understanding work,&lt;ref name=&quot;MinskyPapert&quot;&gt;Marvin Minsky and Seymour Papert. âProgress Report on Artificial Intelligenceâ MIT AI Memo 252.  1971.&lt;/ref&gt; and L. Thorne McCarty's work on legal reasoning.&lt;ref&gt;L. Thorne McCarty. &quot;Reflections on TAXMAN: An Experiment on Artificial Intelligence and Legal Reasoning&quot; Harvard Law Review. Vol. 90, No. 5, March 1977&lt;/ref&gt; Planner was almost completely implemented in Popler&lt;ref name=&quot;Davies&quot;&gt;Julian Davies. Popler 1.6 Reference Manual University of Edinburgh, TPU Report No. 1, May 1973.&lt;/ref&gt; by Julian Davies at Edinburgh, where (together with earlier work at Edinburgh on Pico-Planner by Bruce Anderson&lt;ref&gt;Bruce Anderson. Documentation for LIB PICO-PLANNER School of Artificial Intelligence, Edinburgh University. 1972.&lt;/ref&gt;)  it influenced [[Robert Kowalski]] and [[Patrick J. Hayes|Pat Hayes]] in the development of ideas that later became [[Prolog]].&lt;ref name=&quot;middlehistory&quot; /&gt;&lt;ref&gt;Robert Kowalski Predicate Logic as Programming Language IFIP'74.&lt;/ref&gt; Planner also influenced the later development of other AI research languages such as Muddle and Conniver,&lt;ref name=&quot;sussman1998&quot;/&gt; as well as the [[Smalltalk]] object-oriented programming language.&lt;ref name=&quot;kay2003&quot;&gt;{{cite web|url=http://www.purl.org/stefan_ram/pub/doc_kay_oop_en|title=E-Mail of 2003-07-23|last=Kay|first=Alan|coauthors=Stefan Ram|date=2003-07-23|work=Dr. Alan Kay on the Meaning of âObject-Oriented Programmingâ|accessdate=2009-01-03}}&lt;/ref&gt;  Planner's seminal influence has been cited by [[John McCarthy (computer scientist)|John McCarthy]]&lt;ref&gt;John McCarthy. Sterile Containers www.ai.sri.com/~rkf/designdoc/sterile.ps September 8, 2000.&lt;/ref&gt; and [[Nils Nilsson (researcher)|Nils Nilsson]].&lt;ref&gt;Nils Nilsson Artificial Intelligence: A New Synthesis San Francisco: Morgan Kaufmann, 1998.&lt;/ref&gt;

Hewitt's own work on Planner continued with [[MDL (programming language)|Muddle]] (later called MDL), which was developed in the early 1970s by Sussman, Hewitt, Chris Reeve, and David Cressey as a stepping-stone towards a full implementation of Planner. Muddle was implemented as an extended version of [[Lisp (programming language)|Lisp]], and introduced several features that were later adopted by Conniver, Lisp Machine Lisp, and Common Lisp.&lt;ref name=&quot;sussman1998&quot;/&gt; However, in late 1972 Hewitt abruptly halted his development of the Planner design in his thesis, when he and his graduate students invented the [[Actor model]] of computation.

=== Actor model ===
{{Main|Actor model}}
Hewitt's work on the [[Actor model]] of computation has spanned over 30 years, beginning with the introduction of the model in a 1973 paper authored by Hewitt, Peter Bishop, and Richard Steiger,&lt;ref name=&quot;hewitt1973&quot;&gt;{{cite journal|author=Carl Hewitt|coauthors=Peter Bishop and Richard Steiger|title=A Universal Modular Actor Formalism for Artificial Intelligence|publisher=IJCAI|year=1973}}&lt;/ref&gt; and including new results on Actor model semantics published as recently as 2006.&lt;ref name=&quot;hewitt2006&quot;&gt;Carl Hewitt [http://www.pcs.usp.br/~coin-aamas06/10_commitment-43_16pages.pdf ''What is Commitment? Physical, Organizational, and Social'']  COIN@AAMAS.  April 27, 2006.&lt;/ref&gt; Much of this work was carried out in collaboration with students in Hewitt's Message Passing Semantics Group at MIT's Artificial Intelligence Lab.&lt;ref name=&quot;miller&quot;&gt;{{cite web|author=Mark S. Miller|title = Actors: Foundations for Open Systems| url=http://www.erights.org/history/actors.html |accessdate=2007-06-20}}&lt;/ref&gt;

[[Gerry Sussman|Sussman]] and [[Guy L. Steele|Steele]] developed the [[Scheme programming language]] in an effort to gain a better understanding of the Actor model. However, their Scheme interpreter was not capable of fully implementing the Actor model because Actor customers cannot be implemented as lambda calculus continuations and Actors can change their local state in a way that is impossible in the lambda calculus &lt;ref name=&quot;Actors&quot; /&gt;&lt;ref&gt;{{cite journal|doi=10.1023/A:1010079421970|last=Sussman|first=Gerald Jay|coauthors=Guy L. Steele|year=1998|title=The First Report on Scheme Revisited |journal=Higher-Order and Symbolic Computation|publisher=Kluwer Academic Publishers|location=Boston|volume=11|pages=399â404|url=http://www.brics.dk/~hosc/local/HOSC-11-4-pp399-404.pdf|issue=4}}&lt;/ref&gt; A number of programming languages were developed to specifically implement the Actor model, such as  ACT-1,&lt;ref&gt;Henry Lieberman, &quot;[http://web.media.mit.edu/%7Elieber/Lieberary/OOP/Act-1/Concurrent-OOP-in-Act-1.html Concurrent Object-Oriented Programming in Act 1]&quot;, In Object-Oriented Concurrent Programming, A. Yonezawa and M. Tokoro, eds., MIT Press, 1987.&lt;/ref&gt; [[SALSA programming language|SALSA]],&lt;ref&gt;C. Varela and G. Agha. [http://www.cs.rpi.edu/%7Ecvarela/oopsla2001.pdf Programming Dynamically Reconfigurable Open Systems with SALSA]. OOPSLA 2001 Intriguing Technology Track. ACM SIGPLAN Notices, 36(12):20-34, December 2001.&lt;/ref&gt; Caltrop,&lt;ref&gt;{{cite journal|author=Johan Eker|coauthors=JÃ¶rn W. Janneck|title= An introduction to the Caltrop actor language |url = http://embedded.eecs.berkeley.edu/caltrop/docs/CaltropWhitePaper.pdf|format=PDF| accessdate = 2007-06-20}}&lt;/ref&gt; [[E programming language|E]]&lt;ref name=&quot;miller2006&quot;/&gt; and ActorScript.&lt;ref name=&quot;ActorScript&quot;/&gt; The Actor model also influenced the development of the [[pi calculus|&amp;pi;-calculus]].&lt;ref&gt;Robin Milner Elements of interaction: Turing award lecture CACM. January 1993.&lt;/ref&gt; (See [[Actor model and process calculi history]].)

===Client cloud computing===
In recent years, Hewitt's research has concentrated on the area of client [[cloud computing]] in which computing is performed in client clouds and information is stored encrypted in data centers so that it can be decrypted only using the client's [[Public-key cryptography|private key]].  His work on privacy aspects has been featured in [[O'Reilly Media]].&lt;ref&gt;{{cite news | author=Carl Hewitt |title= ''Is intimate personal information a toxic asset in cloud data centers?'' | publisher= O'Reilly Radar | url= http://radar.oreilly.com/2009/08/is-intimate-personal-informati-1.html | date = August 17, 2009}}&lt;/ref&gt;  He has also done extensive work on client cloud information integration.&lt;ref name=&quot;hewitt10&quot;/&gt;&lt;ref&gt;[http://knol.google.com/k/carl-hewitt-see-http-carlhewitt-info/intimate-personal-information-in-client/pcxtp4rx7g1t/26# Intimate personal information in client-cloud aggregator datacenters is headed for strong government regulation]&lt;/ref&gt;

==Selected works==
*Carl Hewitt (1969). [https://dspace.mit.edu/handle/1721.1/6171 ''PLANNER: A Language for Proving Theorems in Robots''] IJCAI'69.
*Carl Hewitt, Peter Bishop and Richard Steiger (1973). ''A Universal Modular Actor Formalism for Artificial Intelligence''  IJCAI'73.
*Carl Hewitt and [[Henry Baker (computer scientist)|Henry Baker]] (1977a). ''Laws for Communicating Parallel Processes'' IFIP'77.
*Carl Hewitt and [[Henry Baker (computer scientist)|Henry Baker]] (1977b). [https://dspace.mit.edu/handle/1721.1/6687 ''Actors and Continuous Functionals'']  Proceeding of IFIP Working Conference on Formal Description of Programming Concepts. August 1&amp;ndash;5, 1977.
*William Kornfeld and Carl Hewitt (1981). [https://dspace.mit.edu/handle/1721.1/5693 ''The Scientific Community Metaphor'']  IEEE Transactions on Systems, Man, and Cybernetics. January 1981.
* Henry Lieberman and Carl E. Hewitt (1983). [http://citeseer.ist.psu.edu/lieberman83realtime.html ''A Real-Time Garbage Collector Based on the Lifetimes of Objects''] Communications of the ACM, 26(6).
*Carl Hewitt (1985). ''The Challenge of Open Systems'' Byte Magazine. April 1985. (Reprinted in ''The foundation of artificial intelligenceâa sourcebook'' Cambridge University Press. 1990

==See also==
* [[Scientific community metaphor]]

==References==
{{reflist|2}}

==External links==
* {{official|http://www.carlhewitt.info}}
* {{twitter|CarlHewitt}}
* {{DBLP|Hewitt:Carl|h}}
* [http://wh-stream.stanford.edu/MediaX/CarlHewittEdit.mp4 Wittgenstein versus GÃ¶del on the Foundations of Logic] Stanford hour-long video with slides [http://www.slideshare.net/carlehewitt/incompleteness-theorems-logical-necessity-of-inconcistency here] on April 23, 2010 with participants including Solomon Feferman, Jeremy Forth, Grigori Mints, and Charles Petrie.
* [http://ee380.stanford.edu/cgi-bin/videologger.php?target=110112-ee380-300.asx How to Program the Many Cores for Inconsistency Robustness] Stanford hour-long video with slides [http://www.slideshare.net/carlehewitt/how-to-program-the-many-core-for-inconsistency-robustness here] on January 12, 2011 with participants including Dennis Allison, Douglas Crockford, and Andy Freeman

&lt;!-- Metadata: see [[Wikipedia:Persondata]] --&gt;
{{Persondata
|NAME= Hewitt, Carl
|ALTERNATIVE NAMES=
|SHORT DESCRIPTION= [[United States|American]] mathematician and computer scientist 
|DATE OF BIRTH= not listed at request of Carl Hewitt
|PLACE OF BIRTH= not listed at request of Carl Hewitt
|DATE OF DEATH=
|PLACE OF DEATH=
}}
{{DEFAULTSORT:Hewitt, Carl}}
&lt;!-- Categories --&gt;
[[Category:Year of birth missing (living people)]]
[[Category:Living people]]
[[Category:American computer programmers]]
[[Category:American computer scientists]]
[[Category:American educators]]
[[Category:American mathematicians]]
[[Category:Formal methods people]]
[[Category:Massachusetts Institute of Technology faculty]]
[[Category:Keio University faculty]]
[[Category:American technology writers]]

[[de:Carl Hewitt]]
[[ht:Carl Hewitt]]
[[ja:ã«ã¼ã«ã»ãã¥ã¼ã¤ãã]]</rev></revisions></page></pages></query></api>
