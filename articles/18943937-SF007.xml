<?xml version="1.0"?><api><query><pages><page pageid="18943937" ns="0" title="Emulator"><revisions><rev xml:space="preserve">{{two other uses|emulators in [[computer science]]|a line of digital musical instruments|E-mu Emulator||Emulation (disambiguation)}}
[[Image:DOSBox screenshot.png|thumb|275px|[[DOSBox]] emulates the [[command-line interface]] of DOS.]]
In [[computing]], an '''emulator''' is hardware or software or both that duplicates (or ''emulates'') the functions of a first computer system in a different second computer system, so that the behavior of the second system closely resembles the behavior of the first system. This focus on exact reproduction of external behavior is in contrast to some other forms of [[computer simulation]], in which an abstract model of a system is being simulated.  For example, a computer simulation of a hurricane or a chemical reaction is not emulation.

==Emulators in computing==
[[Image:Basilisk snapshot9.png|thumb|left|Basilisk II emulates a Macintosh 68k using interpretation code and dynamic recompilation.]]
'''Emulation''' refers to the ability of a [[computer program]] in an electronic device to '''emulate''' (imitate) another program or device. Many [[Computer printer|printers]], for example, are designed to emulate [[Hewlett-Packard]] [[LaserJet]] printers because so much software is written for HP printers. If a non-HP printer emulates an HP printer, any software written for a real HP printer will also run in the non-HP printer emulation and produce equivalent printing.

A '''hardware emulator''' is an emulator which takes the form of a hardware device. Examples include the DOS-compatible card installed in some old-world Macintoshes like Centris 610 or Performa 630 that allowed them to run PC programs and [[Field-programmable gate array|FPGA]]-based [[hardware emulation|hardware emulator]]s.

In a theoretical sense, the [[Church-Turing thesis]] implies that any operating environment can be emulated within any other.  However, in practice, it can be quite difficult, particularly when the exact behavior of the system to be emulated is not documented and has to be deduced through [[reverse engineering]].  It also says nothing about timing constraints; if the emulator does not perform as quickly as the original hardware, the emulated software may run much more slowly than it would have on the original hardware, possibly triggering time interrupts that alter performance.

==Emulation in preservation==
Emulation is a strategy in [[digital preservation]] to combat [[obsolescence]]. Emulation focuses on recreating an original computer environment, which can be time-consuming and difficult to achieve, but valuable because of its ability to maintain a closer connection to the authenticity of the digital object.&lt;ref&gt;{{Cite web
|url=http://www.kb.nl/hrd/dd/dd_projecten/projecten_emulatiewatis-en.html
|title=What is emulation?
|accessdate=2007-12-11
|work=Koninklijke Bibliotheek}}&lt;/ref&gt;

Emulation addresses the original [[computer hardware|hardware]] and [[computer software|software]] environment of the digital object, and recreates it on a current machine.&lt;ref&gt;van der Hoeven, Jeffrey, Bram Lohman, and Remco Verdegem.  &quot;Emulation for Digital 	Preservation in Practice: The Results.&quot;  The International Journal of Digital Curation 2.2 	(2007): 123-132.&lt;/ref&gt;  The emulator allows the user to have access to any kind of [[application software|application]] or [[operating system]] on a current [[computing platform|platform]], while the [[computer software|software]] runs as it did in its original environment.&lt;ref name=&quot;Muira, Gregory 2007&quot;&gt;Muira, Gregory.  &quot; Pushing the Boundaries of Traditional Heritage Policy: maintaining long-term 	access to multimedia content.&quot;  IFLA Journal 33 (2007): 323-326.&lt;/ref&gt;  Jeffery Rothenberg, an early proponent of emulation as a [[digital preservation]] strategy states, &quot;the ideal approach would provide a single extensible, long-term solution that can be designed once and for all and applied uniformly, automatically, and in synchrony (for example, at every refresh cycle) to all types of documents and media&quot;.&lt;ref&gt;{{Cite web
|author=Rothenberg, Jeffrey
|title=&quot;Criteria for an Ideal Solution.&quot; Avoiding Technological Quicksand: Finding a Viable Technical Foundation for Digital Preservation.
|location=Washington, DC
|year=1998
|work=Council on Library and Information Resources
|accessdate=2008-03-08|url=http://www.clir.org/pubs/reports/rothenberg/contents.html}}&lt;/ref&gt;  He further states that this should not only apply to out of date systems, but also be upwardly mobile to future unknown systems.&lt;ref&gt;Rothenberg, Jeffrey.  &quot;The Emulation Solution.&quot;  Avoiding Technological Quicksand: Finding a Viable Technical Foundation for Digital Preservation. Washington, DC: Council on Library and Information Resources, 1998.  Council on Library and Information Resources. 2008. 28 Mar. 2008 	http://www.clir.org/pubs/reports/rothenberg/contents.html&lt;/ref&gt; Practically speaking, when a certain application is released in a new version, rather than address [[computer compatibility|compatibility]] issues and [[data migration|migration]] for every digital object created in the previous version of that [[application software|application]], one could create an emulator for the [[application software|application]], allowing access to all of said digital objects.

===Benefits===
* Emulators maintain the original look, feel, and behavior of the digital object, which is just as [[important]] as the digital data itself.&lt;ref&gt;Muira, Gregory.  &quot; Pushing the Boundaries of Traditional Heritage Policy: maintaining long-term access to multimedia content.&quot;  IFLA Journal 33 (2007): 323-326.&lt;/ref&gt;
* Despite the original cost of developing an emulator, it may prove to be the more cost efficient solution over time.&lt;ref&gt;Granger, Stewart. Digital Preservation &amp; Emulation: from theory to practice. Proc. of the ichim01 Meeting, vol. 2, 3 -7 Sept. 2001.  Milano, Italy. 	Toronto: Archives and Museum Informatics, University of Toronto, 2001.  28 Mar. 2008 http://www.leeds.ac.uk/cedars/pubconf/papers/ichim01SG.html&lt;/ref&gt;
* Reduces [[wage labour|labor]] hours, because rather than continuing an ongoing task of continual [[data migration]] for every digital object, once the library of past and present [[operating systems]] and [[application software]] is established in an emulator, these same technologies are used for every document using those [[computing platform|platforms]].&lt;ref name=&quot;Muira, Gregory 2007&quot;/&gt;
* Many emulators have already been developed and released under [[GNU General Public License]] through the [[open source]] environment, allowing for wide scale collaboration.&lt;ref&gt;van der Hoeven, Jeffrey, Bram Lohman, and Remco Verdegem.  &quot;Emulation for Digital Preservation in Practice: The Results.&quot;  The International Journal of Digital Curation 2.2 (2007): 123-132.&lt;/ref&gt;
* Emulators allow video games exclusive to one system to be played on another. For example, a [[PlayStation 2]] exclusive [[video game]] could (in theory) be played on a [[Personal computer|PC]] or [[Xbox 360]] using an emulator.

===Obstacles===
* [[Intellectual property]] - Many technology vendors implemented non-standard features during program development in order to establish their niche in the market, while simultaneously applying ongoing upgrades to remain competitive.  While this may have advanced the technology industry and increased vendorâs [[market share]], it has left users lost in a preservation nightmare with little supporting documentation due to the proprietary nature of the hardware and software.&lt;ref&gt;Granger, Stewart.  &quot;Emulation as a Digital Preservation Strategy.&quot;  D-Lib Magazine  6.19 (2000). 	29 Mar 2008 http://www.dlib.org/dlib/october00/granger/10granger.html&lt;/ref&gt;
* [[Copyright]] laws are not yet in effect to address saving the documentation and specifications of proprietary software and hardware in an emulator module.&lt;ref&gt;Rothenberg, Jeffrey.  &quot;The Emulation Solution.&quot;  Avoiding Technological Quicksand: Finding a Viable Technical Foundation for Digital Preservation.  Washington, DC: Council on Library and Information Resources, 1998. Council on Library and Information Resources. 2008. 28 Mar. 2008&lt;/ref&gt;

==Emulators in new media art==
Because of its primary use of digital formats, [[new media art]] relies heavily on emulation as a preservation strategy. Artists such as [[Cory Arcangel]] specialize in resurrecting obsolete technologies in their artwork and recognize the importance of a decentralized and deinstitutionalized process for the preservation of digital culture.

In many cases, the goal of emulation in new media art is to preserve a digital medium so that it can be saved indefinitely and reproduced without error, so that there is no reliance on hardware that ages and becomes obsolete. The paradox is that the emulation and the emulator have to be made to work on future computers.&lt;ref&gt;{{Cite web|url=http://www.variablemedia.net/e/echoes/index.html |title=Echoes of Art: Emulation as preservation strategy |accessdate=2007-12-11 }}&lt;/ref&gt;

==Types of emulators==
[[Image:emu running emu.jpg|thumb|left|Windows XP running an [[Acorn Archimedes]] emulator, which is in turn running a [[Sinclair ZX Spectrum]] emulator.]]
Most emulators just emulate a hardware architectureâif operating system firmware or software is required for the desired software, it must be provided as well (and may itself be emulated). Both the OS and the software will then be [[interpreter (computer software)|interpreted]] by the emulator, rather than being run by native hardware. Apart from this interpreter for the emulated binary [[machine language|machine's language]], some other hardware (such as input or output devices) must be provided in virtual form as well; for example, if writing to a specific memory location should influence what is displayed on the screen, then this would need to be emulated.

While emulation could, if taken to the extreme, go down to the atomic level, basing its output on a simulation of the actual circuitry from a virtual power source, this would be a highly unusual solution. Emulators typically stop at a simulation of the documented hardware specifications and digital logic. Sufficient emulation of some hardware platforms requires extreme accuracy, down to the level of individual clock cycles, undocumented features, unpredictable analog elements, and implementation bugs. This is particularly the case with classic home computers such as the [[Commodore 64]], whose software often depends on highly sophisticated low-level programming tricks invented by game programmers and the [[demoscene]].

In contrast, some other platforms have had very little use of direct hardware addressing. In these cases, a simple [[compatibility layer]] may suffice. This translates system calls for the emulated system into system calls for the host system e.g., the Linux compatibility layer used on *BSD to run closed source Linux native software on FreeBSD, NetBSD and OpenBSD.

Developers of software for [[embedded system]]s or [[video game console]]s often design their software on especially accurate emulators called [[Simulation#Computer science|simulators]] before trying it on the real hardware. This is so that software can be produced and tested before the final hardware exists in large quantities, so that it can be tested without taking the time to copy the program to be debugged at a low level and without introducing the side effects of a [[debugger]].  In many cases, the simulator is actually produced by the company providing the hardware, which theoretically increases its accuracy.

Math coprocessor emulators allow programs compiled with math instructions to run on machines that don't have the coprocessor installed, but the extra work done by the CPU may slow the system down.  If a math coprocessor isn't installed or present on the CPU, when the CPU executes any coprocessor instruction it will make a determined interrupt (coprocessor not available), calling the math emulator routines. When the instruction is successfully emulated, the program continues executing.

==Structure of an emulator==
{{Refimprove|article's section named &quot;Structure of an emulator&quot;|date=June 2008}}
Typically, an emulator is divided into [[module (computing)|modules]] that correspond roughly to the emulated computer's subsystems.
Most often, an emulator will be composed of the following modules:
* a CPU emulator or CPU simulator (the two terms are mostly interchangeable in this case)
* a memory subsystem module
* various I/O devices emulators

Buses are often not emulated, either for reasons of performance or simplicity, and virtual peripherals communicate directly with the CPU or the memory subsystem.

===Memory subsystem===
It is possible for the memory subsystem emulation to be reduced to simply an array of elements each sized like an emulated word; however, this model falls very quickly as soon as any location in the computer's logical memory does not match [[physical memory]].

This clearly is the case whenever the emulated hardware allows for advanced memory
management (in which case, the [[Memory management unit|MMU]] logic can be embedded in the memory emulator, made a module of its own, or sometimes integrated into the CPU simulator).

Even if the emulated computer does not feature an MMU, though, there are usually other factors that break the equivalence between logical and physical memory: many (if not most) architecture offer [[memory-mapped I/O]]; even those that do not almost invariably have a block of logical memory mapped to [[Read-only memory|ROM]], which means that the memory-array module must be discarded if the read-only nature of ROM is to be emulated. Features such as [[bank switching]] or [[memory segment|segmentation]] may also complicate memory emulation.

As a result, most emulators implement at least two procedures for writing to and reading from logical memory, and it is these procedures' duty to map every access to the correct location of the correct object.

On a [[base-limit addressing]] system where memory from address ''0'' to address ''ROMSIZE-1'' is read-only memory, while the rest is RAM, something along the line of the following procedures would be typical:
&lt;source lang=&quot;c&quot;&gt;
void WriteMemory(word Address, word Value) {
    word RealAddress;
    RealAddress = Address + BaseRegister;
    if ((RealAddress &lt; LimitRegister) &amp;&amp;
        (RealAddress &gt; ROMSIZE)) {
        Memory[RealAddress] = Value;
    } else {
        RaiseInterrupt(INT_SEGFAULT);
    }
}
&lt;/source&gt;

&lt;source lang=&quot;c&quot;&gt;
word ReadMemory(word Address) {
    word RealAddress;
    RealAddress=Address+BaseRegister;
    if (RealAddress &lt; LimitRegister) {
        return Memory[RealAddress];
    } else {
        RaiseInterrupt(INT_SEGFAULT);
        return NULL;
    }
}
&lt;/source&gt;

===CPU simulator===
The CPU simulator is often the most complicated part of an emulator. Many emulators are written using &quot;pre-packaged&quot; CPU simulators&lt;!--- (see [[Emulator#External links]]) ---&gt;, in order to concentrate on good and efficient emulation of a specific machine.

The simplest form of a CPU simulator is an [[interpreter (computing)|interpreter]], which is a computer program that follows the execution flow of the emulated program code and, for every machine code instruction encountered, executes operations on the host processor that are semantically equivalent to the original instructions.

This is made possible by assigning a [[Variable (programming)|variable]] to each [[processor register|register]] and [[Flag (computing)|flag]] of the simulated CPU. The logic of the simulated CPU can then more or less be directly translated into software algorithms, creating a software re-implementation that basically mirrors the original hardware implementation.

The following example illustrates how CPU simulation can be accomplished by an interpreter. In this case, interrupts are checked-for before every instruction executed, though this behavior is rare in real emulators for performance reasons.
&lt;source lang=&quot;c&quot;&gt;
void Execute(void) {
    if (Interrupt != INT_NONE) {
        SuperUser = TRUE;
        WriteMemory(++StackPointer, ProgramCounter);
        ProgramCounter = InterruptPointer;
    }
    switch (ReadMemory(ProgramCounter++)) {
        /*
         * Handling of every valid instruction
         * goes here...
         */
        default:
        Interrupt = INT_ILLEGAL;
    }
}
&lt;/source&gt;
Interpreters are very popular as computer simulators, as they are much simpler to implement than more time-efficient alternative solutions, and their speed is more than adequate for emulating computers of more than roughly a decade ago on modern machines.

However, the speed penalty inherent in interpretation can be a problem when emulating computers whose processor speed is on the same [[order of magnitude]] as the host machine. Until not many years ago, emulation in such situations was considered completely impractical by many.

What allowed breaking through this restriction were the advances in [[dynamic recompilation]] techniques. Simple ''a priori'' translation of emulated program code into code runnable on the host architecture is usually impossible because of several reasons:
* code may be [[self-modifying code|modified while in RAM]], even if it is modified only by the emulated operating system when loading the code (for example from disk)
* there may not be a way to reliably distinguish [[data]] (which should not be translated) from [[executable]] [[code]].

Various forms of dynamic recompilation, including the popular [[JIT compiler|Just In Time compiler (JIT)]] technique, try to circumvent these problems by waiting until the processor control flow jumps into a location containing untranslated code, and only then (&quot;just in time&quot;) translates a block of the code into host code that can be executed.
The translated code is kept in a ''code [[cache]]'', and the original code is not lost or affected; this way, even data segments can be (meaninglessly) translated by the recompiler, resulting in no more than a waste of translation time.

Speed may not be desirable as some older games were not designed with the speed of faster computers in mind. A game designed for a 30&amp;nbsp;MHz PC with a level timer of 300 game seconds might only give the player 30 seconds on a 300&amp;nbsp;MHz PC. Other programs, such as some DOS programs, may not even run on faster computers. Particularly when emulating computers which were &quot;closed-box&quot;, in which changes to the core of the system were not typical, software may use techniques that depend on specific characteristics of the computer it ran on (i.e. its CPU's speed) and thus precise control of the speed of emulation is important for such applications to be properly emulated.

===I/O===
Most emulators do not, as mentioned earlier, emulate the main [[system bus]]; each I/O device is thus often treated as a special case, and no consistent interface for virtual peripherals is provided.

This can result in a performance advantage, since each I/O module can be tailored to the characteristics of the emulated device; designs based on a standard, unified I/O [[application programming interface|API]] can, however, rival such simpler models, if well thought-out, and they have the additional advantage of &quot;automatically&quot; providing a plug-in service through which third-party virtual devices can be used within the emulator.

A unified I/O API may not necessarily mirror the structure of the real hardware bus: bus design is limited by several electric constraints and a need for hardware [[parallel programming|concurrency]] &lt;!--- although this page talks specifically about *programming*, while here I really refer to the concurrency that is inherent in hardware ---&gt; management that can mostly be ignored in a software implementation.

Even in emulators that treat each device as a special case, there is usually a common basic infrastructure for:
* managing [[interrupt]]s, by means of a procedure that sets flags readable by the CPU simulator whenever an interrupt is raised, allowing the virtual CPU to &quot;poll for (virtual) interrupts&quot;
* writing to and reading from physical memory, by means of two procedures similar to the ones dealing with logical memory (although, contrary to the latter, the former ''can'' often be left out, and direct references to the memory array be employed instead)

== Emulation versus simulation ==
The word &quot;emulator&quot; was coined in 1963 at IBM&lt;ref&gt;{{cite book |last =Pugh|first = Emerson W.|title = Building IBM: Shaping an Industry and Its Technology |publisher = MIT|year = 1995 |isbn = 0-262-16147-8|page = 274}}&lt;/ref&gt; during development of the NPL ([[IBM 360]]) product line, using a &quot;new combination of software, microcode, and hardware&quot;.&lt;ref&gt;{{Cite book|last =Pugh|first = Emerson W.|coauthors = et al.|title = IBM's 360 and Early 370 Systems |publisher = MIT|year = 1991|isbn = 0-262-16123-0}} pages 160-161&lt;/ref&gt;
They discovered that using [[microcode]] hardware instead of software simulation, to execute programs written for earlier IBM computers, dramatically speeded up simulation.  Earlier in 1957, IBM provided the IBM 709 computer with an [[Interpreter (computing)|interpreter]] program (software) to execute legacy programs written for the [[IBM 704]] to run on the [[IBM 709]] and later on the IBM 7090&lt;ref&gt;&quot;7090 Data Processing System&quot; - &quot;Compatibility feature for IBM 704 programs&quot; 
[http://www-03.ibm.com/ibm/history/exhibits/mainframe/mainframe_PP7090B.html subsection]&lt;/ref&gt;  In 1963, when microcode was first used to speed up this simulation process, IBM engineers coined the term &quot;emulator&quot; to describe the concept.  

It has recently become common to use the word &quot;emulate&quot; in the context of software. However, before 1980, &quot;emulation&quot; referred only to emulation with a hardware or microcode assist, while &quot;simulation&quot; referred to pure software emulation.&lt;ref&gt;S. G. Tucker, &quot;Emulation of Large Systems&quot;, Communications of the ACM (CACM) Vol. 8, No. 12, Dec. 1965, pp. 753-761&lt;/ref&gt; For example, a computer specially built for running programs designed for another architecture is an emulator. In contrast, a simulator could be a program which runs on a PC, so that old Atari games can be simulated on it. Purists continue to insist on this distinction, but currently the term &quot;emulation&quot; often means the complete imitation of a machine executing binary code.

==Logic simulators==
{{Main|Logic simulation}}
Logic simulation is the use of a computer program to simulate the operation of a digital circuit such as a processor.  This is done after a digital circuit has been designed in logic equations, but before the circuit is fabricated in hardware.

==Functional simulators==
{{Main|High level emulation}}
Functional simulation is the use of a computer program to simulate the execution of a second computer program written in symbolic [[assembly language]] or [[compiler]] language, rather than in binary [[machine code]].  By using a functional simulator, programmers can execute and trace selected sections of source code to search for programming errors (bugs), without generating binary code.  This is distinct from simulating execution of binary code, which is software emulation.

The first functional simulator was written by [[Autonetics]] about 1960 for testing assembly language programs for later execution in military computer [[D-17B]].  This made it possible for flight programs to be written, executed, and tested before D-17B computer hardware had been built.  Autonetics also programmed a functional simulator for testing flight programs for later execution in the military computer [[D-37C]].

==Video game console emulators==
{{Main|Video game console emulator}}

Video game console emulators are programs that allow a computer or modern console to emulate a video game console. They are most often used to play older video games on personal computers and modern video game consoles, but they are also used to translate games into other languages, to modify existing games, and in the development process of home brew demos and new games for older systems. The [[internet]] has helped in the spread of console emulators, as most - if not all - would be unavailable for sale in retail outlets.  Examples of console emulators that have been released in the last 2 decades are: [[Dolphin (emulator)|Dolphin]], [[Zsnes]], [[Kega Fusion]], [[Desmume]], [[Epsxe]], [[Project64]], [[Visual Boy Advance]], [[NullDC]] and [[Nestopia]].
&lt;!--
To avoid clogging up the article try to keep this to one emulator per platform - and that isn't carte blanche to add every emulated platform either!
--&gt;

==Terminal emulators==
{{Main|Terminal emulator}}
Terminal emulators are software programs that provide modern computers and devices interactive access to applications running on [[mainframe computer]] operating systems or other host systems such as [[HP-UX]] or [[OpenVMS]].  Terminals such as the [[IBM 3270]] or [[VT100]] and many others, are no longer produced as physical devices. Instead, software running on modern operating systems simulates a &quot;dumb&quot; terminal and is able to render the graphical and text elements of the host application, send keystrokes and process commands using the appropriate terminal protocol. Some terminal emulation applications include [[Attachmate|Attachmate Reflection]], [[List of IBM products|IBM Personal Communications]], [[Stromasys|Stromasys CHARON-VAX/AXP]] and [[Micro Focus]] Rumba.

==Legal controversy==
:''See article [[Console emulator#Legal issues|Console emulator â Legal issues]]''

==See also==
* The [[list of emulators]]
* The [[list of computer system emulators]]
* [[Computer simulation]] is the larger field of modeling real-world phenomenon (e.g. physics and economy) using computers.
* For rewriting a computer program into a different programming language or platform, see [[Porting]].
* [[Field-programmable gate array]]s (FPGAs)
* Other uses of the term &quot;emulator&quot; in the field of computer science:
** [[Console emulator]]
** [[Flash emulator]]
** [[Instruction set simulator]]
** [[Server emulator]]
** [[Terminal emulator]]
* [[Logic simulation]]
* [[High-level emulation|Functional simulation]]
* Translation:
** [[Binary translation]]

* [[Antenna emulator]]

* [[In-circuit emulator]] (ICE)
** [[Joint Test Action Group]]
** [[Background Debug Mode interface]]

* [[QEMU]]
* [[Q (emulator)]]
* [[Hardware emulation]]
* [[Hardware-assisted virtualization]]
* [[Virtual machine]]
* [[MAME]]
* [[MESS]]
* [[data migration]]
* [[backward compatibility]]
* [[forward compatibility]]

*[[Keeping Emulation Environments Portable]]

==References==
{{Reflist}}

==External links==
{{Wiktionary|emulate}}
{{Wiktionary|Emulator}}
* [http://emuwiki.com Emuwiki.com] is a repertory of emulators and their respective histories.
* {{dmoz|Computers/Emulators}}
&lt;!--===========================({{NoMoreLinks}})===============================
    | DO NOT ADD MORE LINKS TO THIS ARTICLE. WIKIPEDIA IS NOT A COLLECTION OF |
    | LINKS. If you think that your link might be useful, do not add it here, |
    | but put it on this article's discussion page first or submit your link  |
    | to the appropriate category at the Open Directory Project (www.dmoz.org)|
    | and link back to that category using the {{dmoz}} template.             |
    |                                                                         |
    |           Links that have not been verified WILL BE DELETED.            |
    |  See [[Wikipedia:External links]] and [[Wikipedia:Spam]] for details    |
    ===========================({{NoMoreLinks}})===============================--&gt;

[[Category:Emulation software| ]]

[[bg:ÐÐ¼ÑÐ»Ð°ÑÐ¾Ñ]]
[[ca:Emulador de codi]]
[[cs:EmulÃ¡tor]]
[[da:Emulator]]
[[de:Emulator]]
[[et:Emulaator]]
[[es:Emulador]]
[[fa:Ø¨Ø±Ø§Ø¨Ø±Ø³Ø§Ø²]]
[[fr:Ãmulation]]
[[ko:ìë®¬ë ì´í°]]
[[hr:Emulator]]
[[io:Emuleso]]
[[id:Emulator]]
[[ia:Emulator]]
[[it:Emulatore]]
[[he:×××××¦××]]
[[lt:Emuliatorius]]
[[hu:EmulÃ¡tor]]
[[nl:Emulator]]
[[ja:ã¨ãã¥ã¬ã¼ã¿]]
[[no:Emulator]]
[[nn:Emulator]]
[[pl:Emulator]]
[[pt:Emulador]]
[[ru:Ð­Ð¼ÑÐ»ÑÑÐ¸Ñ]]
[[simple:Emulator]]
[[sl:Emulator]]
[[sr:ÐÐ¼ÑÐ»Ð°ÑÐ¾Ñ]]
[[fi:Emulaattori]]
[[sv:Emulator]]
[[tr:ÃykÃ¼nme]]
[[uk:ÐÐ¼ÑÐ»ÑÑÑÑ]]
[[zh:ä»¿çå¨]]</rev></revisions></page></pages></query></api>
