<?xml version="1.0"?><api><query><pages><page pageid="46150" ns="0" title="Lua (programming language)"><revisions><rev xml:space="preserve">{{Infobox programming language
| name                   = Lua
| logo                   = [[File:Lua-logo-nolabel.svg|128px]]
|paradigm=[[Programming paradigm#Multi-paradigm programming language|Multi-paradigm]]: [[scripting language|scripting]], [[imperative programming|imperative]] ([[procedural programming|procedural]], [[prototype-based programming|prototype-based]] [[object-oriented programming|object-oriented]]), [[functional programming|functional]]
| year                   = 1993
| designer               = [[Roberto Ierusalimschy]]&lt;br /&gt; Waldemar Celes&lt;br /&gt; Luiz Henrique de Figueiredo
| developer              =
| latest_release_version = 5.1.4
| latest_release_date    = {{Start date|2008|08|22}}
| latest_preview_version = 5.2.0-beta
| latest preview date    = {{Start date|2011|07|08}}
| typing                 = [[Type system#Dynamic typing|dynamic]], [[Type system#Strong and weak typing|strong]], [[Duck typing|duck]]
| implementations='''Lua''', [http://luajit.org/ LuaJIT], [http://code.google.com/p/llvm-lua/ LLVM-Lua], [http://www.codeplex.com/Nua Nua], [http://code.google.com/p/lua-alchemy/ Lua Alchemy]
| dialects               = [http://metalua.luaforge.net/ Metalua], [http://idle.thomaslauer.com/ Idle], [http://www.nongnu.org/gsl-shell/ GSL Shell]
| influenced_by          = [[C++]], [[CLU (programming language)|CLU]], [[Modula-2|Modula]], [[Scheme (programming language)|Scheme]], [[SNOBOL]]
| influenced=[[Io (programming language)|Io]]&lt;!--2002--&gt;, [[GameMonkey Script|GameMonkey]]&lt;!--2003--&gt;, [[Squirrel (programming language)|Squirrel]]&lt;!--2003--&gt;, [[Falcon (programming language)|Falcon]]&lt;!--2003--&gt;, [[MiniD]]&lt;!--2006--&gt;
| operating_system       = [[Cross-platform]]
| license                = [[MIT License]]
| website                = {{URL|http://www.lua.org/}}
| wikibooks              =
}}

'''Lua''' ({{IPAc-en|icon|Ë|l|uË|É}} {{respell|LOO|É}}; from {{lang-pt|[[wikt:en:lua#Portuguese|lua]]}} meaning &quot;[[moon]]&quot;) is a [[Lightweight programming language|lightweight]] [[Programming paradigm#Multi-paradigm programming language|multi-paradigm]] [[programming language]] designed as a [[scripting language]] with [[Scripting language#Extension/embeddable_languages|extensible semantics]] as a primary goal. Lua has a relatively simple [[C (programming language)|C]] [[Application programming interface|API]] compared to other scripting languages.

== History ==
Lua was created in 1993 by [[Roberto Ierusalimschy]], Luiz Henrique de Figueiredo, and Waldemar Celes, members of the Computer Graphics Technology Group (Tecgraf) at the [[Pontifical Catholic University of Rio de Janeiro]], in [[Brazil]].

From 1977 until 1992, Brazil had a policy of strong [[trade barrier|trade barriers]] (called a 'market reserve') for computer hardware and software. In that atmosphere, Tecgraf's clients could not afford, either politically or financially, to buy customized software from abroad. Those reasons led Tecgraf to implement from scratch the basic tools it needed.&lt;ref name=hopl2007&gt;{{Cite book| last1 = Ierusalimschy | first1 = R.| author1-link = Roberto Ierusalimschy| last2 = Figueiredo| first2 = L. H. | last3 = Celes| first3 = W.| contribution = The evolution of Lua| contribution-url = http://www.lua.org/doc/hopl.pdf| doi = 10.1145/1238844.1238846| title = Proc. of ACM HOPL III| url = http://www.acm.org/sigs/sigplan/hopl| year = 2007| pages = 2â1â2â26| isbn = 978-1-59593-766-X}}&lt;/ref&gt;

Lua's historical 'father and mother' were data-description/configuration languages [[Simple Object Language|SOL]] (Simple Object Language) and [[Data-Entry Language|DEL]] (data-entry language).&lt;ref name=luahist2001&gt;{{cite web|url=http://www.lua.org/history.html|title=The evolution of an extension language: a history of Lua|accessdate=2008-12-18|year=2001}}
&lt;!-- {{Cite journal| last1 = Ierusalimschy | first1 = R. | author1-link = Roberto Ierusalimschy| last2 = Figueiredo | first2 = L. H.| last3 = Celes | first3 = W. | contribution = The evolution of an extension language: a history of Lua| contribution-url = http://www.lua.org/history.html| title = Proc. of V Brazilian Symposium on Prog. Lang.| year = 2001| pages = Bâ14âBâ28}} --&gt;&lt;/ref&gt;
They had been independently developed at Tecgraf in 1992â1993 to add some flexibility into two different projects (both were interactive graphical programs for engineering applications at [[Petrobras]] company). There was a lack of any flow control structures in SOL and DEL, and Petrobras felt a growing need to add full programming power to them.

&lt;blockquote&gt;In 1993, the only real contender was [[Tcl]], which had been explicitly designed to be embedded into applications. However, Tcl had unfamiliar syntax, did not offer good support for data description, and ran only on Unix platforms. We did not consider [[Lisp (programming language)|LISP]] or [[Scheme (programming language)|Scheme]] because of their unfriendly syntax. [[Python (programming language)|Python]] was still in its infancy. In the free, do-it-yourself atmosphere that then reigned in Tecgraf, it was quite natural that we should try to develop our own scripting language... Because many potential users of the language were not professional programmers, the language should avoid cryptic syntax and semantics. The implementation of the new language should be highly portable, because Tecgraf's clients had a very diverse collection of computer platforms. Finally, since we expected that other Tecgraf products would also need to embed a scripting language, the new language should follow the example of SOL and be provided as a library with a C API.&lt;ref name=hopl2007 /&gt;&lt;/blockquote&gt;

Lua 1.0 was designed in such a way that its object constructors, being then slightly different from the current light and flexible style, incorporated the data-description syntax of SOL. (Hence the name Lua â ''sol'' is Portuguese for sun; ''lua'' is moon.) Lua [[Syntax (programming languages)|syntax]] for control structures was mostly borrowed from [[Modula]] (if, while, repeat/until), but also had taken influence from [[CLU (programming language)|CLU]] (multiple assignments and multiple returns from function calls, as a simpler alternative to [[Evaluation strategy#Call by reference|reference parameters]] or explicit [[Pointer (computing)|pointers]]), [[C++]] (&quot;neat idea of allowing a [[local variable]] to be declared only where we need it&quot;&lt;ref name=hopl2007 /&gt;), [[SNOBOL]] and [[AWK]] ([[associative array]]s). In an article published in ''[[Dr. Dobb's Journal]]'', Lua's creators also state that LISP and Scheme with their single, ubiquitous data structure mechanism (the [[List (computing)|list]]) were a major influence on their decision to develop the table as the primary data structure of Lua.&lt;ref name=ddj96&gt;{{Cite news| last1 = Figueiredo | first1 = L. H. | last2 = Ierusalimschy | first2 = R. | last3 = Celes| first3 = W. | title = Lua: an Extensible Embedded Language. A few metamechanisms replace a host of features| magazine = Dr. Dobb's Journal| volume = 21| issue = 12| pages = 26â33| date = December 1996| url = http://www.lua.org/ddj.html}}&lt;/ref&gt;

Current Lua [[semantics]] were gained mainly from Scheme:
&lt;blockquote&gt;Semantically, Lua has many similarities with Scheme, even though these similarities are not immediately clear because the two languages are syntactically very different. The influence of Scheme on Lua has gradually increased during Lua's evolution: initially, Scheme was just a language in the background, but later it became increasingly important as a source of inspiration, especially with the introduction of anonymous functions and full lexical scoping.&lt;ref name=hopl2007 /&gt;&lt;/blockquote&gt;

Versions of Lua prior to version 5.0 were released under a license similar to the [[BSD licenses|BSD license]]. From version 5.0 onwards, Lua has been licensed under the [[MIT License]].

==Features==
Lua is commonly described as a â[[Programming paradigm#Multi-paradigm programming language|multi-paradigm]]â language, providing a small set of general features that can be extended to fit different problem types, rather than providing a more complex and rigid specification to match a single paradigm. Lua, for instance, does not contain explicit support for [[Inheritance (object-oriented programming)|inheritance]], but allows it to be implemented relatively easily with [[metatable]]s. Similarly, Lua allows programmers to implement [[Namespace (computer science)|namespaces]], [[Class (computer science)|classes]], and other related features using its single table implementation; [[first-class function]]s allow the employment of many powerful techniques from [[functional programming]]; and full lexical [[Scope (programming)|scoping]] allows fine-grained [[information hiding]] to enforce the [[principle of least privilege]].

In general, Lua strives to provide flexible meta-features that can be extended as needed, rather than supply a feature-set specific to one programming paradigm. As a result, the base language is [[Lightweight programming language|light]] â in fact, the full reference [[interpreter (computing)|interpreter]] is only about 150&amp;nbsp;[[Kilobyte|kB]] compiled&lt;ref name=luaabout&gt;{{cite web| url = http://www.lua.org/about.html#why| title = About Lua| publisher = Lua.org| accessdate = 2011-08-11}}&lt;/ref&gt; â and easily adaptable to a broad range of applications.

Lua is a dynamically typed language intended for use as an [[Scripting language|extension]] or [[scripting language]], and is compact enough to fit on a variety of host platforms. It supports only a small number of atomic data structures such as [[Boolean data type|boolean]] values, [[number]]s (double-precision [[floating point]] by default), and [[string (computer science)|strings]]. Typical data structures such as [[Array data structure|arrays]], [[set (computer science)|sets]], [[List (computing)|lists]], and [[record (computer science)|record]]s can be represented using Luaâs single native data structure, the table, which is essentially a heterogeneous [[associative array]].

Lua implements a small set of advanced features such as [[first-class function]]s, [[garbage collection (computer science)|garbage collection]], [[Closure (computer science)|closures]], proper [[Tail recursion|tail call]]s, [[Type conversion|coercion]] (automatic conversion between string and number values at run time), [[coroutine]]s (cooperative multitasking) and dynamic module loading.

By including only a minimum set of data types, Lua attempts to strike a balance between power and size.

=== Example code ===
The classic [[hello world program]] can be written as follows:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
print(&quot;Hello World!&quot;)
&lt;/syntaxhighlight&gt;

Comments use the following syntax, similar to that of [[SQL]] and [[VHDL]]:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
-- A comment in Lua starts with a double-hyphen and runs to the end of the line.
--[[ Multi-line strings &amp; comments
     are adorned with double square brackets. ]]
&lt;/syntaxhighlight&gt;

The [[factorial]] is an example of a [[recursion|recursive]] function:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
function factorial(n)
  if n == 0 then
    return 1
  else
    return n * factorial(n - 1)
  end
end
&lt;/syntaxhighlight&gt;

The for loop:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
for i = 1,5 do
     -- Statements
end
&lt;/syntaxhighlight&gt;

Luaâs treatment of functions as [[first-class function|first-class]] values is shown in the following example, where the print functionâs behavior is modified:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
do
  local oldprint = print   -- Store current print function as oldprint
  function print(s)        -- Redefine print function
    if s == &quot;foo&quot; then
      oldprint(&quot;bar&quot;)
    else
      oldprint(s)
    end
  end
end
&lt;/syntaxhighlight&gt;
Any future calls to &lt;code&gt;print&lt;/code&gt; will now be routed through the new function, and thanks to Luaâs [[Scope_(programming)#Lexical_scoping|lexical scoping]], the old print function will only be accessible by the new, modified print.

Lua also supports [[Closure (computer science)|closures]], as demonstrated below:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
function addto(x)
  -- Return a new function that adds x to the argument
  return function(y)
    --[[ When we refer to the variable x, which is outside of the current
         scope and whose lifetime is longer than that of this anonymous
         function, Lua creates a closure.]]
    return x + y
  end
end
fourplus = addto(4)
print(fourplus(3))  -- Prints 7
&lt;/syntaxhighlight&gt;
A new closure for the variable &lt;code&gt;x&lt;/code&gt; is created every time &lt;code&gt;addto&lt;/code&gt; is called, so that the anonymous function returned will always access its own &lt;code&gt;x&lt;/code&gt; parameter. The closure is managed by Luaâs garbage collector, just like any other object.

Extensible semantics is a key feature of Lua, and the [[metatable]] concept allows Luaâs tables to be customized in powerful and unique ways.  The following example demonstrates an &quot;infinite&quot; table.  For any &lt;math&gt;n&lt;/math&gt;, &lt;code&gt;fibs[n]&lt;/code&gt; will give the &lt;math&gt;n&lt;/math&gt;&lt;sup&gt;th&lt;/sup&gt; [[Fibonacci number]] using [[dynamic programming]] and [[memoization]].
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
fibs = { 1, 1 }                          -- Initial values for fibs[1] and fibs[2].
setmetatable(fibs, {                     
  __index = function(name, n)            -- Call this function if fibs[n] does not exist.
    name[n] = name[n - 1] + name[n - 2]  -- Calculate and memoize fibs[n].
    return name[n]                       
  end
})
&lt;/syntaxhighlight&gt;

=== Tables ===
Tables are the most important data structure (and, by design, the only built-in [[composite data type]]) in Lua, and are the foundation of all user-created types.

A table is a collection of key and data pairs, where the data is referenced by key; in other words, it's a [[hash table|hashed]] [[Heterogeneity|heterogeneous]] [[associative array]]. A key (index) can be of any data type except nil.  An integer key of &lt;code&gt;1&lt;/code&gt; is considered distinct from a string key of &lt;code&gt;&quot;1&quot;&lt;/code&gt;.

Tables are created using the &lt;code&gt;{}&lt;/code&gt; constructor syntax:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
a_table = {} -- Creates a new, empty table
&lt;/syntaxhighlight&gt;
Tables are always passed by reference:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
a_table = {x = 10}  -- Creates a new table, with one entry mapping &quot;x&quot; to the number 10.
print(a_table[&quot;x&quot;]) -- Prints the value associated with the string key, in this case 10.
b_table = a_table
b_table[&quot;x&quot;] = 20   -- The value in the table has been changed to 20.
print(b_table[&quot;x&quot;]) -- Prints 20.
print(a_table[&quot;x&quot;]) -- Also prints 20, because a_table and b_table both refer to the same table.
&lt;/syntaxhighlight&gt;

==== As structure ====
Tables are often used as [[object composition|structure]]s (or objects) by using [[string (computer science)|strings]] as keys. Because such use is very common, Lua features a special syntax for accessing such fields.
Example:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
point = { x = 10, y = 20 }   -- Create new table
print(point[&quot;x&quot;])            -- Prints 10
print(point.x)               -- Has exactly the same meaning as line above
&lt;/syntaxhighlight&gt;

==== As namespace ====
By using a table to store related functions, it can act as a namespace.
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
Point = {}
Point.new = function (x, y)
  return {x = x, y = y}
end
Point.set_x = function (point, x)
  point.x = x
end
&lt;/syntaxhighlight&gt;

==== As array ====
By using a numerical key, the table resembles an [[array data type]]. Lua arrays are 1-based: the first index is 1 rather than 0 as it is for many other programming languages (though an explicit index of 0 is allowed).

A simple array of strings:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
array = { &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot; }   -- Indices are assigned automatically.
print(array[2])                  -- Prints &quot;b&quot;. Automatic indexing in Lua starts at 1.
print(#array)                    -- Prints 4.  # is the length operator for tables and strings.
array[0] = &quot;z&quot;                   -- Zero is a legal index.
print(#array)                    -- Still prints 4, as Lua arrays are 1-based.
&lt;/syntaxhighlight&gt;
An array of objects:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
function Point(x, y)        -- &quot;Point&quot; object constructor
  return { x = x, y = y }   -- Creates and returns a new object (table)
end
array = { Point(10, 20), Point(30, 40), Point(50, 60) }   -- Creates array of points
print(array[2].y)                                         -- Prints 40
&lt;/syntaxhighlight&gt;
Using a hash map to emulate an array normally is slower than using an actual array; however, Lua tables are optimized for use as arrays&lt;ref name=lobject_h_array&gt;{{cite web|url=http://www.lua.org/source/5.1/lobject.h.html#array|title=Lua 5.1 Source Code|accessdate=2011-03-24|year=2006}}&lt;/ref&gt; to help avoid this issue.&lt;!-- I'd like to find a message on the mailing list from one of the developers, but I can't. Oh well, source code is a pretty trustworthy reference. --&gt;

==== Object-oriented programming ====
Although Lua does not have a built-in concept of [[class (computer science)|classes]], they can be implemented using two language features: [[first-class function]]s and tables. By placing functions and related data into a table, an object is formed. [[Inheritance (object-oriented programming)|Inheritance]] (both single and multiple) can be implemented via the [[metatable]] mechanism, telling the object to lookup nonexistent methods and fields in parent object(s).

There is no such concept as &quot;class&quot; with these techniques, rather [[prototype-based programming|prototypes]] are used as in the programming languages [[Self (programming language)|Self]] or [[JavaScript]]. New objects are created either with a [[factory method pattern|factory method]] (that constructs new objects from scratch) or by cloning an existing object.

Lua provides some [[syntactic sugar]] to facilitate object orientation. To declare [[Method (computer science)|member functions]] inside a prototype table, one can use &lt;tt&gt;function table:func(args)&lt;/tt&gt;, which is equivalent to &lt;tt&gt;function table.func(self, args)&lt;/tt&gt;. Calling class methods also makes use of the colon: &lt;tt&gt;object:func(args)&lt;/tt&gt; is equivalent to &lt;tt&gt;object.func(object, args)&lt;/tt&gt;.

Creating a basic [[Vector (geometry)|vector]] object:
&lt;syntaxhighlight lang=&quot;lua&quot;&gt;
Vector = {}                   -- Create a table to hold the class methods
function Vector:new(x, y, z)  -- The constructor
  local object = { x = x, y = y, z = z }
  setmetatable(object, { __index = Vector })  -- Inheritance
  return object
end
function Vector:magnitude()   -- Another member function
  -- Reference the implicit object using self
  return math.sqrt(self.x^2 + self.y^2 + self.z^2)
end

vec = Vector:new(0, 1, 0)     -- Create a vector
print(vec:magnitude())        -- Call a member function using &quot;:&quot; (output: 1)
print(vec.x)                  -- Access a member variable using &quot;.&quot; (output: 0)
&lt;/syntaxhighlight&gt;

== Internals ==
Lua programs are not [[interpreted language|interpreted]] directly from the textual Lua file, but are [[compiler|compiled]] into [[bytecode]] which is then run on the Lua [[virtual machine]]. The compilation process is typically transparent to the user and is performed during [[Run time (program lifecycle phase)|run-time]], but it can be done offline in order to increase loading performance or reduce the memory footprint of the host environment by leaving out the compiler.

Like most CPUs, and unlike most virtual machines (which are [[stack machine|stack-based]]), the Lua VM is [[register machine|register-based]], and therefore more closely resembles an actual hardware design. The register architecture both avoids excessive copying of values and reduces the total number of instructions per function. The virtual machine of Lua 5 is one of the first register-based pure VM to have a wide use.&lt;ref name=lua5impl&gt;{{Cite journal| last1 = Ierusalimschy | first1 = R. | last2 = Figueiredo | first2 = L. H. | last3 = Celes | first3 = W. | title = The implementation of Lua 5.0| journal = J. Of Universal Comp. Sci.| volume = 11| issue = 7| pages = 1159â1176| year = 2005| url = http://www.jucs.org/jucs_11_7/the_implementation_of_lua/jucs_11_7_1159_1176_defigueiredo.html}}&lt;/ref&gt; [[Perl 6|Perl]]'s
[[Parrot virtual machine|Parrot]] and [[Android (operating system)|Android]]'s [[Dalvik virtual machine|Dalvik]] are two other well-known register-based VMs.

This example is the bytecode listing of the factorial function defined above (as shown by &lt;code&gt;luac&lt;/code&gt; 5.1 compiler):&lt;ref name=luavm51instr&gt;{{Cite web| author = Kein-Hong Man| title = A No-Frills Introduction to Lua 5.1 VM Instructions| year = 2006| url = http://luaforge.net/docman/view.php/83/98/ANoFrillsIntroToLua51VMInstructions.pdf}}&lt;/ref&gt;

 function &lt;factorial.lua:1,6&gt; (10 instructions, 40 bytes at 003D5818)
 1 param, 3 slots, 0 upvalues, 1 local, 3 constants, 0 functions
         1       [2]     EQ              0 0 -1  ; - 0
         2       [2]     JMP             2       ; to 5
         3       [3]     LOADK           1 -2    ; 1
         4       [3]     RETURN          1 2
         5       [5]     GETGLOBAL       1 -3    ; factorial
         6       [5]     SUB             2 0 -2  ; - 1
         7       [5]     CALL            1 2 2
         8       [5]     MUL             1 0 1
         9       [5]     RETURN          1 2
         10      [6]     RETURN          0 1

== C API ==
Lua is intended to be embedded into other applications, and accordingly it provides a robust, easy to use [[C (programming language)|C]] [[Application Programming Interface|API]]. The API is divided into two parts: the Lua core and the Lua auxiliary library.&lt;ref name=luarefman&gt;{{cite web| url = http://www.lua.org/manual/5.1/| title = Lua 5.1 Reference Manual| publisher = Lua.org| accessdate = 2009-05-24}}&lt;/ref&gt;

The Lua API is fairly straightforward because its design eliminates the need for manual [[Reference counting|reference management]] in C code, unlike [[Python (programming language)|Python]]âs API. The API, like the language, is minimalistic. Advanced functionality is provided by the auxiliary library, which consists largely of [[preprocessor]] [[Macro (computer science)|macros]] which make complex table operations more palatable.

=== Stack ===
The Lua C API is [[Stack (data structure)|stack]] based. Lua provides functions to push and pop most simple C data types (integers, floats, etc.) to and from the stack, as well as functions for manipulating tables through the stack. The Lua stack is somewhat different from a traditional stack; the stack can be indexed directly, for example. Negative indices indicate offsets from the top of the stack (for example, &amp;minus;1 is the last element), while positive indices indicate offsets from the bottom.

Marshalling data between C and Lua functions is also done using the stack. To call a Lua function, arguments are pushed onto the stack, and then the &lt;tt&gt;lua_call&lt;/tt&gt; is used to call the actual function. When writing a C function to be directly called from Lua, the arguments are popped from the stack.

=== Special tables ===
The C API also provides several special tables, located at various âpseudo-indicesâ in the Lua stack. At &lt;tt&gt;LUA_GLOBALSINDEX&lt;/tt&gt; is the globals table, &lt;tt&gt;_G&lt;/tt&gt; from within Lua, which is the main [[Namespace (computer science)|namespace]]. There is also a registry located at &lt;tt&gt;LUA_REGISTRYINDEX&lt;/tt&gt; where C programs can store Lua values for later retrieval.

=== Extension and binding ===
It is possible to write extension modules using the Lua API. Extension modules are [[Library (computing)#Dynamic linking|shared objects]] which can be used to extend the functionality of the interpreter by providing native facilities to Lua scripts. From the Lua side, such a module appears as a namespace table holding its functions and variables. Lua scripts may load extension modules using &lt;tt&gt;require&lt;/tt&gt;.&lt;ref name=luarefman /&gt;

A growing collection of modules known as ''rocks'' are available through a [[package management system]] called ''LuaRocks'',&lt;ref&gt;{{cite web| url = http://www.luarocks.org/| title = LuaRocks| publisher = LuaRocks wiki| accessdate=2009-05-24}}&lt;/ref&gt; in the spirit of [[CPAN]], [[RubyGems]] and [[Python eggs|Python Eggs]].
Other sources include [[LuaForge]] and the ''Lua Addons'' directory of [http://lua-users.org lua-users.org] wiki.&lt;ref&gt;{{cite web| url = http://lua-users.org/wiki/LuaAddons| title = Lua Addons| publisher = Lua-users wiki| accessdate=2009-05-24}}&lt;/ref&gt;

Prewritten Lua [[Language binding|bindings]] exist for most popular programming languages, including other scripting languages.&lt;ref&gt;{{cite web| url = http://lua-users.org/wiki/BindingCodeToLua| title = Binding Code To Lua| publisher = Lua-users wiki| accessdate = 2009-05-24}}&lt;/ref&gt; For C++, there are a number of template-based approaches and some automatic binding generators.

== Applications ==
{{Ref improve section|date=January 2009}}

===Video games===
{{maincat|Lua-scripted video games}}

In [[game development|video game development]], Lua is widely used as a [[scripting language]] by [[Game programmer#Scripter|game programmer]]s, perhaps owing to how easy it is to embed, its fast execution, and its small learning curve.&lt;ref&gt;{{cite web |url=http://stackoverflow.com/questions/38338/why-is-lua-considered-a-game-language |title=Why is Lua considered a game language? |publisher=[[Stack Overflow]] |accessdate=2010-04-23}}&lt;/ref&gt;
&lt;!--
PLEASE DO NOT ADD Roblox or WoW or any other specific game. Lua is *way* too widely used for us to mention every game, it's unfair to single out just a few, and there's not a good neutral way to pick which would be included.
Please use [[Category:Lua-scripted video games]] or [[Category:Lua-scriptable game engines]] instead.
--&gt;

In June 2010, [[Apple Computer]] altered the terms of use for its [[iOS SDK]], the [[software development kit]] for its [[IOS (Apple)|iOS]] operating system, allowing the use of Lua.&lt;ref name=&quot;AIlua&quot;&gt;{{Cite web|url=http://www.appleinsider.com/articles/10/06/11/apple_relaxes_ios_sdk_to_allow_lua_but_block_flash.html|title=Apple relaxes iOS SDK terms to allow Lua but block Flash|publisher=[[AppleInsider]]|date=2010-06-11|accessdate=2011-04-08}}&lt;/ref&gt; The company's terms of use had formerly specified that ''&quot;no interpreted code may be downloaded or used in an Application except for code that is interpreted and run by Appleâs Documented APIs and built-in interpreter(s).ï»¿&quot;'', which at the time were limited to [[Objective-C]], [[C (programming language)|C]], [[C++]] and [[JavaScript]].&lt;ref name=&quot;AIlua&quot;/&gt;

===Other===
Other applications using Lua include:
&lt;!--
Note for editors:

  1) any EXTERNAL or RED links are considered NON-NOTABLE and will be removed. You should exert yourself to create an article showing its [[Wikipedia:Notability]] first. See [[WP:WTAF]] for more info.

  2) do NOT list any GAMES or game scripting software (such as **ROBLOX**).  Lua games are just too numerous to fit into this article.

This section is NOT a DIRECTORY of Lua-related software â please do not perform any classifications besides the ABC sorting. If you feel it is growing too big, just clean it up â drop all items that violate the above policy, remove a few that you feel are unimportant.

Thank you for your understanding.
--&gt;

* [[3DMLW|3DMLW plugin]] uses Lua scripting for animating [[3D computer graphics|3D]] and handling different events.
* [[Adobe Photoshop Lightroom]] uses Lua for its user interface.
* [[Apache HTTP Server]] can use Lua anywhere in the request process (since version 2.3, via the core mod_lua module).
* [[Awesome (window manager)|Awesome]], a [[window manager]], is written partly in Lua, also using it as its configuration file format
* [[CHDK|The Canon Hack Development]] (CHDK), an open source firmware for Canon cameras, uses Lua as one of two scripting languages.
* [[Celestia]], the astronomy educational program, uses Lua as its scripting language.
* [[Cisco Systems|Cisco]] uses Lua to implement Dynamic Access Policies within the [[Cisco ASA|Adaptive Security Appliance]].
* Custom applications for the [[Creative Technology]] [[Creative_ZEN#ZEN_X-Fi2|Zen X-Fi2]] portable media player can be created in Lua.
* [[Damn Small Linux]] uses Lua to provide desktop-friendly interfaces for command-line utilities without sacrificing lots of disk space.
* [[Dolphin Computer Access]] uses Lua scripting to make inaccessible applications [[Accessibility|accessible]] for [[Visual impairment|visually impaired]] computer users with their [[screen reader]] â SuperNova.
* Eyeon's [[Eyeon Fusion|Fusion]] compositor uses embedded Lua for internal and external scripts and also plugin prototyping.
* A fork of the [[Nintendo Entertainment System|NES]] [[emulator]] [[FCE Ultra]] called FCEUX allows for extensions or modifications to games via Lua scripts.
* [[Foldit]], a science-oriented game in [[protein folding]], uses Lua for user scripts. Some of those scripts have been the aim of an article in [[Proceedings of the National Academy of Sciences of the United States of America|PNAS]]. &lt;ref&gt;[http://www.pnas.org/content/early/2011/11/02/1115898108 Algorithm discovery by protein folding game players]&lt;/ref&gt;
* [[FreePOPs]], an extensible mail proxy, uses Lua to power its web front-end.
* [[Ginga_(SBTVD_Middleware)|Ginga]], the middleware for Brazilian Digital Television System ([[ISDB-T_International | SBTVD or ISDB-T]] ), uses Lua as a script language to its declarative environment, Ginga-NCL. In Ginga-NCL, Lua is integrated as media objects (called NCLua) inside NCL ([[Nested_Context_Language | Nested Context Language]] ) documents.
* The drawing editor [[Ipe (program)|Ipe]] (mainly used for producing figures with [[LaTeX]] labeling) uses Lua for its functionality and script extensions.
* [[Lego Mindstorms NXT]] and [[Lego Mindstorms NXT 2.0|NXT 2.0]] can be scripted with Lua using third-party software.&lt;ref&gt;[http://www.hempeldesigngroup.com/lego/pbLua/ pbLua]&lt;/ref&gt;
* [[lighttpd]] web server uses Lua for hook scripts as well as a modern replacement for the [[Cache Meta Language]].
* Version 2.01 of the profile management software for [[Logitech]]âs [[Logitech G15|G15]] gaming keyboard uses Lua as its scripting language.
* [[LuaTeX]], the designated successor of [[pdfTeX]], allows extensions to be written in Lua.
* [[MikroTik#RouterOS|MikroTik RouterOS]] has beta support of Lua in 4.x, and planned support in 5.x.&lt;ref&gt;{{Cite web|title=Manual:Lua|url=http://wiki.mikrotik.com/wiki/Lua|work=MikroTik Wiki|accessdate=2010-04-23}}&lt;/ref&gt;
* [[Clickteam|Multimedia Fusion Developer 2]] has a Lua extension that allows games and applications created with it to run Lua scripts.
* [[MySQL Workbench]] uses Lua for its extensions &amp; add-ons.
* [[nmap]] network security scanner uses Lua as the basis for its scripting language, called ''nse''.&lt;ref&gt;{{Cite web|title=Nmap Scripting Engine|url=http://nmap.org/book/nse.html|accessdate=2010-04-10}}&lt;/ref&gt;
* Wavecom's GSM firmware [[Open AT OS]] allows user applications to be written in Lua.
* [[Project Dogwaffle|Project Dogwaffle Professional]] offers Lua scripting to make filters through the DogLua filter. Lua filters can be shared between Project Dogwaffle, [[GIMP]], Pixarra Twistedbrush and ArtWeaver.
* [[Prosody (software)|Prosody]] is a [[cross-platform]] [[Extensible Messaging and Presence Protocol|Jabber/XMPP]] [[Server (computing)|server]] written in Lua.
* [[Reason_(software)|Reason]] Digital Audio Workstation, Lua is used to describe Remote codecs.
* [[Renoise]] audio tracker, in which Lua scripting is used to extend functionality.
&lt;!--
PLEASE do NOT add Roblox or any other specific game. Lua is *way* too widely used for us to mention every game, it's unfair to single out just a few, and there's not a good neutral way to pick which would be included.
--&gt;
* [[Rockbox]], the open-source digital audio player firmware, supports plugins written in Lua.
* New versions of [[SciTE]] editor can be extended using Lua.
* [[Snort (software)|Snort]] intrusion detection system includes a Lua interpreter since 3.0 beta release.&lt;ref&gt;{{Cite web|title=Lua in Snort 3.0|url=http://www.linuxsecurity.com/content/view/128135/171/|accessdate=2010-04-10}}&lt;/ref&gt;
* The [[Squeezebox (network music player)|Squeezebox]] music players from Logitech support plugins written in Lua on recent models (Controller, Radio and Touch).
* [[Vim (text editor)|Vim]] has Lua scripting support starting with version 7.3.&lt;ref&gt;{{cite web|title=Vim documentation: if_lua|url=http://vimdoc.sourceforge.net/htmldoc/if_lua.html|accessdate=2011-08-17}}&lt;/ref&gt;
* [[VLC media player]] uses Lua to provide scripting support.
* [[Wireshark]] network packet analyzer allows protocol dissectors and post-dissector taps to be written in Lua.&lt;ref&gt;{{Cite web|title=Lua in Wireshark|url=http://wiki.wireshark.org/Lua|accessdate=2010-04-10}}&lt;/ref&gt;
* [[GrafX2]], a pixel-art editor, can run Lua scripts for simple picture processing or generative illustration. 
&lt;!--
PLEASE DO NOT ADD Roblox or WoW or any other specific game. Lua is *way* too widely used for us to mention every game, it's unfair to single out just a few, and there's not a good neutral way to pick which would be included.
--&gt;

== References ==
{{reflist|2}}

== Further reading==
{{refbegin}}
* {{Cite book | last1 = Ierusalimschy | first1= R. | last2 = Figueiredo | first2 = L. H. | last3 = Celes  | first3 = W. | title = Lua 5.1 Reference Manual | year= 2006 | publisher = Lua.org | isbn= 85-903798-3-3 | url = http://www.lua.org/manual/5.1/ }}
* {{Cite book | last1 = Ierusalimschy | first1 = R. | title = Programming in Lua &lt;!-- Blue PiL --&gt; | edition = 2nd | year = 2006 | publisher = Lua.org | isbn = 85-903798-2-5 | url = http://www.inf.puc-rio.br/~roberto/pil2/ }} (1st ed. is available [http://www.lua.org/pil/ online])
*{{Cite book| editor-last  = Figueiredo | editor-first  = L. H. | editor2-last = Celes | editor2-first = W. | editor3-last = Ierusalimschy | editor3-first = R. | title = Lua Programming Gems | publisher = Lua.org | year = 2008 | isbn = 978-85-903798-4-3 | url = http://www.lua.org/gems/ }}
*{{Cite book | last1 = Gutschmidt | first1 = T. | title = Game Programming with Python, Lua, and Ruby | year = 2003 | publisher = Course Technology PTR | isbn = 1592000770 }}
* {{Cite book | last1 = Schuytema | first1 = P. | last2 = Manyen | first2 = M. | title = Game Development with Lua | year = 2005 | publisher = Charles River Media | isbn = 1-58450-404-8 }}
* {{Cite book | last1 = Jung  | first1 = K. | last2 = Brown | first2 = A. | title = Beginning Lua Programming | year = 2007 | publisher = Wrox | isbn = 0-470-06917-1 | url = http://www.wrox.com/WileyCDA/WroxTitle/productCd-0470069171.html }}
* {{cite journal|last=Quigley|first=Joseph|date=1 June 2007|title=A Look at Lua|journal=[[Linux Journal]]|url=http://www.linuxjournal.com/article/9605}}
* {{cite web|url=http://www.ibm.com/developerworks/linux/library/l-lua.html|title=Embeddable scripting with Lua|last=Streicher|first=Martin|date=28 April 2006|work=developerWorks|publisher=[[IBM]]}}
* {{cite news|url=http://www.computerworld.com.au/article/260022/a-z_programming_languages_lua/|title=The A-Z of Programming Languages: Lua|last=Hamilton|first=Naomi|date=11 September 2008|work=[[Computerworld]]|publisher=[[IDG]]}} â Interview with Roberto Ierusalimschy
* {{cite journal|url=http://queue.acm.org/detail.cfm?id=1983083|title=Passing a Language through the Eye of a Needle|last1=Ierusalimschy|first1=Roberto|last2=de Figueiredo|first2=Luiz Henrique |last3=Celes|first3=Waldemar|date=12 May 2011|journal=[[ACM Queue]]|publisher=[[ACM]]}} â How the embeddability of Lua impacted its design
{{refend}}

== External links ==
{{wikibooks|Lua Functional Programming}}
* {{official website|http://www.lua.org/}}
* [http://lua-users.org lua-users.org] â Community website for and by users (and authors) of Lua
* [http://www.lua.org/papers.html Lua papers and theses]
* {{cite web|url=http://www.onlamp.com/pub/a/onlamp/2006/02/16/introducing-lua.html|title=Introducing Lua|last=Fieldhouse|first=Keith|date=16 February 2006|work=ONLamp.com|publisher=[[O'Reilly Media]]}}
* [http://www.eluaproject.net/en_overview.html eLua â Embedded Lua]
* [http://luaforge.net Projects in Lua]

{{Lua programming language}}
{{FOSS}}
{{Use dmy dates|date=April 2011}}

{{DEFAULTSORT:Lua (Programming Language)}}
[[Category:Lua programming language| ]]
[[Category:Brazilian inventions]]
[[Category:Cross-platform software]]
[[Category:Embedded systems]]
[[Category:Free compilers and interpreters]]
[[Category:Free development toolkits and libraries]]
[[Category:Free software programmed in C]]
[[Category:Object-oriented programming languages]]
[[Category:Prototype-based programming languages]]
[[Category:Register-based virtual machines]]
[[Category:Scripting languages]]
[[Category:Software using the MIT license]]

[[ar:ÙÙØ§ (ÙØºØ© Ø¨Ø±ÙØ¬Ø©)]]
[[ca:Lua]]
[[cs:Lua]]
[[da:Lua (programmeringssprog)]]
[[de:Lua]]
[[el:Lua]]
[[es:Lua]]
[[eo:Lua]]
[[eu:Lua]]
[[fa:ÙÙØ§ (Ø²Ø¨Ø§Ù Ø¨Ø±ÙØ§ÙÙâÙÙÛØ³Û)]]
[[fr:Lua]]
[[gl:Lua (linguaxe de programaciÃ³n)]]
[[ko:ë£¨ì (íë¡ê·¸ëë° ì¸ì´)]]
[[hi:à¤²à¥à¤ (à¤ªà¥à¤°à¥à¤à¥à¤°à¤¾à¤®à¤¨ à¤­à¤¾à¤·à¤¾)]]
[[id:Lua (bahasa pemrograman)]]
[[ia:Lua (linguage de programmation)]]
[[it:Lua]]
[[ka:áá£á (áá ááá áááá áááá¡ ááá)]]
[[ms:Lua]]
[[nl:Lua (programmeertaal)]]
[[ja:Lua]]
[[pl:Lua]]
[[pt:Lua (linguagem de programaÃ§Ã£o)]]
[[ru:Lua]]
[[simple:Lua]]
[[sr:Lua]]
[[fi:Lua]]
[[sv:Lua]]
[[tg:Lua]]
[[uk:Lua]]
[[vi:Lua]]
[[zh:Lua]]</rev></revisions></page></pages></query></api>
