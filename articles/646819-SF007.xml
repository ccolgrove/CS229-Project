<?xml version="1.0"?><api><query><redirects><r from="Hardware virtualisation" to="Hardware virtualization" /></redirects><pages><page pageid="9774359" ns="0" title="Hardware virtualization"><revisions><rev xml:space="preserve">{{Refimprove|date=April 2010}}
Computer '''hardware virtualization''' is the [[virtualization]] of [[computer]]s or [[operating system]]s. It hides the physical characteristics of a computing platform from users, instead showing another [[wiktionary:abstract|abstract]] computing platform.&lt;ref&gt;{{ cite web | last = Turban | first = E | coauthors = King D, Lee J, Viehland D | year = 2008 | title = Electronic Commerce A Managerial Perspective | edition = 5th edition | publisher = Prentice-Hall | chapter = Ch19 | pages = P27 | url = http://wps.prenhall.com/wps/media/objects/5073/5195381/pdf/Online_Chapter_19.pdf }}&lt;/ref&gt;&lt;ref&gt;{{ cite web | url = http://www-07.ibm.com/solutions/in/education/download/Virtualization%20in%20Education.pdf | title = Virtualization in education | publisher = [[IBM]]| date = October 2007 | accessdate = 6 July 2010}}&lt;/ref&gt; At its origins, the software that controled virtualization was called a &quot;control program&quot;, but nowadays the terms &quot;[[hypervisor]]&quot; or &quot;virtual machine monitor&quot; are preferred.

== Concept ==

The term &quot;virtualization&quot; was coined in the 1960s to refer to a [[virtual machine]] (sometimes called &quot;pseudo machine&quot;), a term which itself dates from the experimental [[IBM M44/44X]] system.{{Citation needed|date=October 2007}} The creation and management of virtual machines has been called &quot;platform virtualization&quot;, or &quot;server virtualization&quot;, more recently.

Platform virtualization is performed on a given hardware platform by ''host'' software (a ''control program''), which creates a simulated computer environment, a ''virtual machine'' (VM), for its ''guest'' software. The guest software is not limited to user applications; many hosts allow the execution of complete operating systems.  The guest software executes as if it were running directly on the physical hardware, with several notable caveats. Access to physical system resources (such as the [[network interface card|network access]], display, keyboard, and [[hard disk drive|disk storage]]) is generally managed at a more restrictive level than the ''host'' processor and system-memory.  Guests are often restricted from accessing specific [[peripheral device]]s, or may be limited to a subset of the device's native capabilities, depending on the hardware access policy implemented by the virtualization host.

Virtualization often exacts performance penalties, both in resources required to run the hypervisor, and as well as in reduced performance on the virtual machine compared to running native on the physical machine.

== Reasons for virtualization ==

* In the case of [[Server (computing)|server]] consolidation, many small physical servers are replaced by one larger physical server to increase the utilization of costly hardware resources such as CPU. Although hardware is consolidated, typically OSs are not. Instead, each OS running on a physical server becomes converted to a distinct OS running inside a virtual machine. The large server can &quot;host&quot; many such &quot;guest&quot; virtual machines. This is known as [[Physical-to-Virtual]] (P2V) transformation.

* A virtual machine can be more easily controlled and inspected from outside than a physical one, and its configuration is more flexible. This is very useful in kernel development and for teaching operating system courses.&lt;ref&gt;[http://www.cs.columbia.edu/~nieh/publications/drdobbs2000.pdf Examining VMware] Dr. Dobbâs Journal August 2000 By Jason Nieh and Ozgur Can Leonard&lt;/ref&gt;

* A new virtual machine can be provisioned as needed without the need for an up-front hardware purchase. 

* A virtual machine can easily be relocated from one physical machine to another as needed. For example, a salesperson going to a customer can copy a virtual machine with the demonstration software to his laptop, without the need to transport the physical computer. Likewise, an error inside a virtual machine does not harm the host system, so there is no risk of breaking down the OS on the laptop.

* Because of the easy relocation, virtual machines can be used in [[disaster recovery]] scenarios.

However, when multiple VMs are concurrently running on the same physical host, each VM may exhibit a varying and unstable performance, which highly depends on the workload imposed on the system by other VMs, unless proper techniques are used for [[temporal isolation among virtual machines]].

There are several approaches to platform virtualization.

Examples of virtualization scenarios:

; Running one or more applications that are not supported by the host OS : A virtual machine running the required guest OS could allow the desired applications to be run, without altering the host OS.

; Evaluating an alternate operating system : The new OS could be run within a VM, without altering the host OS.

; Server virtualization : Multiple virtual servers could be run on a single physical server, in order to more fully utilize the hardware resources of the physical server.

; Duplicating specific environments : A virtual machine could, depending on the virtualization software used, be duplicated and installed on multiple hosts, or restored to a previously backed-up system state.
  	
; Creating a protected environment: if a guest OS running on a VM becomes damaged in a way that is difficult to repair, such as may occur when studying [[malware]] or installing badly-behaved software, the VM may simply be discarded without harm to the host system, and a clean copy used next time.

== Full virtualization ==
{{Main|Full virtualization}}
[[File:Hardware Virtualization (copy).svg|thumb|Logical diagram of full virtualization.]]
In full virtualization, the virtual machine simulates enough hardware to allow an unmodified &quot;guest&quot; OS (one designed for the same [[instruction set]]) to be run in isolation. This approach was pioneered in 1966 with the IBM [[CP-40]] and [[CP-67]], predecessors of the [[VM (Operating system)|VM]] family. Examples outside the mainframe field include [[Parallels Workstation]], [[Parallels Desktop for Mac]], [[VirtualBox]], [[Virtual Iron]], [[Oracle VM]], [[Microsoft Virtual PC|Virtual PC]], [[Virtual Server]], [[Hyper-V]], [[VMware Workstation]], [[VMware Server]] (formerly GSX Server), [[Kernel-based Virtual Machine|KVM]], [[QEMU]], [[Adeos]], [[Mac-on-Linux]], Win4BSD, [[Win4Lin|Win4Lin Pro]], and [[Egenera]] vBlade  technology.

== Hardware-assisted virtualization ==
{{Main|Hardware-assisted virtualization}}

In hardware-assisted virtualization, the hardware provides architectural support that facilitates building a virtual machine monitor and allows guest OSes to be run in isolation.&lt;ref&gt;Uhlig, R. et al.; &quot;Intel virtualization technology,&quot; Computer , vol.38, no.5, pp. 48-56, May 2005&lt;/ref&gt; Hardware-assisted virtualization was first introduced on the IBM System/370 in 1972, for use with VM/370, the first virtual machine operating system. In 2005 and 2006, [[Intel]] and [[AMD]] provided additional hardware to support virtualization. Sun Microsystems (now [[Oracle Corporation]]) added similar features in their [[SPARC T3|UltraSPARC T-Series]] processors in 2005.  Examples of virtualization platforms adapted to such hardware include [[Kernel-based Virtual Machine|Linux KVM]], [[VMware Workstation]], [[VMware Fusion]], [[Microsoft Hyper-V]], [[Microsoft Virtual PC]], [[Xen]], [[Parallels Desktop for Mac]], [[Logical Domains|Oracle VM Server for SPARC]], [[VirtualBox]] and [[Parallels Workstation]].

Hardware platforms with integrated virtualization technologies include:

* [[x86 virtualization|x86 (and x86-64)]]â[[AMD-V]] (previously known as Pacifica), [[Intel VT-x]] (previously known as Vanderpool)
** [[IOMMU]] implementations by both AMD and Intel.
* [[Power Architecture]] ([[IBM]], [[Power.org]])
* [[Virtage]] ([[Hitachi]])
* [[UltraSPARC T1]], [[UltraSPARC T2|T2, T2+]], [[SPARC T3]] ([[Oracle Corporation]])

In 2006 first-generation 32- and 64-bit x86 hardware support was found rarely to offer performance advantages over software virtualization&lt;ref&gt;[http://www.vmware.com/pdf/asplos235_adams.pdf A Comparison of Software and Hardware Techniques for x86 Virtualization, Keith Adams and Ole Agesen, VMWare, ASPLOSâ06 October 21â25, 2006, San Jose, California, USA]&quot;Surprisingly, we find that the first-generation hardware support rarely offers performance advantages over existing software techniques. We ascribe this situation to high VMM/guest transition costs and a rigid programming model that leaves little room for software flexibility in managing either the frequency or cost of these transitions.&lt;/ref&gt;.

== Partial virtualization ==
{{Unreferenced section|date=April 2010}}
In partial virtualization, including address space virtualization, the virtual machine simulates multiple instances of much of an underlying hardware environment, particularly [[address space]]s.{{Clarify|how is this different from plain virtual memory?|date=April 2010}} Usually, this means that entire operating systems cannot run in the virtual machine &amp;ndash; which would be the sign of [[full virtualization]] &amp;ndash; but that many applications can run. A key form of partial virtualization is address space virtualization, in which each virtual machine consists of an independent [[address space]]. This capability requires [[virtual memory|address relocation]] hardware, and has been present in most practical examples of partial virtualization.{{Citation needed|date=April 2010}}

Partial virtualization was an important historical milestone on the way to full virtualization. It was used in the first-generation time-sharing system [[Compatible Time-Sharing System|CTSS]], in the [[IBM M44/44X]] experimental paging system, and arguably systems like [[MVS]] and the [[Commodore 64]] (a couple of 'task switch' programs).{{Dubious|date=April 2010}}{{Citation needed|date=April 2010}} The term could also be used to describe any operating system that provides separate address spaces for individual users or processes, including many that today would not be considered [[virtual machine]] systems. Experience with partial virtualization, and its limitations, led to the creation of the first full virtualization system (IBM's [[IBM CP-40|CP-40]], the first iteration of [[CP/CMS]] which would eventually become IBM's [[VM (operating system)|VM family]]). (Many more recent systems, such as [[Microsoft Windows]] and [[Linux]], as well as the remaining categories below, also use this basic approach.{{Dubious|date=April 2010}}{{Citation needed|date=April 2010}})

Partial virtualization is significantly easier to implement than full virtualization. It has often provided useful, robust virtual machines, capable of supporting important applications. Partial virtualization has proven highly successful for sharing computer resources among multiple users.{{Citation needed|date=April 2010}}

However, in comparison with full virtualization, its drawback is in situations requiring [[backward compatibility]] or [[porting|portability]]. It can be hard to anticipate precisely which features have been used by a given application. If certain hardware features are not simulated, then any software using those features will fail.

== Paravirtualization ==
{{Main|Paravirtualization}}

In paravirtualization, the virtual machine does not necessarily simulate hardware, but instead (or in addition) offers a special API that can only be used by modifying{{Clarify|date=October 2007}} the &quot;guest&quot; OS. This system call to the [[hypervisor]] is called a &quot;hypercall&quot; in [[Trango Virtual Processors|TRANGO]] and [[Xen]]; it is implemented via a DIAG (&quot;diagnose&quot;) hardware instruction in IBM's [[Conversational Monitor System|CMS]] under [[VM (operating system)|VM]]{{Clarify|date=October 2007}}&lt;!-- self-contradiction; above VM is givaen as the most prominent example of full virtualization... --&gt; (which was the origin of the term ''hypervisor''). Examples include IBM's [[LPAR]]s,&lt;ref&gt;Borden, T.L. et al.; Multiple Operating Systems on One Processor Complex. IBM Systems Journal, vol.28, no.1, pp. 104-123, 1989&lt;/ref&gt; [[Win4Lin|Win4Lin 9x]], Sun's [[Logical Domains]], [[z/VM]],{{Citation needed|date=October 2007}} and TRANGO.

== Operating system-level virtualization ==
{{Main|Operating system-level virtualization}}

In operating system-level virtualization, a physical server is virtualized at the operating system level, enabling multiple isolated and secure virtualized servers to run on a single physical server.  The &quot;guest&quot; OS environments share the same OS as the host system &amp;ndash; i.e. the same OS kernel is used to implement the &quot;guest&quot; environments. Applications running in a given &quot;guest&quot; environment view it as a stand-alone system. The pioneer implementation was [[FreeBSD jail]]s; other examples include [[Solaris Containers]], [[OpenVZ]], [[Linux-VServer]], AIX [[Workload Partitions]], Parallels Virtuozzo Containers, and [[iCore Virtual Accounts]].

== Hardware virtualization disaster recovery ==

A [[disaster recovery]] (DR) plan is good business practice for a hardware virtualization platform solution. DR of a virtualization environment can ensure high rate of availability during a wide range of situations that disrupt normal business operations. Continued operations of VMs is mission critical and a DR can compensate for concerns of hardware performance and maintenance requirements.  A hardware virtualization DR environment will involve hardware and software protection solutions based on business continuity needs.&lt;ref&gt;{{ cite web | year = 2010 | title = The One Essential Guide to Disaster Recovery: How to Ensure IT and Business Continuity | publisher = Vision Solutions, Inc. | url =http://www.visionsolutions.com/Downloads/Whitepapers/EssentialDR.pdf }}&lt;/ref&gt;&lt;ref&gt;{{ cite web | last = Wold | first = G | coauthors =  | year = 2008 | title = Disaster Recovery Planning Process | url =http://www.drj.com/new2dr/w2_002.htm }}&lt;/ref&gt;

Hardware virtualization DR methods:
; Tape backup for software data long-term archival needs : This common method can be used to store data offsite but can be a difficult and lengthy process to recover your data. Tape backup data is only as good as the latest copy stored. Tape backup methods will require a backup device and ongoing storage material.
; Whole-file and application replication : The implementation of this method will require control software and storage capacity for application and data file storage replication typically on the same site. The data is replicated on a different disk partition or separate disk device and can be a scheduled activity for most servers and is implemented more for database-type applications.
; Hardware and software redundancy : This solution provides the highest level of disaster recovery protection for a hardware virtualization solutions providing duplicate hardware and software replication in two distinct geographic areas.&lt;ref&gt;{{ cite web | year = 2010 | title = Disaster Recovery Virtualization Protecting Production Systems Using VMware Virtual Infrastructure and Double-Take | publisher = VMWare | url =http://www.vmware.com/files/pdf/DR_VMware_DoubleTake.pdf }}&lt;/ref&gt;

== See also ==
* [[Virtual appliance]]
* [[Application virtualization]]
* [[Workspace virtualization]]
* [[Desktop virtualization]]
* [[Comparison of platform virtual machines]]
* [[Dynamic infrastructure]]
* [[Popek and Goldberg virtualization requirements]]
* [[Physicalization]]

==References==
{{Reflist}}

== External links ==
* [http://www.kernelthread.com/publications/virtualization/ An introduction to Virtualization]
* [http://research.microsoft.com/~tharris/papers/2003-sosp.pdf Xen and the Art of Virtualization]
* [http://www-128.ibm.com/developerworks/library/l-linuxvirt/index.html Linux Virtualization Software]
* [http://linuxdevices.com/articles/AT3899346728.html Using a hypervisor to reconcile GPL and proprietary embedded code]
* [http://www.bodhost.com/web-hosting/category/vmware-server-virtualization/ FAQs On VMWare Server Virtualization]


{{DEFAULTSORT:Hardware Virtualization}}
[[Category:Virtual machines]]
[[Category:Hardware virtualization|*]]

[[cs:Virtualizace]]
[[de:Serverpartitionierung]]
[[el:ÎÎ¹ÎºÎ¿Î½Î¹ÎºÎ¿ÏÎ¿Î¯Î·ÏÎ·]]
[[es:VirtualizaciÃ³n]]
[[fr:Virtualisation]]
[[ko:ê°ìí]]
[[id:Virtualisasi]]
[[it:Virtualizzazione]]
[[he:×××¨×××××××¦××]]
[[lt:Virtualizacija]]
[[nl:Virtualisatie]]
[[ja:ä»®æ³å]]
[[no:Virtualisering]]
[[ru:ÐÐ¸ÑÑÑÐ°Ð»Ð¸Ð·Ð°ÑÐ¸Ñ]]
[[simple:Virtualization]]
[[sk:VirtualizÃ¡cia]]
[[fi:Virtualisointi]]
[[sv:Virtualisering]]
[[zh:ç¡¬ä»¶èæå]]</rev></revisions></page></pages></query></api>
