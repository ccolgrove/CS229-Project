<?xml version="1.0"?><api><query><pages><page pageid="25039021" ns="0" title="Go (programming language)"><revisions><rev xml:space="preserve">{{Distinguish2|[[Go! (programming language)]], an agent-based language released in 2003}}
{{Infobox programming language
| name                   = Go
| logo                   = [[Image:golang.png]]
| caption                =
| paradigm               = [[compiled language|compiled]], [[concurrent programming|concurrent]], [[imperative programming|imperative]], [[structured programming|structured]]
| year                   = 2009
| designer               = Robert Griesemer&lt;br /&gt;[[Rob Pike]]&lt;br /&gt;[[Ken Thompson]]
| developer              = [[Google|Google Inc.]]
| latest_release_version = r60&lt;ref&gt;{{cite web|title=Release History - The Go Programming Language|url=http://golang.org/doc/devel/release.html|accessdate=8 September 2011}}&lt;/ref&gt;
| latest_release_date    = {{start date and age|2011|09|07}}
| latest_test_version    =
| latest_test_date       =
| typing                 = [[strong typing|strong]], [[static typing|static]]
| implementations        = gc (8g, 6g, 5g), gccgo
| dialects               =
| influenced_by          = [[C (programming language)|C]], [[Limbo (programming language)|Limbo]], [[Modula]], [[Newsqueak]], [[Oberon (programming language)|Oberon]], [[Pascal (programming language)|Pascal]]&lt;ref name=&quot;langfaq&quot;/&gt;
| operating_system       = [[Linux]], [[Mac OS X]], [[FreeBSD]], [[OpenBSD]], [[Microsoft Windows|MS Windows]], [[Plan 9 from Bell Labs|Plan 9]]&lt;ref&gt;{{cite web|url=http://go-lang.cat-v.org/os-ports|title=Go Porting Efforts|date=12 January 2010|work=Go Language Resources|publisher=cat-v|accessdate=18 January 2010}}&lt;/ref&gt;
| license                = [[BSD licenses|BSD]]-style&lt;ref&gt;{{cite web | url = http://golang.org/LICENSE | accessdate =27 January 2011 | title = Text file LICENSE}}&lt;/ref&gt;
| website                = {{URL|http://golang.org}}
| file_ext               = .go
}}

'''Go''' is a [[compiled language|compiled]], [[Garbage collection (computer science)|garbage-collected]], [[concurrent programming language|concurrent]] [[programming language]] developed by [[Google|Google Inc.]]&lt;ref&gt;{{cite news|url=http://www.techcrunch.com/2009/11/10/google-go-language/|title=Googleâs Go: A New Programming Language Thatâs Python Meets C++|last=Kincaid |first=Jason |date=10 November 2009 |newspaper=TechCrunch |accessdate=18 January 2010}}&lt;/ref&gt;

The initial design of Go was started in September 2007 by [[Robert Griesemer]], [[Rob Pike]], and [[Ken Thompson]].&lt;ref name=&quot;langfaq&quot;&gt;{{cite web|url=http://golang.org/doc/go_faq.html|title=Language Design FAQ|date=16 January 2010|work=golang.org|accessdate=27 February 2010}}&lt;/ref&gt; Go was officially announced in November 2009. In May 2010, Rob Pike publicly stated that Go was being used &quot;for real stuff&quot; at Google.&lt;ref name=&quot;register&quot;&gt;{{cite news| url = http://www.theregister.co.uk/2010/05/20/go_in_production_at_google/ | title = Google programming Frankenstein is a Go | newspaper = [[The Register]] | date = 20 May 2010 |first=Cade |last=Metz}}&lt;/ref&gt; Go's &quot;gc&quot; compiler targets the [[Linux]], [[Mac OS X]], [[FreeBSD]], [[OpenBSD]] and [[Microsoft Windows]] operating systems and the [[i386]], [[amd64]], and [[ARM]] processor architectures.&lt;ref&gt;{{cite web|url=http://golang.org/doc/install.html#tmp_33|title=Installing Go|date=11 June 2010|work=golang.org|publisher=The Go Authors|accessdate=11 June 2010}}&lt;/ref&gt;

== Goals ==
Go aims to provide the efficiency of a statically-typed compiled language with the ease of programming of a dynamic language.&lt;ref name=go_lang_video_2009&gt;{{cite web|last=Pike|first=Rob|title=The Go Programming Language|url=http://www.youtube.com/watch?v=rKnDgT73v8s&amp;feature=related|publisher=YouTube|accessdate=1 Jul 2011}}&lt;/ref&gt; Other goals include:

* Safety: [[Type safety|type-safe]] and [[Memory safety|memory-safe]].
* Good support for concurrency and communication.
* Efficient, latency-free garbage collection.
* High-speed compilation.

== Description ==

The syntax of Go is broadly similar to that of [[C (programming language)|C]]: blocks of code are surrounded with [[curly brace]]s; common [[control flow]] structures include &lt;code&gt;[[for loop|for]]&lt;/code&gt;, &lt;code&gt;[[switch statement|switch]]&lt;/code&gt;, and &lt;code&gt;[[conditional (programming)|if]]&lt;/code&gt;. Unlike C, line-ending semicolons are optional; variable declarations are written differently and are usually optional; type conversions must be made explicit; and new &lt;code&gt;go&lt;/code&gt; and &lt;tt&gt;select&lt;/code&gt; control keywords have been introduced to support concurrent programming. New built-in types include maps, Unicode strings, array slices, and channels for inter-thread communication.

Go is designed for exceptionally fast compiling times, even on modest hardware.&lt;ref name=&quot;techtalk-compiling&quot;&gt;{{cite video |people= [[Rob Pike]] |date= 10 November 2009 |title= The Go Programming Language |url= http://www.youtube.com/watch?v=rKnDgT73v8s#t=8m53 |format= flv |medium= Tech talk |publisher= Google |time= 8:53}}&lt;/ref&gt; The language requires [[Garbage collection (computer science)|garbage collection]]. Certain concurrency-related structural conventions of Go ([[channel (programming)|channel]]s and alternative channel inputs) are borrowed from [[C. A. R. Hoare|Tony Hoare's]] [[Communicating sequential processes|CSP]]. Unlike previous concurrent programming languages such as [[Occam (programming language)|occam]] or [[Limbo (programming language)|Limbo]], Go does not provide any built-in notion of safe or verifiable concurrency.&lt;ref name=&quot;memmodel&quot;&gt;{{cite web| url = http://golang.org/doc/go_mem.html | title = The Go Memory Model | publisher = Google | accessdate =5 January 2011}}&lt;/ref&gt;

Of features found in C++ or Java, Go does not include [[inheritance (object-oriented programming)|type inheritance]], [[generic programming]], [[Assertion (computing)|assertions]], [[method overloading]], or [[pointer arithmetic]].&lt;ref name=&quot;langfaq&quot;/&gt;  Of these, the Go authors express an openness to generic programming, explicitly argue against assertions and pointer arithmetic, while defending the choice to omit type inheritance as giving a more useful language, encouraging heavy use of [[Protocol (object-oriented programming)|interfaces]] instead.&lt;ref name=&quot;langfaq&quot;/&gt;  Initially, the language did not include [[exception handling]], but in March 2010 a mechanism known as &lt;code&gt;panic&lt;/code&gt;/&lt;code&gt;recover&lt;/code&gt; was implemented to handle exceptional errors while avoiding some of the problems the Go authors find with exceptions.&lt;ref&gt;[http://golang.org/doc/devel/release.html#2010-03-30 Release notes, 30 March 2010]&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://groups.google.com/group/golang-nuts/browse_thread/thread/1ce5cd050bb973e4|title=Proposal for an exception-like mechanism |date=25 March 2010|work=golang-nuts|accessdate=25 March 2010}}&lt;/ref&gt;

Go interfaces do not participate in a type hierarchy like Java's. They are better described as a set of methods, identified by their name and signature. An interface can be declared to ''embed'' other interfaces, meaning the declared interface ''borrows'' the methods defined in the other interfaces, making them part of the set of methods of the declared interface &lt;ref name=&quot;memmodel&quot;&gt;{{cite web| url = http://golang.org/doc/effective_go.html#interfaces_and_types | title = Effective Go - Interfaces and methods &amp; Embedding | publisher = Google | accessdate = 28 November 2011}}&lt;/ref&gt;. A type matches an interface if it defines the methods (same name and same signature) from this interface.

[[Linkage (software)|Visibility]] of structures, structure fields, variables, constants, methods, top-level types and functions outside of their defining package is defined implicitly according to the capitalization of their identifier.&lt;ref&gt;{{cite web|url=http://golang.org/doc/go_tutorial.html|title=A Tutorial for the Go Programming Language|work=The Go Programming Language|publisher=Google|accessdate=10 March 2010|quote=In Go the rule about visibility of information is simple: if a name (of a top-level type, function, method, constant or variable, or of a structure field or method) is capitalized, users of the package may see it. Otherwise, the name and hence the thing being named is visible only inside the package in which it is declared.}}&lt;/ref&gt;

== Implementations ==

There are currently two Go compilers:
* 6g/8g/5g (the compilers for AMD64, x86, and ARM respectively) with their supporting tools (collectively known as &quot;gc&quot;) based on Ken's previous work on [[Plan 9 from Bell Labs|Plan 9]]'s C toolchain.
* gccgo, a [[GNU Compiler Collection|GCC]] frontend written in C++,&lt;ref&gt;{{cite web|url=http://golang.org/doc/go_faq.html#Implementation|title=FAQ: Implementation|date=16 January 2010|work=golang.org|accessdate=18 January 2010}}&lt;/ref&gt; and now officially supported as of version 4.6, albeit not part of the standard binary for gcc.&lt;ref&gt;{{cite web | url=http://gcc.gnu.org/install/configure.html | title=Installing GCC: Configuration | accessdate=3 December 2011 | quote=Ada, Go and Objective-C++ are not default languages}}&lt;/ref&gt;

Both compilers work on Unix-like systems, and a port to Microsoft Windows of the gc compiler and runtime have been integrated in the main distribution. Most of the standard libraries also work on Windows.

There is also an unmaintained &quot;tiny&quot; runtime environment that allows Go programs to run on bare hardware.&lt;ref&gt;{{cite web|url=http://groups.google.com/group/golang-nuts/browse_thread/thread/b877e34723b543a7|title=release.2011-02-01|last=Gerrand|first=Andrew|date=1 February 2011|work=golang-nuts|publisher=[[Google]]|accessdate=5 February 2011}}&lt;/ref&gt;

== Examples ==
The following is a [[Hello world program]] in Go:

&lt;syntaxhighlight lang=&quot;go&quot;&gt;
package main

import &quot;fmt&quot;

func main() {
	fmt.Println(&quot;Hello, World&quot;)
}
&lt;/syntaxhighlight&gt;

Go's automatic [[semicolon]] insertion feature requires that opening braces not be placed on their own lines, and this is thus the preferred [[brace style]]; the examples shown comply with this style.&lt;ref&gt;{{cite web|url=http://golang.org/doc/go_tutorial.html|title=A Tutorial for the Go Programming Language|work=The Go Programming Language|publisher=Google|accessdate=10 March 2010|quote=The one surprise is that it's important to put the opening brace of a construct such as an if statement on the same line as the if; however, if you don't, there are situations that may not compile or may give the wrong result. The language forces the brace style to some extent.}}&lt;/ref&gt;

Example illustrating how to write a program like the Unix [[Echo (command)|echo command]] in Go:&lt;ref&gt;{{cite web|url=http://golang.org/doc/go_tutorial.html|title=A Tutorial for the Go Programming Language|date=16 January 2010|work=golang.org|accessdate=18 January 2010}}&lt;/ref&gt;

&lt;syntaxhighlight lang=&quot;go&quot;&gt;
package main

import (
	&quot;os&quot;
	&quot;flag&quot;  // command line option parser
)

var omitNewline = flag.Bool(&quot;n&quot;, false, &quot;don't print final newline&quot;)

const (
	Space = &quot; &quot;
	Newline = &quot;\n&quot;
)

func main() {
	flag.Parse()   // Scans the arg list and sets up flags
	var s string
	for i := 0; i &lt; flag.NArg(); i++ {
		if i &gt; 0 {
			s += Space
		}
		s += flag.Arg(i)
	}
	if !*omitNewline {
		s += Newline
	}
	os.Stdout.WriteString(s)
}
&lt;/syntaxhighlight&gt;

== Reception ==

Go's initial release led to much discussion.

David Given compared it unfavorably to another programming language he called &quot;Brand X,&quot; which was finally revealed to be [[Algol 68]], commenting that this showed an overall lack of progress in procedural programming language design over the course of the intervening 41 years.&lt;ref&gt;{{cite news |url=http://www.cowlark.com/2009-11-15-go/ |title=On Go |last= Given |first=David |date=15 November 2009 |accessdate=29 March 2011}}&lt;/ref&gt;

Michele Simionato wrote in an article for artima.com:&lt;ref&gt;{{cite news |url=http://www.artima.com/weblogs/viewpost.jsp?thread=274019 |title=Interfaces vs Inheritance (or, watch out for Go!) |last= Simionato |first=Michele |date=15 November 2009 |publisher=artima |accessdate=15 November 2009}}&lt;/ref&gt;

{{quote |Here I just wanted to point out the design choices about interfaces and inheritance. Such ideas are not new and it is a shame that no popular language has followed such particular route in the design space. I hope Go will become popular; if not, I hope such ideas will finally enter in a popular language, we are already 10 or 20 years too late :-(}}

[[Dave Astels]] at [[Engine Yard]] wrote:&lt;ref&gt;{{cite news |url=http://www.engineyard.com/blog/2009/ready-set-go/ |title=Ready, Set, Go! |last= Astels |first=Dave |date=9 November 2009 |publisher=engineyard |accessdate=9 November 2009}}&lt;/ref&gt;

{{quote |Go is extremely easy to dive into. There are a minimal number of fundamental language concepts and the syntax is clean and designed to be clear and unambiguous. Go is still experimental and still a little rough around the edges.}}

Blogger Michael Hoisie wrote:&lt;ref&gt;{{cite news |url=http://www.hoisie.com/post/my_thoughts_on_the_go_programming_language|title=My thoughts on the Go Programming language |last=Hoisie |first=Michael |date=11 November 2009 |work=hoisie dot com |accessdate=11 November 2009}}&lt;/ref&gt;

{{quote |Overall I think Go will find a good niche - a high performance language that's suitable for most system tasks. It has a great initial library, and it seems to have attracted a large community already (the [[irc]] chat room currently has over 500 users).}}

[[Ars Technica]] interviewed Rob Pike, one of the authors of Go, and asked why a new language was needed. He replied that:&lt;ref name=&quot;ars&quot;&gt;{{cite news |url=http://arstechnica.com/open-source/news/2009/11/go-new-open-source-programming-language-from-google.ars |title=Go: new open source programming language from Google |last=Paul |first=Ryan |date=10 November 2009 |publisher=Ars Technica |accessdate=13 November 2009}}&lt;/ref&gt;

{{quote |It wasn't enough to just add features to existing programming languages, because sometimes you can get more in the long run by taking things away. They wanted to start from scratch and rethink everything. ... [But they did not want] to deviate too much from what developers already knew because they wanted to avoid alienating Go's target audience.}}

Go entered the [[TIOBE Programming Community Index]] at fifteenth place in its first year,&lt;ref&gt;[http://www.tiobe.com/content/paperinfo/tpci/index.html The major TIOBE 2009 language is Go]&lt;/ref&gt; surpassing established languages like [[Pascal (programming language)|Pascal]]. {{As of|2011|9|11}}, it ranked 32nd in the index.&lt;ref&gt;{{cite web |url=http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html |title=TIOBE Programming Community Index for September 2011 |date=September 2011 |publisher=TIOBE Software |accessdate=11 September 2011}}&lt;/ref&gt;

[[Bruce Eckel]] stated:&lt;ref&gt;{{cite web |url=http://www.artima.com/weblogs/viewpost.jsp?thread=333589 |title=Calling Go from Python via JSON-RPC |date=27 |month=August |year=2011 |author=Bruce Eckel |accessdate=August 29, 2011}}&lt;/ref&gt;
{{quote |The complexity of [[C++]] (even more complexity has been added in the new C++), and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no sense anymore -- they're just a waste of time and effort. Now, Go makes much more sense for the class of problems that C++ was originally intended to solve.}}

== Naming dispute ==
On the day of the general release of the language, Francis McCabe, developer of the [[Go! (programming language)|Go! programming language]] (note the [[exclamation point]]), requested a name change of Google's language to prevent confusion with his language.&lt;ref name=&quot;infoweek&quot;&gt;{{cite news|url=http://www.informationweek.com/news/software/web_services/showArticle.jhtml?articleID=221601351|title=Google 'Go' Name Brings Accusations Of Evil'|last=Claburn|first=Thomas|date=11 November 2009|publisher=InformationWeek|accessdate=18 January 2010}}&lt;/ref&gt; While McCabe has not trademarked the name, some commenters on McCabe's request called for Google to adopt a new one. However, contradicting established practice of eliminating name clashes (frequently resorting to [[court]]), the issue was closed on 12 October 2010 with the custom status &quot;Unfortunate&quot;, the closing Google developer stating that &quot;there are many computing products and services named Go. In the 11 months since our release, there has been minimal confusion of the two languages.&quot;&lt;ref&gt;{{cite web|url=http://code.google.com/p/go/issues/detail?id=9|title=Issue 9 - go - I have already used the name for *MY* programming language|work=Google Code|publisher=[[Google Inc.]]|accessdate=12 October 2010}}&lt;/ref&gt;

==Concurrency==
Go provides ''goroutines'', small lightweight threads; the name alludes to [[coroutine]]s. Goroutines are created with the &lt;code&gt;go&lt;/code&gt; statement from anonymous or named functions.

Goroutines are executed in parallel with other goroutines, including their caller. They do not necessarily run in separate threads, but a group of goroutines are multiplexed onto multiple threads â execution control is moved between them by blocking them when sending or receiving messages over channels.

== See also ==
* [[Comparison of programming languages]]

== References ==
:''This article incorporates material from the [http://golang.org/doc/go_tutorial.html official Go tutorial], which is licensed under the Creative Commons Attribution 3.0 license.''
{{Reflist|2}}

== External links ==
&lt;!--========================({{No More Links}})============================
    | PLEASE BE CAUTIOUS IN ADDING MORE LINKS TO THIS ARTICLE. WIKIPEDIA  |
    | IS NOT A COLLECTION OF LINKS NOR SHOULD IT BE USED FOR ADVERTISING. |
    |                                                                     |
    |           Excessive or inappropriate links WILL BE DELETED.         |
    | See [[Wikipedia:External links]] &amp; [[Wikipedia:Spam]] for details.  |
    |                                                                     |
    | If there are already plentiful links, please propose additions or   |
    | replacements on this article's discussion page, or submit your link |
    | to the relevant category at the Open Directory Project (dmoz.org)   |
    | and link back to that category using the {{dmoz}} template.         |
    =======================({{No More Links}})=============================--&gt;
* {{Official website|http://golang.org}}
*{{cite web|url=http://www.stanford.edu/class/ee380/Abstracts/100428.html|title=Another Go at Language Design|last=Pike|first=Rob|date=28 April 2010|work=Stanford EE Computer Systems Colloquium|publisher=[[Stanford University]]}} ([http://ee380.stanford.edu/cgi-bin/videologger.php?target=100428-ee380-300.asx video]) â A university lecture
*{{cite news|url=http://thechangelog.com/post/259401776/episode-0-0-3-googles-go-programming-language|title=Episode 0.0.3 - Googleâs Go Programming Language|date=27 November 2009|work=The Changelog}} â Podcast interview with Rob Pike, Tech Lead for the Google Go team
* [http://go-lang.cat-v.org/ Go Programming Language Resources] (unofficial)
* irc://chat.freenode.net/#go-nuts â the [[IRC]] channel #go-nuts on [[freenode]]
* [http://www.codingbynumbers.com/2011/01/coding-by-numbers-episode-20-interview.html Interview about Go with Andrew Gerrand] on Coding By Numbers podcast

{{Google Inc.}}
{{Rob Pike navbox}}
{{Ken Thompson navbox}}

{{Use dmy dates|date=August 2011}}

{{DEFAULTSORT:Go (Programming Language)}}
[[Category:C programming language family]]
[[Category:Concurrent programming languages]]
[[Category:Google software]]
[[Category:Procedural programming languages]]
[[Category:Systems programming languages]]
[[Category:Cross-platform software]]
[[Category:Programming languages created in 2009]]
[[Category:American inventions]]

[[ar:ØºÙ (ÙØºØ© Ø¨Ø±ÙØ¬Ø©)]]
[[bg:Go (ÐµÐ·Ð¸Ðº Ð·Ð° Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¸ÑÐ°Ð½Ðµ)]]
[[cs:Go (programovacÃ­ jazyk)]]
[[da:Go (programmeringssprog)]]
[[de:Go (Programmiersprache)]]
[[es:Go (lenguaje de programaciÃ³n)]]
[[fr:Go (langage)]]
[[ko:Go (íë¡ê·¸ëë° ì¸ì´)]]
[[it:Go (Linguaggio di programmazione)]]
[[he:Go (×©×¤×ª ×ª×× ××ª)]]
[[hu:Go (programozÃ¡si nyelv)]]
[[ms:Go (bahasa pengaturcaraan)]]
[[nl:Go (programmeertaal)]]
[[ja:Go (ãã­ã°ã©ãã³ã°è¨èª)]]
[[no:Go (programmeringssprÃ¥k)]]
[[pl:Go (jÄzyk programowania)]]
[[pt:Go (linguagem de programaÃ§Ã£o)]]
[[ru:Go (ÑÐ·ÑÐº Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ)]]
[[sr:ÐÐ¾Ñ]]
[[fi:Go (ohjelmointikieli)]]
[[tr:Go (programlama dili)]]
[[uk:Go (Ð¼Ð¾Ð²Ð° Ð¿ÑÐ¾Ð³ÑÐ°Ð¼ÑÐ²Ð°Ð½Ð½Ñ)]]
[[vi:Go (ngÃ´n ngá»¯ láº­p trÃ¬nh)]]
[[zh:Go]]</rev></revisions></page></pages></query></api>
