<?xml version="1.0"?><api><query><pages><page pageid="2083029" ns="0" title="D-Bus"><revisions><rev xml:space="preserve">{{Redirect|DBus||Dbus (disambiguation)}}

{{Infobox software
| logo =
| screenshot =
| caption =
| developer = [[Red Hat]] and the community
| latest_release_version = 1.4.16&lt;ref&gt;{{cite web |url=http://lists.freedesktop.org/archives/dbus/2011-September/014707.html |title=Announcing dbus 1.4.16 |date=2011-09-21 |accessdate=24 November 2011}}&lt;/ref&gt;
| latest_release_date = {{start date and age|2011|09|21}}
| latest_preview_version = 
| latest_preview_date = 
| operating_system = [[Cross-platform]]
| platform =
| genre = [[Inter-process communication]]
| license = [[GNU General Public License]] or [[Academic Free License]] 2.1&lt;ref&gt;[http://log.ometer.com/2007-07.html#17 Havoc's Blog July, 2007&lt;!-- Bot generated title --&gt;]&lt;/ref&gt;
| website = [http://www.freedesktop.org/wiki/Software/dbus www.freedesktop.org/wiki/Software/dbus]
}}

In [[computing]], '''D-Bus''' (''Desktop Bus'') is a simple [[inter-process communication]] (IPC) [[open-source]] system for [[software application]]s to communicate with one another. Heavily influenced by [[KDE]]2&amp;ndash;3's [[DCOP]] system, D-Bus has replaced DCOP in the [[KDE 4]] release. An implementation of D-Bus supports most [[POSIX]] operating systems, and a port for Windows exists. It is used by [[Qt (toolkit)|Qt]] 4 and [[GNOME]]. In GNOME it has gradually replaced most parts of the earlier [[Bonobo (component model)|Bonobo]] mechanism.

[[Red Hat]] operates as the primary developer of D-Bus as part of the [[freedesktop.org]] project.

==Design==

D-Bus allows programs to register with it in order to offer [[Service (computer science)|services]]. It also allows client programs to check for the availability of services. Programs can also register as waiting for events of the [[Kernel (computer science)|kernel]], as in the case of [[hot swapping|hot-swapping]] hardware.

D-Bus functionality runs as a [[Daemon (computer software)|daemon]]: typically &lt;code&gt;dbus-daemon&lt;/code&gt;. Users can run several instances of it, each called a ''channel''. Most systems implement a privileged ''system channel'', plus a ''private channel'' for each logged-in user. The private channels are required because the system channel has access restrictions.

The purpose of the private channel is to provide unrestricted communication among any applications of the user.

Currently, D-Bus works over Unix sockets, but work is being done to create a 'peer-to-peer' socket in the Linux kernel able to route messages between applications, leaving the daemon as a top-level manager.&lt;ref&gt;http://alban.apinc.org/blog/2010/09/15/d-bus-in-the-kernel-faster/&lt;/ref&gt; The main advantage of this new approach is that it improves speed by halving the number of memory-copy operations.

==Architecture==
D-Bus has three [[architectural layer]]s:&lt;ref name=&quot;love&quot;&gt;{{cite web|url=http://www.linuxjournal.com/article/7744 |title=Get on the D-BUS | accessdate=2008-01-23 |publisher=[[Linux Journal]] }}
&lt;/ref&gt;

# '''&lt;code&gt;libdbus&lt;/code&gt;''' - a library that allows two applications to connect to each other and exchange messages
# '''&lt;code&gt;dbus-daemon&lt;/code&gt;''' - a message-bus daemon executable, built on &lt;code&gt;libdbus&lt;/code&gt;, that multiple applications can connect to. The daemon can route messages from one application to zero or more applications, thereby implementing the [[publish subscribe|publish/subscribe]] paradigm.
# wrapper libraries based on particular application frameworks

The design of D-Bus addresses two specific cases:

# communication between [[Desktop environment|desktop]] [[application software|applications]] in the same desktop session; to allow integration of the desktop session as a whole, and address issues of process lifecycle
# communication between the desktop session and the [[operating system]], where the operating system would typically include the [[kernel (computer science)|kernel]] and any system [[daemon (computer software)|daemons]] or [[Process (computing)#Computing|processes]]

==Mechanisms==

Each application using D-Bus contains [[Object (computer science)|objects]] that usually map to [[GObject]], [[Qt (framework)|QObject]], [[C++]] objects, or [[Python (programming language)|Python]] objects. Each D-bus object operates as an [[Instance (programming)|instance]] rather than as a [[datatype|type]]. Messages received over a D-Bus connection get routed to a specific object, not to the application as a whole. In this way, D-Bus resembles [[software componentry]], as it appears to users as if they are [[Remote procedure call|interacting with an object]] across the IPC connection, whether or not there is an object on the other side.

To allow messages to specify their destination object, the system needs a way to refer to an object. Many programming languages refer to this as a pointer or reference. However, these references are implemented as memory addresses relative to the address space of the application, and thus can't be passed from one application to another.

To solve this, D-Bus introduces a name for each object. The name looks like a filesystem path, for example an object could have the name &lt;tt&gt;/org/kde/kspread/sheets/3/cells/4/5&lt;/tt&gt;. D-Bus encourages [[human-readable]] paths, but developers are free to create an object named &lt;tt&gt;/com/mycompany/c5yo817y0c1y1c5b&lt;/tt&gt; if it makes sense for their application.

The D-Bus objects' names are [[Namespace (computer science)|namespaced]] to keep different code modules separated. Namespaces are generally prefixed with the developer's reversed [[domain name]] components (e.g. &lt;tt&gt;/org/kde&lt;/tt&gt;).

== See also ==
{{Portal|Free software}}
* [[Remote procedure call]]
* [[CORBA]] Common Object Request Broker Architecture, cross language cross platform object model
* [[GNOME]] [[Bonobo (computing)|Bonobo]] deprecated GNOME cross language Object Model
* [[KDE]] [[DCOP]] deprecated KDE interprocess and software componentry communication system
* [[KDE]] [[KPart]] KDE component framework
* [[XPCOM]] Mozilla applications cross Platform Component Object Model
* [[Component Object Model|COM]] Microsoft Windows only cross language Object Model
* [[Distributed Component Object Model|DCOM]] Distributed COM, extension making COM able to work in networks
* [[Common Language Infrastructure]] current .Net cross language cross platform Object Model
* [[Java Remote Method Invocation]] (Java RMI)
* [[Foreign function interface]]

==References==

{{Reflist}}

==External links==
* [http://www.freedesktop.org/Software/dbus D-Bus] at the Freedesktop.org home page
* [http://www.freedesktop.org/wiki/IntroductionToDBus Introduction to D-Bus] on the Freedesktop.org wiki

{{Freedesktop.org}}
{{IPC}}

[[Category:Inter-process communication]]
[[Category:Freedesktop.org]]
[[Category:GNOME]]
[[Category:KDE Platform]]
[[Category:Free network-related software]]
[[Category:C++ libraries]]

[[ar:Ø¯Ù-Ø¨Ø³]]
[[ca:D-BUS]]
[[cs:D-Bus]]
[[de:D-Bus]]
[[es:D-Bus]]
[[fr:D-Bus]]
[[id:D-Bus]]
[[it:D-Bus]]
[[nl:D-Bus]]
[[ja:D-Bus]]
[[pl:D-Bus]]
[[pt:D-Bus]]
[[ru:D-Bus]]
[[fi:D-Bus]]
[[sv:D-Bus]]
[[uk:D-Bus]]
[[zh:D-Bus]]</rev></revisions></page></pages></query></api>
