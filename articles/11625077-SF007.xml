<?xml version="1.0"?><api><query><pages><page pageid="11625077" ns="0" title="Intel Threading Building Blocks"><revisions><rev xml:space="preserve">{{Infobox Software
|name                       = Intel Threading Building Blocks
|logo                       =
|screenshot                 =
|caption                    =
|collapsible                =
|author                     =
|developer                  = Intel
|released                   =
|latest release version     = 4.0
|latest release date        = September 8, 2011
|latest preview version     =
|latest preview date        =
|frequently updated         =
|programming language       = C++
|operating system           = FreeBSD, Linux, Solaris, Mac OS X, Microsoft Windows
|platform                   =
|size                       =
|language                   =
|status                     =
|genre                      = [[library (computing)|library]] or [[Software framework|framework]]
|license                    = dual: commercial / open source
|website                    =
}}
'''Intel Threading Building Blocks''' (also known as '''TBB''') is a [[C++]] [[template (programming)|template]] [[library (computer science)|library]] developed by [[Intel]] [[Corporation]] for writing software programs that take advantage of [[multi-core]] [[CPU|processors]]. The library consists of data structures and algorithms that allow a programmer to avoid some complications arising from the use of native [[Thread (computer science)|threading]] packages such as [[POSIX threads]], Windows threads, or the portable [[Boost C++ Libraries|Boost Threads]] in which individual threads of execution are created, synchronized, and terminated manually. Instead the library abstracts access to the multiple processors by allowing the operations to be treated as &quot;tasks&quot;, which are allocated to individual cores dynamically by the library's run-time engine, and by automating efficient use of the [[cache]]. A TBB program creates, synchronizes and destroys graphs of dependent tasks according to ''algorithms'', i.e. high-level parallel programming paradigms (a.k.a. [[Algorithmic Skeletons]]). Tasks are then executed respecting graph dependencies. This approach groups TBB in a family of solutions for parallel programming aiming to decouple the programming from the particulars of the underlying machine.

==Implementation==
TBB implements &quot;task stealing&quot; to balance a parallel workload across available processing cores in order to increase core utilization and therefore scaling. The TBB task stealing model is similar to the work stealing model applied in [[Cilk]]. Initially, the workload is evenly divided among the available processor cores. If one core completes its work while other cores still have a significant amount of work in their queue, TBB reassigns some of the work from one of the busy cores to the idle core. This dynamic capability decouples the programmer from the machine, allowing applications written using the library to scale to utilize the available processing cores with no changes to the source code or the executable program file.

TBB, like the [[Standard Template Library|STL]], uses [[template (programming)|templates]] extensively. This has the advantage of low-overhead [[Polymorphism in object-oriented programming|polymorphism]], since templates are a compile-time construct which modern C++ [[compiler]]s can largely optimize away. The result is dense, fast code {{POV-statement|date=February 2011}}.

Intel TBB is available commercially as a binary distribution with support,&lt;ref name=&quot;TBB.com&quot;&gt;http://www.threadingbuildingblocks.com Intel Threading Building Blocks Commercial Version Homepage&lt;/ref&gt; and in open source in both source and binary forms.&lt;ref name=&quot;TBB.org&quot;&gt;http://www.threadingbuildingblocks.org Threading Building Blocks Open Source Project Homepage&lt;/ref&gt;

== Library contents ==

TBB is a collection of components for parallel programming:
* Basic algorithms: &lt;code&gt;parallel_for&lt;/code&gt;, &lt;code&gt;parallel_reduce&lt;/code&gt;, &lt;code&gt;parallel_scan&lt;/code&gt;
* Advanced algorithms: &lt;code&gt;parallel_while&lt;/code&gt;, &lt;code&gt;parallel_do&lt;/code&gt;, &lt;code&gt;parallel_pipeline&lt;/code&gt;, &lt;code&gt;parallel_sort&lt;/code&gt;
* [[Container (data structure)|Container]]s: &lt;code&gt;concurrent_queue&lt;/code&gt;, &lt;code&gt;concurrent_vector&lt;/code&gt;, &lt;code&gt;concurrent_hash_map&lt;/code&gt;
* Scalable memory allocation: &lt;code&gt;scalable_malloc&lt;/code&gt;, &lt;code&gt;scalable_free&lt;/code&gt;, &lt;code&gt;scalable_realloc&lt;/code&gt;, &lt;code&gt;scalable_calloc&lt;/code&gt;, &lt;code&gt;scalable_allocator&lt;/code&gt;, &lt;code&gt;cache_aligned_allocator&lt;/code&gt;
* [[Mutual exclusion]]: &lt;code&gt;mutex&lt;/code&gt;, &lt;code&gt;spin_mutex&lt;/code&gt;, &lt;code&gt;queuing_mutex&lt;/code&gt;, &lt;code&gt;spin_rw_mutex&lt;/code&gt;, &lt;code&gt;queuing_rw_mutex&lt;/code&gt;, &lt;code&gt;recursive mutex&lt;/code&gt;
* [[Atomic operation]]s: &lt;code&gt;fetch_and_add&lt;/code&gt;, &lt;code&gt;fetch_and_increment&lt;/code&gt;, &lt;code&gt;fetch_and_decrement&lt;/code&gt;, &lt;code&gt;compare_and_swap&lt;/code&gt;, &lt;code&gt;fetch_and_store&lt;/code&gt;
* Timing: portable fine grained global time stamp
* Task Scheduler: direct access to control the creation and activation of tasks

== History ==

Version 1.0 was introduced by Intel on August 29, 2006, the year after the introduction of Intel's first dual-core x86 processor, the [[Pentium D]].

Version 1.1 was introduced on April 10, 2007.  This version introduced auto_partitioner which offered an automatic alternative to specifying a grain size parameter to estimate the best granularity for your tasks. This version was added to the Intel C++ Compiler 10.0 with the new Professional Edition later that year on June 5.

Version 2.0 was introduced on July 24, 2007. This version included the release of the source code and the creation of an open source project.&lt;ref name=&quot;TBB.org&quot;/&gt; The license used for open source is the same as the one previously used by the [[GNU Compiler Collection]] [[C++ standard library]], a [[GPLv2]] with a &quot;runtime exception&quot; (because of being template heavy code that usually becomes part of the executable after compilation). TBB is still available in a commercial version (without source code) with support but with no differences in functionality from the open source version.

Version 2.1 was introduced on July 22, 2008.  Version 2.1 features included task-to-thread affinity, cancellation support, exception handling, and a portable thread wrapper.

Version 2.2 was introduced on August 5, 2009. [http://www.h-online.com/open/Intel-releases-version-2-2-of-Threading-Building-Blocks--/news/113937] Version 2.2 features support for lambda functions in [[C++0x]].

Version 3.0 was introduced on May 4, 2010. It has a number of improvements, see (http://software.intel.com/en-us/blogs/2010/05/04/tbb-30-new-today-version-of-intel-threading-building-blocks/)

Version 4.0 was introduced on September 8, 2011. It has several new features, see (http://threadingbuildingblocks.org/whatsnew.php)

== Systems supported ==

The TBB commercial release 3.0 supports [[Microsoft Windows]] (XP or newer), [[Mac OS X]] (version 10.5.8 or higher) and [[Linux]] using various compilers ([[Visual C++]] (version 8.0 or higher, on Windows OS only), [[Intel C++ Compiler]] (version 11.1 or higher) or [[GNU Compiler Collection]] (gcc)).&lt;ref&gt;{{cite web |url=http://software.intel.com/sites/products/documentation/hpc/tbb/release_notes.txt |title=Intel Threading Building Blocks - Release Notes Version 3.0 |accessdate=2011-08-08}}&lt;/ref&gt; Additionally, the TBB open source community has contributed patches for Sun [[Solaris (operating system)|Solaris]]&lt;ref&gt;{{cite web |url=http://developers.sun.com/solaris/articles/tbb_intro.html|title=Using Intel's Threaded Building Blocks (TBB) With Sun Studio Express|accessdate=2008-05-08}}&lt;/ref&gt;, [[PowerPC]], [[Xbox 360]], [[QNX Neutrino]], and [[FreeBSD]].

===Open source operating systems===

{{As of|2010|3}}, TBB is available in [[FreeBSD]] and has been packaged into the following [[Linux|GNU/Linux]] and [[Solaris (operating system)|Sun Solaris]] distributions:

* [[Fedora (Linux distribution)|Red Hat Fedora]]
* [[openSUSE|Novell openSUSE]]
* [[Ubuntu (operating system)|Canonical Ubuntu]]
* [[Arch Linux]]
* [[Turbolinux]]
* [[Asianux|Red Flag Asianux]]
* [[Debian]]
* [[Gentoo Linux|Gentoo]]
* [[Solaris (operating system)|Sun Solaris]]
* [[OpenSolaris|Sun OpenSolaris]]

== See also ==

* [[Algorithmic skeleton]]
* [[Grand Central Dispatch]]
* [[List of C++ template libraries]]
* [[Intel Array Building Blocks]]
* [[Intel Cilk Plus]]
* [[Intel Concurrent Collections]]
* [[Intel Parallel Building Blocks]]
* [[Intel Parallel Studio]]
* [[Intel Software Network]] (support and discussion)
* [[Parallel computing]]

==Notes==
&lt;!--&lt;nowiki&gt;
See http://en.wikipedia.org/wiki/Wikipedia:Footnotes for an explanation of how to generate footnotes using the &lt;ref&gt; and &lt;/ref&gt; tags, and the template below.
&lt;/nowiki&gt;--&gt;
&lt;references/&gt;

==References==
* Reinders, James (2007, July). [http://www.oreilly.com/catalog/9780596514808 ''Intel Threading Building Blocks: Outfitting C++ for Multi-core Processor Parallelism''] (Paperback) Sebastopol: O'Reilly Media, ISBN 978-0-596-51480-8.
* Voss, M. (2006, October). [http://www.devx.com/cplus/Article/32935 &quot;Demystify Scalable Parallelism with Intel Threading Building Blocks' Generic Parallel Algorithms.&quot;]
* Voss, M. (2006, December). [http://www.devx.com/cplus/Article/33334 &quot;Enable Safe, Scalable Parallelism with Intel Threading Building Blocks' Concurrent Containers.&quot;]
* Hudson, R. L., B. Saha, et al. (2006, June). [http://doi.acm.org/10.1145/1133956.1133967 &quot;McRT-Malloc: a scalable transactional memory allocator.&quot;] Proceedings of the 2006 International Symposium on Memory Management. New York: ACM Press, pp. 74-83.

{{Parallel Computing}}

[[Category:Concurrent programming libraries]]
[[Category:Application programming interfaces]]
[[Category:C++ programming language family]]
[[Category:Generic programming]]
[[Category:Threads]]
[[Category:C++ libraries]]
[[Category:Intel products|Intel Threading Building Blocks]]

[[de:Threading Building Blocks]]
[[es:Intel Threading Building Blocks]]
[[fr:Threading Building Blocks]]
[[ja:Intel Threading Building Blocks]]
[[pl:Intel Threading Building Blocks]]
[[ru:Intel Threading Building Blocks]]</rev></revisions></page></pages></query></api>
