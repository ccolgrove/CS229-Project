<?xml version="1.0"?><api><query><pages><page pageid="9914" ns="0" title="Executable and Linkable Format"><revisions><rev xml:space="preserve">{{Infobox file format
| name = ELF
| extension = none, &lt;tt&gt;.o&lt;/tt&gt;, &lt;tt&gt;.so&lt;/tt&gt;, &lt;tt&gt;.elf&lt;/tt&gt;, &lt;tt&gt;.prx&lt;/tt&gt;, &lt;tt&gt;.puff&lt;/tt&gt;
| mime = 
| owner = [[Unix System Laboratories]]
| genre = [[Binary file|Binary]], [[executable]], [[object code|object]], [[shared libraries]], [[core dump]]
| container for = 
| contained by = 
| extended from = 
| extended to = 
}}
In [[computing]], the '''Executable and Linkable Format''' ('''ELF''', formerly called '''Extensible Linking Format''') is a common standard [[file format]] for [[executable]]s, [[object code]], [[shared libraries]], and [[core dump]]s.  First published in the  [[System V]] [[application binary interface|Application Binary Interface]] specification,&lt;ref&gt;''[http://www.sco.com/developers/devspecs/gabi41.pdf System V Application Binary Interface]'' Edition 4.1 (1997-03-18)&lt;/ref&gt; and later in the [[Tool Interface Standard]],&lt;ref&gt;Tool Interface Standard (TIS) ''[http://refspecs.freestandards.org/elf/elf.pdf Executable and Linking Format (ELF) Specification] Version 1.2'' (May 1995)&lt;/ref&gt; it was quickly accepted among different vendors of [[Unix]] systems.  In 1999 it was chosen as the standard binary file format for Unix and [[Unix-like]] systems on [[x86]] by the [[86open]] project.

Unlike many proprietary executable file formats, ELF is very flexible and extensible, and it is not bound to any particular processor or [[Instruction set architecture|architecture]]. This has allowed it to be adopted by many different [[operating system]]s on many different platforms.

The ELF file format is also used as a generic object and executable format for binary images used with embedded processors like [[Atmel AVR|AVR]]'s.

== ELF file layout ==
[[Image:Elf-layout--en.svg|thumb|200px|An ELF file has two views: The program header shows the ''segments'' used at run-time, whereas the section header lists the set of ''sections'' of the binary.]]

Each ELF file is made up of one ELF header, followed by file data.  The file data can include:

* Program header table, describing zero or more segments
* Section header table, describing zero or more sections
* Data referred to by entries in the program header table or section header table

The segments contain information that is necessary for runtime execution of the file, while sections contain important data for linking and relocation. Any byte in the entire file can be owned by at most one section, and there can be orphan bytes which are not owned by any section.

==Tools==
*&lt;code&gt;readelf&lt;/code&gt; is a Unix binary utility that displays information about one or more ELF files.  An open-source implementation is provided by [[GNU Binutils]].
*&lt;code&gt;elfdump&lt;/code&gt; is a command for viewing ELF information in an ELF file, available under Solaris and [[FreeBSD]].
*&lt;code&gt;[[objdump]]&lt;/code&gt; provides a wide range of information about ELF files and other object formats. &lt;code&gt;objdump&lt;/code&gt; uses the [[Binary File Descriptor library]] as a back-end to structure the ELF data.
*The Unix &lt;code&gt;[[file (command)|file]]&lt;/code&gt; utility can display some information about ELF files, including the [[instruction set architecture]] for which the code in a relocatable, executable, or shared object file is intended, or on which an ELF [[core dump]] was produced.

==Applications==
The ELF format has replaced older executable formats in various environments.
It has replaced [[a.out]] and [[COFF]] formats in [[Unix-like]] operating systems:
* [[Linux]]
* [[Solaris (operating system)|Solaris]]
* [[IRIX]]
* [[FreeBSD]]
* [[NetBSD]]
* [[OpenBSD]]
* [[DragonFly BSD]]
* [[Syllable Desktop (operating system)|Syllable]]
* [[HP-UX]] (except for 32-bit PA-RISC programs which continue to use [[System Object Model (file format)|SOM]])
* [[BeOS]] Revision 4 and later for [[x86]] based computers (where it replaced the [[Portable Executable]] format; the [[PowerPC]] version stayed with [[Preferred Executable Format]])
* [[Haiku (operating system)|Haiku]]

ELF has also seen some adoption in non-Unix operating systems, such as:
* [[OpenVMS]], in its Itanium version

Some game consoles also use ELF:
* [[PlayStation Portable]],&lt;ref&gt;PlayStation Portable use encrypted &amp; relocated ELF : PSP&lt;/ref&gt; [[PlayStation 2]], [[PlayStation 3]]
* [[Wii]]
* [[GP2X]].
* [[Dreamcast]]

Other operating systems running on [[PowerPC]] using ELF:
* [[AmigaOS 4]], the ELF executable has replaced the previous [[Amiga Hunk#Extended Hunk format|EHF]] (Extended Hunk Format) which was used on Amigas equipped with PPC processor expansion cards.
* [[MorphOS]]

Some operating systems for mobile phones and mobile devices use ELF:
*[[Symbian OS]] v9 uses E32Image&lt;ref&gt;''[http://wiki.forum.nokia.com/index.php/E32Image Symbian OS executable file format]''&lt;/ref&gt; format that is based on the ELF file format;
* [[Sony Ericsson]], for example, the [[Sony Ericsson W800|W800i]], [[Sony Ericsson W610i|W610]], [[Sony Ericsson W300|W300]], etc.
* [[Siemens]], the SGOLD and SGOLD2 platforms: from Siemens [[Siemens C65|C65]] to S75 and BenQ-Siemens E71/[[BenQ-Siemens EL71|EL71]]);
* [[Motorola]], for example, the E398, [[Motorola SLVR L7|SLVR L7]], v360, [[Motorola_RAZR_V3#V3i|v3i]] (and all phone LTE2 which has the patch applied)
* [[Bada (operating system)]], for example, the [[Samsung Wave S8500]].
Some phones can run ELF files through the use of a [[Patch (computing)|patch]] that adds [[Assembly Language|assembly code]] to the main [[firmware]] (known as the ''ELFPack'', in the underground [[modding]] culture).

Also, Dolphin Emulator can open ELF files.
==Specifications==
&lt;!--This would probably be better presented as a table--&gt;
* Generic:
** ''[http://www.sco.com/developers/devspecs/gabi41.pdf System V Application Binary Interface]'' Edition 4.1 (1997-03-18)
** ''[http://www.sco.com/developers/gabi/latest/contents.html System V ABI Update]'' (October 2009)
** ''[http://downloads.openwatcom.org/ftp/devel/docs/elf-64-gen.pdf ELF-64 Object File Format]'' Version 1.5 Draft 2 (May 1998)
* [[AMD64]]:
** ''[http://www.x86-64.org/documentation/abi.pdf System V ABI, AMD64 Supplement]''
* [[ARM architecture|ARM]]:
** ''[http://infocenter.arm.com/help/topic/com.arm.doc.ihi0044b/IHI0044B_aaelf.pdf ELF for the ARM Architecture]''
* [[IA-32]]:
** ''[http://www.sco.com/developers/devspecs/abi386-4.pdf System V ABI, Intel386 Architecture Processor Supplement]''
* [[IA-64]]:
** ''[http://refspecs.freestandards.org/IA64conventions.pdf Itanium Software Conventions and Runtime Guide]'' (September 2000)
* [[M32R]]:
** ''[http://www.linux-m32r.org/cmn/m32r/M32R-elf-abi.pdf M32R ELF ABI Supplement]'' Version 1.2 (2004-08-26)
* [[MIPS architecture|MIPS]]:
** ''[http://www.sco.com/developers/devspecs/mipsabi.pdf System V ABI, MIPS RISC Processor Supplement]''
** ''[http://sources.redhat.com/ml/binutils/2003-06/msg00436.html MIPS EABI documentation]'' (2003-06-11)
* [[Motorola 6800]]:
** ''[http://www.0x04.net/doc/sysv/psABI-m8-16.pdf Motorola 8 and 16 bit Embedded ABI]''
* [[PA-RISC]]:
** ''[http://refspecs.freestandards.org/elf/elf-pa.pdf ELF Supplement for PA-RISC]'' Version 1.43 (October 6, 1997)
* [[PowerPC]]:
** ''[http://refspecs.freestandards.org/elf/elfspec_ppc.pdf System V ABI, PPC Supplement]
** ''[http://sources-redhat.mirrors.airband.net/binutils/ppc-docs/ppc-eabi-1995-01.pdf PowerPC Embedded Application Binary Interface] 32-Bit Implementation'' (1995-10-01)
** ''[http://www.linuxbase.org/spec/ELF/ppc64/PPC-elf64abi-1.9.html 64-bit PowerPC ELF Application Binary Interface Supplement]'' Version 1.9 (2004)
* [[SPARC]]:
** ''[http://www.sparc.org/standards/psABI3rd.pdf System V ABI, SPARC Supplement]''
* [[S/390]]:
** ''[http://www.linux-foundation.org/spec/ELF/zSeries/lzsabi0_s390/book1.html S/390 ELF ABI Supplement]
* [[zSeries]]:
** ''[http://www.linux-foundation.org/spec/ELF/zSeries/lzsabi0_zSeries.pdf zSeries ELF ABI Supplement]''
* Symbian OS 9:
** ''[http://wiki.forum.nokia.com/index.php/E32Image_file_format_on_Symbian_OS_9 E32Image file format on Symbian OS 9]''

==86open==
'''86open''' was a project to form consensus on a common [[binary file]] format for [[Unix]] and [[Unix-like]] [[operating system]]s on the common [[PC compatible]] [[x86]] architecture, so as to encourage software developers to port to the architecture.&lt;ref&gt;{{cite web
  | url = http://www.telly.org/86open-faq
  | title = 86Open Frequently-Asked Questions
  | accessdate = 2007-06-06
  | last = Leibovitch
  | first = Evan
  | authorlink = 
  | coauthors = 
  | date = 1997-12-23
|archiveurl = http://web.archive.org/web/20070311032337/http://www.telly.org/86open-faq &lt;!-- Bot retrieved archive --&gt; |archivedate = 2007-03-11}}&lt;/ref&gt; The initial idea was to standardize on a small subset of Spec 1170, a predecessor of the [[Single UNIX Specification]], and the GNU C Library (glibc) to enable unmodified binaries to run on the x86 UNIX-like operating systems. The project was originally referred to as &quot;Spec 150&quot;.

The format eventually chosen was ELF, specifically the Linux implementation of ELF, after it had turned out to be a [[De facto standard|''de facto'' standard]] supported by all involved vendors and operating systems.

The group started email discussions in 1997 and first met in person at the [[Santa Cruz Operation]] offices on 1997-08-22.

The steering committee was [[Marc Ewing]], Dion Johnson, Evan Leibovitch, [[Bruce Perens]], Andrew Roach, Bryan Sparks and [[Linus Torvalds]]. Other people on the project were Tim Bird, [[Keith Bostic]], Chuck Cranor, Michael Davidson,&lt;!--At least three other Michael Davidsons in WP as of 04.2007--&gt; Chris G. Demetriou, [[Ulrich Drepper]], Don Dugger, Steve Ginzburg, [[Jon &quot;maddog&quot; Hall]], Ron Holt, [[Jordan Hubbard]], Dave Jensen, Kean Johnston, Andrew Josey, Robert Lipe, Bela Lubkin, Tim Marsland, Greg Page,&lt;!--Three other people by that name in WP as of 04.2007--&gt; Ronald Joe Record, Tim Ruckle, Joel Silverstein, Chia-pi Tien and [[Erik Troan]]. Operating systems and companies represented were [[BeOS]], [[BSDI]], [[FreeBSD]], [[Intel]], [[Linux]], [[NetBSD]], [[Santa Cruz Operation|SCO]] and [[SunSoft, Inc.]].

The project progressed and in mid-1998, SCO began developing [[lxrun]], an open-source [[compatibility layer]] capable of running Linux binaries on [[OpenServer]], [[UnixWare]], and [[Solaris (operating system)|Solaris]].  SCO announced official support of lxrun at [[LinuxWorld]] in March 1999. [[Sun Microsystems]] began officially supporting [[lxrun]] for Solaris in early 1999,&lt;ref&gt;{{cite web
  | url = http://www.mavetju.org/mail/view_message.php?list=freebsd-emulation&amp;id=361608
  | title = Bulletin on status of 86open at SCO
  | accessdate = 2008-05-06
  | last = Record
  | first = Ronald
  | date =   1998-05-21
}}&lt;/ref&gt; and has since moved to integrated support of the Linux binary format via [[Solaris Containers for Linux Applications]].

With the BSDs having long supported Linux binaries (through a [[compatibility layer]]) and the main x86 Unix vendors having added support for the format, the project decided that Linux ELF was the format chosen by the industry and &quot;declare[d] itself dissolved&quot; on July 25, 1999.&lt;ref&gt;{{cite web
  | url = http://www.telly.org/86open/
  | title = The86open Project - FINAL UPDATE
  | accessdate = 2007-05-06
  | last = Leibovitch
  | first = Evan
  | date = 1999-07-25
|archiveurl = http://web.archive.org/web/20070227214032/http://www.telly.org/86open/ &lt;!-- Bot retrieved archive --&gt; |archivedate = 2007-02-27}}&lt;/ref&gt;

== FatELF: Universal Binaries for Linux==
[http://icculus.org/fatelf/ FatELF] is an ELF binary-format extension which adds [[Fat binary]] capabilities.&lt;ref name=&quot;fatelfspec&quot;&gt;{{cite web|publisher=icculus.org| title=fatelf-specification v1| url=http://hg.icculus.org/icculus/fatelf/raw-file/tip/docs/fatelf-specification.txt| date=| accessdate=2010-07-25|last=Gordon| first=Ryan}}&lt;/ref&gt; It is aimed for [[Linux]] and other [[Unix-like]] operations systems. Additionally to the CPU architecture abstraction ([[byte order]], [[word size]], [[CPU]] [[instruction set]] etc.), there is the potential advantage of software-platform abstraction e.g. binaries which support multiple kernel [[Application binary interface|ABIs]] versions.
A proof-of-concept [[Ubuntu (operating system)|Ubuntu 9.04]] image ([http://icculus.org/fatelf/vm/ VM image of Ubuntu 9.04 with Fat Binary support]) and development tools are available. As of 2011, support for FatELF is not integrated in the kernel mainline.&lt;ref name=&quot;kernel1&quot;&gt;{{cite web|publisher=icculus.org| title=FatELF: Turns out I liked the uncertainty better.| url=http://icculus.org/cgi-bin/finger/finger.pl?user=icculus&amp;date=2009-11-03&amp;time=19-08-04|date=|accessdate=2010-07-13|last=Gordon|first=Ryan}}&lt;/ref&gt;&lt;ref name=&quot;kernel2&quot;&gt;{{cite web|publisher=osnews.com| title=Ryan Gordon Halts FatELF Project| url=http://www.osnews.com/comments/22446|date=2009-11-03|accessdate=2010-07-05|last=Holwerda|first=Thom}}&lt;/ref&gt;&lt;ref name=selfanatomy&gt;{{cite web|url=http://lwn.net/Articles/392862/ |title=SELF: Anatomy of an (alleged) failure|publisher= Linux Weekly News|date= June 23, 2010|first=Joe|last=Brockmeier|accessdate=2011-02-06}}&lt;/ref&gt;

==See also==
* [[Comparison of executable file formats]]
* [[Portable Executable]]
* [[DWARF]] - Debug With Attributed Record Format
* [[Application binary interface]]
* [[VDSO]] - Virtual DSO

==References==
{{Reflist|2}}

==Further reading==
*{{cite book
 |     title = Linkers and Loaders
 |    author = [[John R. Levine]]
 |     month = October
 |      year = 1999
 | publisher = Morgan-Kauffman
 |      isbn = 1-55860-496-0
 |        url= http://www.iecc.com/linker/ 
 }}
*{{cite paper
 |      title = How To Write Shared Libraries
 |     author = [[Ulrich Drepper]]
 |    version = 4.0
 |       date = 2006-08-20
 |        url = http://people.redhat.com/drepper/dsohowto.pdf
 | accessdate = 2007-06-20
 }}
* ''[http://www-128.ibm.com/developerworks/power/library/pa-spec12/ An unsung hero: The hardworking ELF]'' by Peter Seebach (2005-12-20)
* ''[http://developers.sun.com/solaris/articles/elf.html LibElf and GElf &amp;mdash; A Library to Manipulate ELF Files]'' by Neelakanth Nadgir (August 2001)
* ''[http://www.linuxjournal.com/node/1060/print The ELF Object File Format by Dissection]'' by Eric Youngdale (1995-05-01)
* ''[http://www.muppetlabs.com/~breadbox/software/tiny/teensy.html A Whirlwind Tutorial on Creating Really Teensy ELF Executables for Linux]'' by Brian Raiter
* [http://www.phrack.org/issues.html?issue=61&amp;id=8#article ELF relocation into non-relocatable objects] by Julien Vanegue (2003-08-13)
* [http://www.phrack.org/issues.html?issue=63&amp;id=9#article Embedded ELF debugging without ptrace] by the ELFsh team (2005-08-01)
* ''[http://netwinder.osuosl.org/users/p/patb/public_html/elf_relocs.html Study of ELF loading and relocs]'' by Pat Beirne (1999-08-03)

== External links ==
* [http://www.freebsd.org/doc/en_US.ISO8859-1/books/handbook/binary-formats.html FreeBSD Handbook]: Binary formats
* [http://www.freebsd.org/cgi/man.cgi?query=elf&amp;sektion=5 FreeBSD &lt;tt&gt;elf(5)&lt;/tt&gt; manual page]
* [http://www.netbsd.org/Documentation/elf.html NetBSD ELF FAQ]
* [http://download.oracle.com/docs/cd/E19455-01/816-0559/index.html Solaris's Linker and Libraries Guide] Â©2001 Sun Microsystems
* [http://www.eresi-project.org The ERESI project : reverse engineering on ELF-based operating systems]
* [http://www.linuxtoday.com/developer/1999072600605PS Linux Today article on 86open] July 26, 1999
* [http://lists.debian.org/debian-announce/1997/msg00028.html Announcement of 86open on Debian Announce mailing list] October 10, 1997, [[Bruce Perens]]
* [http://www.groklaw.net/pdf/IBM-835-Exhibit_184.pdf Declaration of Ulrich Drepper (PDF)] in [[The SCO Group]] vs [[IBM]], September 19, 2006
* [http://computerorganizationby-delrosario.blogspot.com/] Check this out [[http://computerorganizationby-delrosario.blogspot.com/],Structured Computer Organization

{{Executables}}

{{DEFAULTSORT:Executable And Linkable Format}}
[[Category:Executable file formats]]

[[cs:Executable and Linkable Format]]
[[de:Executable and Linking Format]]
[[es:Executable and Linkable Format]]
[[fr:Executable and Linking Format]]
[[it:Executable and linkable format]]
[[nl:Executable and Linking Format]]
[[ja:Executable and Linkable Format]]
[[pl:Executable and Linkable Format]]
[[pt:ELF]]
[[ru:Executable and Linkable Format]]
[[sk:Executable and Linkable Format]]
[[sv:UtfÃ¶rbart och lÃ¤nkbart format]]
[[uk:Executable and Linking Format]]
[[zh:å¯å·è¡èå¯éæ¥æ ¼å¼]]</rev></revisions></page></pages></query></api>
