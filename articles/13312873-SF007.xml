<?xml version="1.0"?><api><query><pages><page pageid="13312873" ns="0" title="Clutter (toolkit)"><revisions><rev xml:space="preserve">{{primarysources|date=April 2011}}
{{Infobox software
| name                   = Clutter
| logo                   =
| screenshot             =
| caption                =
| developer              = [[Intel Corporation]]
| released               = 22 June 2006
| latest_release_version = 1.8.0
| latest_release_date    = {{release date and age|2011|09|19}}&lt;ref&gt;[http://www.clutter-project.org/blogs/archive/2011-09/clutter-1.8.0-stable-release Clutter 1.8.0 - stable release].&lt;/ref&gt;
| programming language   = [[C (programming language)|C]]
| operating system       = [[Cross-platform]]
| language               = English
| genre                  = [[Graphics library]]
| license                = [[LGPL]]
| website                = [http://www.clutter-project.org/ www.clutter-project.org]
}}
'''Clutter''' is an [[open source]] graphics library for creating hardware-accelerated user interfaces. It relies upon [[OpenGL]] (1.4+) or [[OpenGL ES]] (1.1 or 2.0) for rendering, can be compiled on different platforms (X11, Darwin and Win32) and has multiple bindings to other languages (including [[Mono (software)|Mono]], [[Perl]], [[Python programming language|Python]], [[Ruby (programming language)|Ruby]] and [[Vala (programming language)|Vala]]). It also supports media playback using [[GStreamer]] and 2D graphics rendering using [[Cairo (graphics)|Cairo]].&lt;ref&gt;http://www.clutter-project.org/docs/clutter/stable/ClutterCairoTexture.html Clutter API Reference: ClutterCairoTexture&lt;/ref&gt;

Clutter was created by [[OpenedHand|OpenedHand Ltd]], now part of [[Intel Corporation|Intel]]. Licensed under the [[GNU Lesser General Public License|LGPL]] v2.1, Clutter is [[free software|free]] and [[open source]] software.&lt;ref&gt;http://www.clutter-project.org/download.html Clutter Toolkit: Download&lt;/ref&gt;

== Programming languages ==
Clutter is implemented using the [[C (programming language)|C programming language]] with a design based on the [[GObject]] [[object system]]. Bindings are available for these languages:

*[[C++]] ([http://git.clutter-project.org/ cluttermm])
*[[Perl]] ([http://git.clutter-project.org/ clutter-perl])
*[[Ruby programming language|Ruby]] ([http://git.clutter-project.org/ rbclutter])
*[[Python (programming language)|Python]] ([http://git.clutter-project.org/ PyClutter])
*[[Vala (programming language)|Vala]] ([http://git.clutter-project.org/ clutter-vala])
*[[C Sharp (programming language)|C#]] ([http://git.clutter-project.org/ clutter-sharp (aka Clutter#)])
*[[JavaScript]] ([http://live.gnome.org/Seed Seed] and [http://live.gnome.org/Gjs/ GJS])
*[[Haskell (programming language)|Haskell]] ([http://hackage.haskell.org/package/clutterhs clutterhs])

== Platforms ==
Clutter is developed on the [[X Window System]], using the GLX extension&lt;ref&gt;http://www.clutter-project.org/docs/clutter/stable/clutter-X11-Specific-Support.html&lt;/ref&gt;. It is also targeted to embedded environments, either using X or the native [[frame buffer]]. As of release 0.6, native support for [[Mac OS X]] has been added&lt;ref&gt;http://blogs.gnome.org/tko/2008/05/26/three-steps-forward-one-giant-step-back/ Life with Clutter on OSX&lt;/ref&gt;. A native [[Microsoft Windows]] backend is supported since the 0.8 release&lt;ref&gt;http://www.clutter-project.org/docs/clutter/stable/clutter-Win32-Specific-Support.html&lt;/ref&gt;. Windows pre-compiled dll's can be found on &lt;ref&gt;http://code.google.com/p/valide/&lt;/ref&gt; or &lt;ref&gt;http://code.google.com/p/x6-development-share/downloads/list&lt;/ref&gt;, however, you can build the latest dll for Windows with MinGW and Bash shell for Windows.

== Design ==
Clutter is a [[scene graph]] based canvas working in [[retained mode]]. Every object on the scene is usually a 2D surface inside a 3D space.

Clutter abstracts the native windowing environment behind a backend, which is also responsible for creating the main container for the scene graph; this top level container is called the ''stage''. Items on the stage are called ''actors''.

Instead of operating on matrices, as does [[OpenGL]], the Clutter developer changes properties of each actor. Clutter will then notice the changes, and render the scene accordingly.

=== Example ===
This example will add a label on the stage.

&lt;source lang=&quot;c&quot;&gt;
ClutterActor *stage = clutter_stage_get_default ();
&lt;/source&gt;
:This statement will retrieve the default stage, which will contain all the actors on the scene.

&lt;source lang=&quot;c&quot;&gt;
ClutterActor *label = clutter_text_new_with_text (&quot;Sans 32px&quot;, &quot;Hello, world&quot;);
clutter_container_add_actor (CLUTTER_CONTAINER (stage), label);
&lt;/source&gt;
:These statements will create a new label, using the Sans font 32 pixels high, and with the &quot;Hello, world&quot; text, and will place it into the stage.

&lt;source lang=&quot;c&quot;&gt;
float x, y;

x = (clutter_actor_get_width (stage) - clutter_actor_get_width (label)) / 2;
y = (clutter_actor_get_height (stage) - clutter_actor_get_height (label)) / 2;
clutter_actor_set_position (label, x, y);
&lt;/source&gt;
:These statements will position the label at the center of the stage, taking into account the stage and the label size.

&lt;source lang=&quot;c&quot;&gt;
clutter_actor_show (stage);
&lt;/source&gt;
:These statements will show the stage. All actors in Clutter are visible unless explicitly hidden, except for the stage; thus showing the stage will automatically display all of its visible children.

== Animation ==
Clutter allows implicit animations of every item on the canvas using special objects called ''behaviours'': each behaviour can be applied to multiple actors, and multiple behaviours can be composed on the same actor. Behaviours handle animations implicitly: the developer specifies the initial and final states, the time (or number of frames) needed to complete the animation, the function of time to be used (linear, sine wave, exponential, etc.), and the behaviour will take care of the [[tweening]]. Clutter provides a generic base [[Class (computer science)|class]] for developers to implement custom behaviours, and various simple classes handling simple properties, like opacity, position on the Z axis (depth), position along a path, rotation, etc.

Since Clutter 1.0, it is also possible to create simple, one-off animations using the ClutterAnimation class and the clutter_actor_animate() convenience function. The clutter_actor_animate() function animates an actor properties between their current state and the specified final state.

=== Example ===
This example will scale the label from its size to a factor of 2 in 2 seconds, using a linear function of time and behaviours:

&lt;source lang=&quot;c&quot;&gt;
ClutterTimeline *timeline = clutter_timeline_new (2000);
ClutterAlpha *alpha = clutter_alpha_new_full (timeline, CLUTTER_LINEAR);
ClutterBehaviour *behaviour = clutter_behaviour_scale_new (alpha,
                                                           1.0, 1.0, /* initial scaling factors */
                                                           2.0, 2.0  /* final scaling factors */ );
clutter_behaviour_apply (behaviour, label);
&lt;/source&gt;
:These statements will create a Timeline with a duration of 2000 milliseconds; an Alpha, binding the Timeline to a linear easing mode; a Behaviour, which will scale any actor to which it is applied between factor 1.0 and factor 2.0 (both horizontally and vertically). Finally, it applies the behaviour to an actor.

The equivalent code using the implicit animations API is:

&lt;source lang=&quot;c&quot;&gt;
clutter_actor_animate (label,          /* the actor to animate */
                       CLUTTER_LINEAR, /* the easing mode */
                       2000,           /* the duration of the animation */
                       &quot;scale-x&quot;, 2.0, /* final horizontal scaling factor */
                       &quot;scale-y&quot;, 2.0, /* final vertical scaling factor */
                       NULL);
&lt;/source&gt;
:This statement will create an implicit ClutterAnimation&lt;ref&gt;http://www.clutter-project.org/docs/clutter/stable/clutter-Implicit-Animations.html&lt;/ref&gt; object, which will animate the provided GObject properties between their current value and the specified final value.

== Interface builder ==
Clutter can build user interfaces using a specialized [[JSON]] dialect&lt;ref&gt;http://www.clutter-project.org/docs/clutter/stable/ClutterScript.html#ClutterScript.description Clutter API Reference: ClutterScript&lt;/ref&gt;. The entire scene graph is defined using JSON types and built at run time through the ClutterScript class.

=== Example ===
This definition will create the main window and place a label with the text ''Hello, world!'' inside it.

&lt;source lang=&quot;javascript&quot;&gt;
{
  &quot;id&quot; : &quot;main-stage&quot;,
  &quot;type&quot; : &quot;ClutterStage&quot;,
  &quot;color&quot; : &quot;white&quot;,
  &quot;width&quot; : 800,
  &quot;height&quot; : 600,
  &quot;title&quot; : &quot;Script demo&quot;,
  &quot;children&quot; : [
    {
      &quot;id&quot; : &quot;hello-label&quot;,
      &quot;type&quot; : &quot;ClutterText&quot;,
      &quot;x&quot; : 400,
      &quot;y&quot; : 300,
      &quot;text&quot; : &quot;Hello, world!&quot;,
      &quot;color&quot; : &quot;black&quot;,
      &quot;font-name&quot; : &quot;Sans 48px&quot;
    }
  ],
  &quot;signals&quot; : [
    { &quot;name&quot; : &quot;destroy&quot;, &quot;handler&quot; : &quot;clutter_main_quit&quot; }
  ]
}
&lt;/source&gt;

The definition can be saved into a file or as a string, and loaded using:

&lt;source lang=&quot;c&quot;&gt;
ClutterScript *script = clutter_script_new ();
GError *error = NULL;
clutter_script_load_from_data (script, description, -1, &amp;error);
if (error)
  {
    g_warning (&quot;Unable to load UI description: %s&quot;, error-&gt;message);
    g_error_free (error);
  }
else
  {
    GObject *stage;

    clutter_script_connect_signals (script, NULL); /* connect the signal handlers */
    stage = clutter_script_get_object (script, &quot;main-stage&quot;); /* get the &quot;main-stage&quot; object */
    clutter_actor_show (CLUTTER_ACTOR (stage));
  }
&lt;/source&gt;

== Integration libraries ==
Clutter can be integrated with other libraries and toolkits, for instance:

* [[GTK+]] applications can embed Clutter stages using a special widget.
* Clutter applications can embed GTK+ widgets using the 'client-side windows' feature since GTK+ 2.18.&lt;ref&gt;http://mail.gnome.org/archives/gnome-announce-list/2009-September/msg00099.html GNOME Mailing Lists: GTK+ 2.18.0 released&lt;/ref&gt;
* Clutter applications can use [[GStreamer]] to play videos directly into a Clutter texture actor.
* Clutter applications can use [[Cairo (graphics)|Cairo]] to draw onto a texture.

== See also ==
{{Portal|Free software}}

* [[List of widget toolkits]]
* [[Core Animation]]
* [[Windows Presentation Foundation]]
* [[Qt (framework)]]

==References==
{{Reflist}}

==External links==
* [http://www.clutter-project.org Clutter homepage]
* [http://www.clutter-project.org/blog/ Clutter project blog]

'''

{{DEFAULTSORT:Clutter (Toolkit)}}
[[Category:Widget toolkits]]

[[de:Clutter (Bibliothek)]]
[[es:Clutter (biblioteca)]]
[[fr:Clutter]]
[[ml:à´àµà´²à´àµà´àµ¼]]
[[pl:Clutter]]
[[ru:Clutter]]
[[uk:Clutter]]</rev></revisions></page></pages></query></api>
