<?xml version="1.0"?><api><query><pages><page pageid="450307" ns="0" title="GNOWSYS"><revisions><rev xml:space="preserve">{{Refimprove|date=June 2011}}
{{Infobox software
|  name = GNOWSYS
|  logo = [[Image:Gnowsys-logo.png|100px]]
|  developer = [[GNU|The GNU Project]]
|  latest_release_version = 1.0 rc1
|  operating_system = [[Cross-platform]]
|  genre = [[Semantic web|Semantic computing]]
|  license = [[GNU General Public License|GPL]]
|  website = [http://www.gnu.org/software/gnowsys/ www.gnu.org/software/gnowsys/]
}}
'''GNOWSYS''' (Gnowledge Networking and Organizing system) is a specification for a generic [[distributed network]] based memory/[[knowledge management]]. Typically computer memory is managed as a tree, or as nested arrays. Our attempt in this project is to represent all forms of [[declarative knowledge|declarative]] and [[procedural knowledge]] as a network, and then develop network processing methods to manage the knowledge.&lt;ref name=&quot;gnu&quot;&gt;[http://www.gnu.org/software/gnowsys/] GNOWSYS: A Kernel for Semantic Computing. &lt;/ref&gt;  It is developed as an application for developing and maintaining [[semantic web]] content. It is written in [[Python (programming language)|Python]]. It works as a [[Plone (software)|Plone]] product in [[Zope]].

The memory of GNOWSYS is designed as a node-oriented space. A node is described by other nodes to which it has links. The nodes are organized and processed according to a complex data structure called the neighborhood.&lt;ref name=&quot;gnu&quot;&gt;&lt;/ref&gt;

==Applications==

The application can be used for web-based knowledge representation and content management projects, for developing structured knowledge bases, as a collaborative authoring tool, suitable for making electronic glossaries, dictionaries and encyclopedias, for managing large web sites or links, developing an online catalogue for a library of any thing including books, to make ontologies, classifying and networking any objects, etc. This tool is also intended to be used for an on-line tutoring system with dependency management between various concepts or software packages.  For example, the dependency relations between [[Debian GNU/Linux]] packages have been represented by the [http://www.gnowledge.org/search_debmap?val=1 gnowledge portal].

==Component Classes==
The kernel is designed to provide support to persistently store highly granular nodes of knowledge representation like terms, predicates and very complex propositional systems like arguments, rules, axiomatic systems, loosely held paragraphs, and more complex structured and consistent compositions. All the component classes in GNOWSYS are classified according to complexity into three groups, where the first two groups are used to express all possible well formed formulae permissible in a first order logic.&lt;ref name=&quot;conceptPaper&quot;&gt;[http://www.hbcse.tifr.res.in/gn/concept_paper.pdf GNOWSYS: A System for Semantic Computing ]&lt;/ref&gt;

===Terms=== 
âObjectâ, âObject Typeâ for declarative knowledge, âEventâ, âEvent Typeâ, for temporal objects, and âMeta Typesâ for expressing upper ontology. The
objects in this group are essentially any thing about which the knowledge engineer intends to express and store in the knowledge base, i.e., they are the objects of discourse. The instances of these component classes can be stored with or without expressing âinstance ofâ or âsub-class ofâ relations among them.

===Predicates=== 
This group consists of âRelationâ, and âRelation Typeâ for expressing declarative knowledge, and âFunctionâ and âFunction Typeâ for expressing procedural knowledge. This group is to express qualitative and quantitative relations among the various instances stored in the knowledge base. While instantiating the predicates can be characterized by their logical properties of relations, quantifiers and cardinality as monadic predicates
of these predicate objects.

===Structures=== 
âSystemâ, âEncapsulated Classâ, âProgramâ, and âProcessâ, are other base classes for complex structures, which can be combined iteratively to produce more complex systems. The component class âSystemâ is to store in the knowledge base a set of propositions composed into ontologies, axiomatic systems, complex systems like say a human body, an artifact like a vehicle etc., with or without consistency check. An âEncapsulated Classâ is to com-
pose declarative and behavioural objects in a flexible way to build classes. A âProgramâ is not only to store the logic of any complete program or a component class, composed from the already available behavioural instances in the knowledge base with built-in connectives (conditions, and loops), but also execute them as web services. A âProcessâ is to structure temporal objects with sequence, concurrency, synchronous or asynchronous specifications.

Every node in the database keeps the neighbourhood information, such as its super-class, sub-class, instance-of, and other relations, in which the object has a role, in the form of predicates. This feature makes computation of drawing graphs and inferences, on the one hand, and dependency and navigation paths on the other hand very easy.  All the data and metadata is indexed in a central catalogue making query and locating resources efficient.

==References==
{{Reflist}}

==External links==
{{Portal|Free software}}
* [http://www.gnowledge.org/ Welcome to Gnowledge!]
* [http://www.gnu.org/software/gnowsys/ GNOWSYS is part of the GNU project.]

{{GNU}}

{{DEFAULTSORT:Gnowsys}}
[[Category:Free cross-platform software]]
[[Category:Free network-related software]]
[[Category:GNU Project software]]
[[Category:Knowledge representation]]
[[Category:Semantic Web]]
[[Category:Zope]]

[[fr:GNOWSYS]]</rev></revisions></page></pages></query></api>
