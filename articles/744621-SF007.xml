<?xml version="1.0"?><api><query><pages><page pageid="744621" ns="0" title="Privilege escalation"><revisions><rev xml:space="preserve">{{refimprove|date=December 2010}}
'''Privilege escalation''' is the act of exploiting a [[Software bug|bug]], design flaw or configuration oversight in an [[operating system]] or [[software application]] to gain elevated access to [[resource (computer science)|resources]] that are normally protected from an application or [[user (computing)|user]]. The result is that an application with more [[privilege (computing)|privileges]] than intended by the [[programmer|application developer]] or [[system administrator]] can perform [[Authorization|unauthorized]] actions.

==Background==
Most computer systems are designed for use with multiple users. [[Privilege (computing)|Privileges]] mean what a user is permitted to do. Common privileges including viewing and editing files, or modifying system files.

Privilege escalation means a user receives privileges they are not entitled to. These privileges can be used to delete files, view private information, or install unwanted programs such as viruses. It usually occurs when a system has a [[software bug|bug]] that allows security to be bypassed or, alternatively, has flawed design assumptions about how it will be used.  Privilege escalation occurs in two forms:

* '''Vertical privilege escalation,''' also known as ''privilege elevation'', where a lower privilege user or application accesses functions or content reserved for higher privilege users or applications (e.g. Internet Banking users can access site administrative functions or the password for smartphone can be bypassed.)
* '''Horizontal privilege escalation,''' where a normal user accesses functions or content reserved for other normal users (e.g. Internet Banking User A accesses the Internet bank account of User B)

==Vertical privilege escalation==
[[File:Priv rings.svg|300px|thumb|right|Privilege rings for the [[x86]] available in [[protected mode]]]]
This type of privilege escalation occurs when the user or process is able to obtain a higher level of access than an administrator or system developer intended, possibly by performing [[Ring (computer security)|kernel-level]] operations.

===Examples of vertical privilege escalation===
In some cases a high-privilege application assumes that it will only be provided with input that matches its interface specification, and doesn't validate the input.  An attacker may then be able to exploit this assumption so that unauthorized code is run with the application's privileges:
*Some [[Windows service]]s are configured to run under the [[Superuser|Local System]] user account. A vulnerability such as a [[buffer overflow]] may be used to execute arbitrary code with privilege elevated to [[Superuser|Local System]].  Alternatively, a system service that is impersonating a lesser user can elevate that user's privileges if errors are not handled correctly while the user is being impersonated (e.g. if the user has introduced a malicious [[exception handling|error handler]])
*Under some legacy versions of the [[Microsoft Windows]] operating system, the All Users [[screensaver]] runs under the [[Superuser|Local System]] account - any account that can replace the current screensaver [[executable|binary]] in the file system or [[Windows Registry|Registry]] can therefore elevate privileges.
*In certain versions of the [[Linux kernel]] it was possible to write a program that would set its current directory to &lt;code&gt;/etc/cron.d&lt;/code&gt;, request that a [[core dump]] be performed in case it crashes and then have itself [[kill (Unix)|killed]] by another process. The core dump file would have been placed at the program's current directory, that is, &lt;code&gt;/etc/cron.d&lt;/code&gt;, and &lt;code&gt;[[cron]]&lt;/code&gt; would have treated it as a text file instructing it to run programs on schedule. Because the contents of the file would be under attackerâs control, the attacker would be able to execute any program with [[superuser|root]] privileges.
*[[Cross Zone Scripting]] is a type of privilege escalation attack in which a website subverts the security model of web browsers so that it can run malicious code on client computers.
*There are also situations where an application can use other high privilege services and has incorrect assumptions about how a client could manipulate its use of these services. An application that can execute [[Command line]] or [[Unix shell|shell]] commands could have a [[Code injection|Shell Injection]] vulnerability if it uses unvalidated input as part of an executed command.  An attacker would then be able to run system commands using the application's privileges.
*[[Texas Instruments]] calculators (particularly the [[TI-85]] and [[TI-82]]) were originally designed to use only interpreted programs written in dialects of [[TI-BASIC]]; however, after users discovered bugs that could be exploited to allow native [[Z-80]] code to run on the calculator hardware, TI released programming data to support third-party development. (This did not carry on to the [[ARM architecture|ARM]]-based [[TI-Nspire]], for which jailbreaks have been found but are still actively fought against by Texas Instruments.)
*Some versions of the [[iPhone]] allow an unauthorised user to access the phone while it is locked.&lt;ref&gt;{{cite web|author=Taimur Asad|url=http://www.redmondpie.com/ios-4.2-to-fix-ios-4.1-lockscreen-security-flaw/|title=Apple Acknowledges iOS 4.1 Security Flaw. Will Fix it in November with iOS 4.2|publisher=RedmondPie|date=October 27, 2010}}&lt;/ref&gt;

==== Jailbreaking ====

A '''jailbreak''' is the act or tool used to perform the act of breaking out of a [[chroot]] or [[FreeBSD jail|jail]] in [[UNIX-like]] operating systems or bypassing [[digital rights management]] (DRM). In the former case, it allows the user to see files outside of the [[filesystem]] that the administrator intends to make available to the application or user in question. In the context of DRM, this allows the user to run arbitrarily defined code on DRM-encumbered devices as well as break out of chroot-like restrictions. DRM-encumbered devices such as the [[Xbox]], [[PlayStation Portable|PSP]], [[iPhone]],  [[iPod touch]] and [[iPad]] have repeatedly been subject to jailbreaks, allowing the execution of arbitrary code, but have had those jailbreaks disabled by vendor updates. 

The iPhone in particular has been a fertile [[History of iOS jailbreaking|battle ground]].&lt;ref&gt;{{cite|url=http://paidcontent.org/article/419-apples-disagreement-with-orange-iphone-hackers/|title=Apple's Disagreement With Orange, IPhone Hackers|publisher=paidContent.org|author=James Quintana Pearce|date=2007-09-27|accessdate=2011-11-25}}&lt;/ref&gt;&lt;ref&gt;[http://www.computerworld.com/action/article.do?command=viewArticleBasic&amp;taxonomyId=11&amp;articleId=9054719&amp;intsrc=hm_topic Reports: Next iPhone update will break third-party apps, bust unlocks] ''[[ComputerWorld]]'' on v1.1.3&lt;/ref&gt; The iOS hacking community however, responds to the newest vendor updates by creating new ways to enable third party apps almost immediately. It was only in the wake of the popularity of the iPhone that the term jailbreaking became well known in popular culture worldwide.{{citation needed|date=August 2008}}. iOS jailbreaking tools include the option to install [[Cydia]], a third-party alternative to the [[App Store]], as a way to find and install system tweaks and binaries. To prevent iOS jailbreaking, Apple has made the device [[boot ROM]] execute checks for [[SHSH blob|SHSH blobs]] in order to disallow uploads of custom kernels and prevent software downgrades to earlier, jailbreakable firmwares. In an &quot;untethered&quot; jailbreak, the iBoot environment is changed to execute a boot ROM exploit and allow submission of a patched low level bootloader or hack the kernel to submit the jailbroken kernel after the SHSH check.

A similar method of jailbreaking exists for [[S60 Platform]] [[smartphones]], which involves installing [[softmod]]-style patches which involves patching certain ROM files while loaded in RAM&lt;ref&gt;[http://dailymobile.se/forum/index.php?topic=1165.0 Link to a forum with a guide on how to jailbreak an S60 platform device]&lt;/ref&gt;&lt;ref&gt;[http://symbianism.blogspot.com/2009/02/helloox-103-one-step-hack-for-symbian.html HelloOX 1.03: one step hack for Symbian S60 3rd ed. phones, and for Nokia 5800 XpressMusic too]&lt;/ref&gt; or edited firmware (similar to the M33 hacked firmware used for the [[PlayStation Portable]])&lt;ref&gt;[http://thinkabdul.com/2007/10/29/tutorial-bypass-symbian-signed-install-unsigned-sisxj2me-midlets-on-nokia-s60-v3-with-full-system-permissions/ Bypass Symbian Signed &amp; Install UnSigned SISX/J2ME Midlets on Nokia S60 v3 with Full System Permissions]&lt;/ref&gt; to circumvent restrictions on [[unsigned code]]. [[Nokia]] has since issued updates to curb unauthorised jailbreaking, in a manner similar to Apple.

[[File:sonyvhotz.djvu|right|200px|thumb|Complaint. Sony vs Hotz, ''et al.'']]

In the case of gaming consoles, jailbreaking is often used to execute [[Homebrew (video games)|homebrew games]]. In 2011, [[Sony]], with assistance from law firm [[Kilpatrick Stockton]], sued 21 year old [[Sony Computer Entertainment America v. George Hotz | George Hotz]] and associates of the group fail0verflow for jailbreaking the [[Playstation 3]].&lt;ref&gt;[http://www.engadget.com/2011/01/12/sony-follows-up-officially-sues-geohot-and-fail0verflow-over-ps/ Sony follows up, officially sues Geohot and fail0verflow over PS3 jailbreak]. Nilay Patel, Engadget (2011-01-12). Retrieved on 2011-02-16.&lt;/ref&gt; &lt;ref&gt; [[Sony Computer Entertainment America v. George Hotz]]&lt;/ref&gt;

Charges filed included:&lt;ref name=complaint&gt;See [[:File:sonyvhotz.djvu]] and the Engadget article&lt;/ref&gt;
*Violating the [[Digital Millenium Copyright Act]] ({{usc|17|1201}})
*Violating the [[Computer Fraud and Abuse Act]] ({{usc|18|1030}})
*[[Contributory liability|Contributory copyright infringement]] ({{usc|17|501}})
*Violating [[California Comprehensive Computer Data Access and Fraud Act]] (Â§ 502)
*[[Breach of Contract]] (related to the [[PlayStation Network]] [[Terms of service|User Agreement]])
*[[Tortious interference]]
*[[Misappropriation]]
*[[Tresspass]]

On April 11, 2011, it was revealed that Hotz and Sony had reached a settlement out of court. This included a permanent injunction against Hotz doing any more hacking work on any Sony products to prevent any future firmwares from being decrypted.

===Mitigation strategies===
Operating systems and users can use the following strategies to reduce the risk of privilege escalation:
* [[Data Execution Prevention]]
* [[Address space layout randomization]] (to make it harder for [[buffer overflow|buffer overruns]] to execute privileged instructions at known addresses in memory)
* Running applications with [[Principle of least privilege|least privilege]] (for example by running [[Internet Explorer]] with the Administrator [[Security Identifier|SID]] disabled in the process [[Session (computer science)|token]]) in order to reduce the ability of buffer overrun [[Exploit (computer security)|exploits]] to abuse the privileges of an elevated user.
* Requiring kernel mode code to be digitally signed.
* Use of up-to-date [[antivirus software]]
* [[Patch (computing)|Patching]]
* Use of [[compiler]]s that trap buffer overruns&lt;ref&gt;{{cite web|url=http://download.microsoft.com/documents/customerevidence/12374_Microsoft_GS_Switch_CS_final.doc|publisher=[[Microsoft]]|title=Microsoft Minimizes Threat of Buffer Overruns, Builds Trustworthy Applications|date=September 2005|accessdate=2008-08-04}} {{Dead link|date=September 2010|bot=H3llBot}}&lt;/ref&gt;
* Encryption of software and/or [[firmware]] components.

==Horizontal privilege escalation==
Horizontal privilege escalation occurs when an application allows the attacker to gain access to [[resource (computer science)|resources]] which normally would have been protected from an application or [[user (computing)|user]]. The result is that the application performs actions with the same but different security context than intended by the [[programmer|application developer]] or [[system administrator]]; this is effectively a limited form of privilege escalation (specifically, the unauthorized assumption of the capability of impersonating other users).

===Examples of horizontal privilege escalation===
This problem often occurs in [[web applications]].  Consider the following example:
* User A has access to his/her bank account in an Internet Banking application.
* User B has access to his/her bank account in the same Internet Banking application.
* The vulnerability occurs when User A is able to access User B's bank account by performing some sort of malicious activity.

This malicious activity may be possible due to common web application weaknesses or vulnerabilities.  

Potential web application vulnerabilities or situations that may lead to this condition include:
* Predictable [[session ID]]'s in the user's [[HTTP cookie]]
* [[Session fixation]]
* [[Cross-site Scripting]]
* Easily guessable [[password]]s
* Theft or hijacking of [[HTTP cookie|session cookies]]
* [[Keystroke logging]]

==See also==
* [[Hacking of consumer electronics]]
* [[Principle of least privilege]]
* [[Privilege separation]]
* [[Privilege revocation]]
* [[Defensive programming]]
* [[World Wide Web#Security|World Wide Web security]]
* [[GetAdmin]]
* [[Illegal number]]
* [[Rooting (Android OS)]]

==References==
{{Reflist}}

{{DEFAULTSORT:Privilege Escalation}}
[[Category:Computer security exploits]]
[[Category:Operating system security]]
[[Category:Privilege escalation exploits| ]]

[[de:Rechteausweitung]]
[[fr:ÃlÃ©vation des privilÃ¨ges]]
[[it:Privilege escalation]]
[[pl:Eskalacja uprawnieÅ]]
[[ru:ÐÐ¾Ð²ÑÑÐµÐ½Ð¸Ðµ Ð¿ÑÐ¸Ð²Ð¸Ð»ÐµÐ³Ð¸Ð¹]]</rev></revisions></page></pages></query></api>
