<?xml version="1.0"?><api><query><redirects><r from="Create portable software" to="Portable application" /></redirects><pages><page pageid="3498830" ns="0" title="Portable application"><revisions><rev xml:space="preserve">{{Original research|article|date=August 2009}}
[[Image:USB flash drive.jpg|thumb|right|200px|A [[USB flash drive|USB drive]] can carry portable applications]]

A '''portable application''' ('''portable app'''), sometimes also called '''[[Standalone software|standalone]]''', is a [[computer]] [[software program]] designed to run independently from an operating system. This type of application is stored on a removable storage device such as a [[Compact Disc|CD]], [[USB flash drive]], [[flash memory|flash card]], or [[floppy disk]] &amp;ndash; storing its program files, configuration information and data on the storage medium alone.

Portable applications can be run on any computer system with which they are compatible but typically require a specific [[operating system]] (such as [[Microsoft Windows]] XP or above, certain version of a [[Linux]] distro, etc.) 

Depending on the operating system, ''portability'' is more or less complex to implement; to operating systems such as [[AmigaOS]], all applications are by definition portable. Portable apps are distinct from ''[[software portability]]'' where software allows its [[source code]] to be [[compiler|compiled]] for different [[computing platform]]s.  

== Portable Windows applications ==
A portable application does not leave its files or settings on the host computer. Typically the application does not write to the [[Windows registry]] or store its configuration files (such as an [[INI file]]) in the user's [[home directory|profile]]; instead, it stores its configuration files in the program's directory. Another requirement, since [[Path (computing)|file paths]] will often differ on changing computers due to variation in [[Drive letter assignment|Windows drive letter assignments]], is the need for applications to store them in a [[Relative path|''relative'']] format. While some applications have options to support this behavior, many programs are not designed to do this. A common technique for such programs is the use of a launcher program to copy necessary settings and files to the host computer when the application starts and move them back to the application's directory when it closes.

An alternative strategy for achieving application portability within Windows, without requiring application source code changes, is [[application virtualization]]: An application is &quot;sequenced&quot; or &quot;packaged&quot; against a runtime layer that transparently intercepts its file system and registry calls, then redirects these to other persistent storage without the application's knowledge. This approach leaves the application itself unchanged, yet portable.

The same approach &lt;ref name=on-the-fly&gt;[http://sphinx-soft.com/Portable Portable Wrapper] {{Dead link|date=October 2011}}&lt;/ref&gt; is used for individual application components: [[Run-time library|run-time libraries]], [[Component Object Model|COM]] components or [[ActiveX]], not only for the entire application. As a result, when individual components are ported in such manner they are able to be: integrated into original portable applications, repeatedly instantiated (virtually installed) with different configurations/settings on the same [[operating system]] (OS) without mutual conflicts. As the ported components do not affect the OS-protected related entities (registry and files), the components will not require administrative privileges for installation and management.

Microsoft saw the need for an application-specific registry &lt;ref name=patent&gt;[http://ip.com/patapp/US20070136241 Portable Application Registry]&lt;/ref&gt; for its Windows operating system as far back as 2005. It eventually incorporated some of this technology, using the techniques mentioned above, via its Application Compatibility Database &lt;ref name=acdb&gt;[http://www.alex-ionescu.com/?p=39 Secrets of the Application Compatibility Database]&lt;/ref&gt; using its Detours &lt;ref name=detours&gt;[http://research.microsoft.com/sn/detours/ Microsoft Research Detours]&lt;/ref&gt; code library, into Windows XP. It did not, however, make any of this technology available via one of its system [[API]]s.

== Portability on Linux and UNIX-like systems ==
{{See also|Autopackage|RUNZ|Zero Install}}

Programs written with a Unix-like base in mind often do not make any assumptions. Whereas many Windows programs assume the user is an [[Superuser|administrator]]âsomething very prevalent in the days of [[Windows 95]]/[[Windows 98|98]]/[[Windows ME|ME]] (and to some degree in [[Windows XP]]/[[Windows 2000|2000]], though not in [[Windows Vista]])âsuch would quickly result in &quot;Permission denied&quot; errors in Unix-like environments since users will be in an unprivileged state much more often. Programs are therefore generally designed around using the &lt;code&gt;HOME&lt;/code&gt; environment variable to store settings (e.g. &lt;code&gt;''$HOME''/.w3m&lt;/code&gt; for the [[w3m]] browser). The dynamic linker provides an environment variable &lt;code&gt;LD_LIBRARY_PATH&lt;/code&gt; that programs can use to load libraries from non-standard directories. Assuming &lt;code&gt;/mnt&lt;/code&gt; contains the portable programs and configuration, a command line may look like:

 HOME=/mnt/home/user LD_LIBRARY_PATH=/mnt/usr/lib /mnt/usr/bin/w3m www.example.com

A linux application without need for a user-interaction (e.g. adapting a script or environment variable) on varying directory paths can be achieved with the [[GNU Compiler Collection|GCC]] [[Linker]] option ''&lt;nowiki&gt;$ORIGIN&lt;/nowiki&gt;'' which allows a relative library search path.&lt;ref&gt;{{cite web|url=http://blog.linuxgamepublishing.com/2009/02/08/our-new-way-to-meet-the-lgpl/|title=Our new way to meet the LGPL|date=2009-02-08|accessdate=2011-03-09|first=Eskild |last=Hustvedt|quote=''You can use a special keyword $ORIGIN to say ârelative to the actual location of the executableâ. Suddenly we found we could use -rpath $ORIGIN/lib and it worked. The game was loading the correct libraries, and so was stable and portable, but was also now completely in the spirit of the LGPL as well as the letter!''}}&lt;/ref&gt;

Not all programs honor this &amp;ndash; some completely ignore $HOME and instead do a user lookup in &lt;code&gt;/etc/passwd&lt;/code&gt; to find the home directory, therefore thwarting portability.

Some Linux distributions already have native support for portable apps ([[Super OS]], with [[RUNZ]] files).

There are also cross-distro package formats that don't require installation or admin rights to run.&lt;ref&gt;{{cite web |url=http://www.elementary-project.com/wiki/index.php?title=AppImages |title=AppImages |accessdate=2010-07-25}}&lt;/ref&gt;

==See also==
*[[Comparison of application launchers]]
*[[Application virtualization]]
*[[Windows To Go]]
*[[Ceedo]]
*[[Java (software platform)|Java]]
*[[LiberKey]]
*[[List of portable software]]
*[[Portable application creators]]
*[[PortableApps.com]]
*[[RUNZ]]
*[[VMware ThinApp]]
*[[Virtual appliance]]
*[[U3]]
*[http://www.zitralia.com Lime Access]

==References==
{{Reflist}}

[[Category:Portable software| ]]

[[ca:AplicaciÃ³ portÃ til]]
[[cs:PÅenosnÃ½ program]]
[[de:Portable Software]]
[[es:AplicaciÃ³n portÃ¡til]]
[[eo:Portebla programaro]]
[[fr:Application portable]]
[[ko:í´ëì© ìíí¸ì¨ì´]]
[[id:Aplikasi portabel]]
[[it:Applicazione portatile]]
[[ja:ãã¼ã¿ãã«ã¢ããªã±ã¼ã·ã§ã³]]
[[no:Portabel programvare]]
[[pl:Aplikacja przenoÅna]]
[[pt:Aplicativo portÃ¡til]]
[[ru:ÐÐµÑÐµÐ½Ð¾ÑÐ¸Ð¼Ð¾Ðµ Ð¿ÑÐ¸Ð»Ð¾Ð¶ÐµÐ½Ð¸Ðµ]]
[[simple:Portable application]]
[[sk:PrenosnÃ½ program]]
[[tr:TaÅÄ±nabilir yazÄ±lÄ±mlar listesi]]
[[uk:ÐÐµÑÐµÐ½Ð¾ÑÐ½Ð° Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð°]]
[[vi:Pháº§n má»m xÃ¡ch tay]]
[[zh:ç¶ è²è»é«]]</rev></revisions></page></pages></query></api>
