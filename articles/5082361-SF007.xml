<?xml version="1.0"?><api><query><pages><page pageid="5082361" ns="0" title="Prelink"><revisions><rev xml:space="preserve">{{merge|Prebinding|discuss=Talk:Prebinding|date=October 2011}}
{{primarysources|date=March 2011}}
{{refimprove|date=March 2010}}
{{lowercase|prelink}}

'''prelink''' is a [[Free software|free]] [[Computer program|program]] written by [[Jakub JelÃ­nek]] of [[Red Hat]] for [[POSIX]]-compliant [[operating system]]s, principally [[Linux]] (because it modifies [[Executable and Linkable Format|ELF]] [[executable]]s). It is intended to speed up a system by reducing the time a program needs to begin. Actual results have been mixed, but it seems to aid systems with a large number of libraries, such as [[KDE]].&lt;ref&gt;
{{cite web
 |      title = ELF Prelinking and what it can do for you
 |     author = James Crasta
 |       date = 2004-05-17
 |        url = http://crast.us/james/articles/prelink.php
 | accessdate = 2006-05-10
}}&lt;/ref&gt;

The equivalent process on [[Mac OS X]] is called &quot;[[prebinding]]&quot;.

== Method ==
Most programs require [[Library (computer science)|libraries]] to function.  Libraries can be integrated into a program once, by a [[Linker (computing)|linker]], when it is [[Compiler|compiled]] ([[Static library|static linking]]) or they can be integrated when the program is run by a [[Loader (computing)|loader]], ([[Library (computer science)#Dynamic linking|dynamic linking]]). Dynamic linking has advantages in code size and management, but every time a program is run, the loader needs to find the relevant libraries. Because the libraries can move around in memory, this causes a performance penalty, and the more libraries that need to be resolved, the greater the penalty. prelink reduces this penalty by using the system's [[dynamic linker]] to reversibly perform this linking in advance (&quot;prelinking&quot; the executable file) by [[Relocation_(computer_science)|relocating]]. Afterward, the program only needs to spend time finding the relevant libraries on being run if, for some reason (perhaps an upgrade), the libraries have changed since being prelinked.

== Randomization ==
prelink is capable of randomly selecting the address base that libraries are loaded at.  This makes it more difficult to perform a [[return-to-libc]] attack on the system, because the addresses used are unique to that system.  The reason prelink does this is because kernel facilities supplying [[address space layout randomization]] for libraries cannot be used in conjunction with prelink without defeating the purpose of prelink and forcing the dynamic linker to perform relocations at program load time.

As stated, prelink and per-process library address randomization cannot be used in conjunction.  In order to avoid completely removing this security enhancement, prelink supplies its own randomization; however, this does not help a general information leak caused by prelink.  Attackers with the ability to read certain arbitrary files on the target system can discover where libraries are loaded in privileged daemons; often libc is enough as it is the most common library used in [[return-to-libc attack]]s.

By reading a shared library file such as libc, an attacker with local access can discover the load address of libc in every other application on the system.  Since most programs link to libc, the libc library file always has to be readable; any attacker with local access may gather information about the address space of higher privileged processes.  Local access may commonly be gained by shell accounts or Web server accounts that allow the use of CGI scripts, which may read and output any file on the system.  Directory traversal vulnerabilities can be used by attackers without accounts if CGI script vulnerabilities are available.

Because prelink is often run periodically, typically every two weeks, the address of any given library has a chance of changing over time.  prelink is often used in an incremental mode in which already prelinked libraries are not altered unless absolutely necessary, so a library may not change its base address when prelink is re-run.  This gives any address derived a half-life of the period in which prelink is run.  Also note that if a new version of the library is installed, the addresses change.

[[Jakub JelÃ­nek]] points out that [[position independent executable]]s ignore prelinking on [[Red Hat Enterprise Linux]] and [[Fedora (operating system)|Fedora Core]], and recommends that network and SUID programs be built [[Position-independent code|PIE]] to facilitate a more secure environment.

== See also ==
*[[Prebinding]]
*[[Address space layout randomization]]
*[[Prefetcher]]

== References ==
{{reflist}}

== Further reading ==
*{{cite paper
 |      title = Prelink
 |     author = Jakub JelÃ­nek
 |    version = Draft 0.7
 |       date = 2004-03-04
 |        url = http://people.redhat.com/jakub/prelink.pdf
 | accessdate = 2006-07-14
 }}

== External links ==
*{{man|8|prelink||prelink ELF shared libraries and binaries to speed up startup time}}
*
*{{cite web
 |      title = Speed up application load time in Ubuntu Linux Hardy Heron using prelink: HOWTO and benchmarks (mention in ubuntuforums/original link is dead)
 |     author = Quintin Riis
 |       date = 2008-06-15
 |        url = http://ubuntuforums.org/showthread.php?t=832615
 | accessdate = 2008-08-22
}}
*{{cite web
 |      title = Gentoo Linux Prelink Guide
 |     author = Stefan Jones
 |       date = 2007-04-02
 |        url = http://www.gentoo.org/doc/en/prelink-howto.xml 
 | accessdate = 2006-05-10
 }}
*{{cite web
 |      title = Prelink and Address Space Randomization
 |     author = John Richard Moser
 |       date = 2006-07-05
 |        url = http://lwn.net/Articles/190139/
 | accessdate = 2006-07-13
 }}

[[Category:Free system software]]
[[Category:Memory management software]]

[[ca:Prelink]]
[[cs:Prelink]]</rev></revisions></page></pages></query></api>
