<?xml version="1.0"?><api><query><redirects><r from="Virtual Application Studio 2008" to="Application virtualization" /></redirects><pages><page pageid="5299251" ns="0" title="Application virtualization"><revisions><rev xml:space="preserve">'''Application virtualization''' is an [[umbrella term]] that describes software technologies that improve portability, manageability and compatibility of [[Application software|applications]] by encapsulating them from the underlying [[operating system]] on which they are executed. A fully virtualized application is not installed in the traditional sense&lt;ref name=&quot;AppVTechnicalOverview&quot;&gt;{{cite web|url=http://www.microsoft.com/systemcenter/appv/techoverview.mspx|title=Microsoft Application Virtualization Technical Overview|publisher=[[Microsoft]]}}&lt;/ref&gt;, although it is still executed as if it were. The application is fooled at runtime into believing that it is directly interfacing with the original operating system and all the resources managed by it, when in reality it is not. In this context, the term &quot;virtualization&quot; refers to the artifact being encapsulated (application), which is quite different to its meaning in [[hardware virtualization]], where it refers to the artifact being abstracted (physical hardware).
 
==Description==
Limited application virtualization is used in modern operating systems such a [[Microsoft Windows]] and [[Linux]].  For example, ''INI file mappings'' were introduced with [[Windows NT]] to virtualize, into the [[Windows Registry|registry]], the legacy [[INI file]]s of applications originally written for [[Windows 3.1]].&lt;ref&gt;{{cite web|url=http://msdn.microsoft.com/en-us/library/ms725501(VS.85).aspx|title=WritePrivateProfileString Function|publisher=[[Microsoft]]|accessdate=2008-06-18}}&lt;/ref&gt;  Similarly, [[Windows Vista]] implements a [[Shim (computing)|shim]] that applies limited file and [[Windows Registry|registry]] virtualization so that legacy applications that try to save user data in a readonly system location that was writable by anyone in early Windows, can still work.&lt;ref&gt;{{cite web|url=http://www.microsoft.com/technet/technetmag/issues/2007/06/UAC/default.aspx|title=Inside Windows Vista User Account Control|author=[[Mark Russinovich]]|publisher=[[Microsoft]]|month=June | year=2007}}&lt;/ref&gt;

[[File:AppVirtual.svg|Right|thumb|Alt=Diagram of application virtualization|Illustration of an application running in a native environment and running in an application virtualization environment]]

Full application virtualization requires a virtualization layer.&lt;ref name=&quot;Husain&quot;&gt;{{cite web|url=http://vdiworks.com/wp/?p=15|title=How to build an Application Virtualization Framework|publisher=[[VDIworks]]|author=Amir Husain|accessdate=2008-07-01}}&lt;/ref&gt; Application virtualization layers replace part of the [[runtime environment]] normally provided by the operating system.  The layer intercepts all file and Registry operations of virtualized applications and transparently redirects them to a virtualized location, often a single file.&lt;ref name=&quot;Gurr&quot;&gt;{{cite web|url=http://www.dell.com/downloads/global/power/ps1q08-20080154-LANDesk.pdf|publisher=[[Dell]]|title=Facilitating Microsoft Windows Vista Migration Through Application Virtualization|date=2008-01-28|accessdate=2008-06-19|author=Coby Gurr|format=PDF}}&lt;/ref&gt;  The application never knows that it's accessing a virtual resource instead of a physical one.  Since the application is now working with one file instead of many files and registry entries spread throughout the system, it becomes easy to run the application on a different computer and previously incompatible applications can be run side-by-side. Examples of this technology for the Windows platform are AppZero, [[BoxedApp]], Cameyo, [[Ceedo]], Evalaze, [[InstallFree]], [[Citrix XenApp]], [[Novell ZENworks Application VIrtualization]], Endeavors Technologies Application Jukebox, [[Microsoft Application Virtualization]], [[Software Virtualization Solution]], Spoon (former Xenocode) and [[VMware ThinApp]].

==Related Technologies==
Technology categories that fall under application virtualization include:

* [[application streaming|Application Streaming]].  Pieces of the application's code, data, and settings are delivered when they're first needed, instead of the entire application being delivered before startup.  Running the packaged application may require the installation of a lightweight client application.  Packages are usually delivered over a protocol such as HTTP, [[CIFS]] or [[RTSP]].&lt;ref name=&quot;CSFB&quot;/&gt;

* [[Desktop Virtualization]]/[[Virtual Desktop Infrastructure]] (VDI).  The application is hosted in a VM or [[blade PC]] that also includes the operating system (OS).  These solutions include a management infrastructure for automating the creation of virtual desktops, and providing for access control to target virtual desktop.  VDI solutions can usually fill the gaps where application streaming falls short.

==Benefits of application virtualization==
* Allows applications to run in environments that do not suit the native application (e.g. [[Wine (software)|Wine]] allows [[Microsoft Windows]] applications to run on [[Linux]]).
* May protect the operating system and other applications from poorly written or buggy code.
* Uses fewer resources than a separate [[virtual machine]].
* Run applications that are not written correctly, for example applications that try to store user data in a read-only system-owned location.
* Run incompatible applications side-by-side, at the same time&lt;ref name=&quot;CSFB&quot;/&gt; and with minimal regression testing against one another.&lt;ref name=&quot;VistaAppCompat&quot;&gt;{{cite web|publisher=[[Microsoft]]|url=http://technet2.microsoft.com/WindowsVista/en/library/006bca87-10df-4174-94b9-ed568a3faf991033.mspx?mfr=true|accessdate=2008-06-19|title=Overview Series: Windows Vista Application Compatibility|http://technet2.microsoft.com/WindowsVista/en/library/006bca87-10df-4174-94b9-ed568a3faf991033.mspx?mfr=true}}&lt;/ref&gt;
* Reduce system integration and administration costs by maintaining a common software baseline across multiple computers in an organization.
* Implement the security [[principle of least privilege]] by removing the requirement for end-users to have Administrator privileges in order to run poorly written applications.
* Simplified [[operating system]] migrations.&lt;ref name=&quot;CSFB&quot;&gt;{{cite web|url=http://www.dabcc.com/documents/DesktopVirtualization_11_26_07.pdf|title=Desktop Virtualization Comes of Age|date=2007-11-26|publisher=[[Credit Suisse]]|accessdate=2008-03-03|format=PDF}}&lt;/ref&gt;
* Accelerated application deployment, through on-demand [[application streaming]].&lt;ref name=&quot;CSFB&quot;/&gt;
* Improved security, by isolating applications from the operating system.&lt;ref name=&quot;CSFB&quot;/&gt;
* Enterprises can easily track license usage. Application usage history can then be used to save on license costs.
* Fast application provisioning to the desktop based upon user's roaming profile.
* Allows applications to be copied to portable media and then imported to client computers without need of installing them.&lt;ref name = Portable virtual application repository&gt;{{cite web|url=http://v-irtualization.com/2009/10/31/virtual-applications-app-v-download-repository/|title=Application Virtualization Download repository, and how to make applications portable|publisher=[http://V-irtualization.com V-irtualization.com]|accessdate=2009-10-30|month=October| year=2009|author=Domagoj Pernar}}&lt;/ref&gt;

==Limitations of application virtualization==
* Not all software can be virtualized.  Some examples include applications that require a [[device driver]] and [[16-bit]] applications that need to run in shared memory space.&lt;ref&gt;{{cite web|url=http://redmondmag.com/features/article.asp?editorialsid=1776|title=Application Virtualization Hits Its Stride|publisher=[http://redmondmag.com Redmondmag.com]|accessdate=2008-06-19|month=September | year=2007|author=Peter Varhol}}&lt;/ref&gt;
* Some types of software such as anti-virus packages and applications that require heavy OS integration, such as [[Stardock]]'s [[WindowBlinds]] or [[TGTSoft]]'s [[StyleXP]] are difficult to virtualize.
* Only file and registry-level compatibility issues between legacy applications and newer operating systems can be addressed by application virtualization. For example, applications that don't manage the [[Dynamic memory allocation|heap]] correctly will not execute on Windows Vista as they still allocate memory in the same way, regardless of whether they are virtualized or not.&lt;ref&gt;{{cite web|url=http://www.blackhat.com/presentations/bh-usa-06/BH-US-06-Marinescu.pdf|title=Windows Vista Heap Management Enhancements|author=Adrian Marinescu|publisher=[[Microsoft]]|date=2006-07-14|accessdate=2008-06-19|format=PDF}}&lt;/ref&gt; For this reason, specialist application compatibility fixes (shims) may still be needed, even if the application is virtualized.&lt;ref&gt;{{cite web|url=http://blogs.msdn.com/cjacks/archive/2008/04/30/can-you-shim-applications-virtualized-in-softgrid.aspx|title=Can You Shim Applications Virtualized in SoftGrid?|publisher=[[Microsoft]]|author=Chris Jackson|date=2008-05-01|accessdate=2008-06-24}}&lt;/ref&gt;

== See also ==
* [[Application streaming]]
* [[Desktop Virtualization]]
* [[Workspace Virtualization]]
* [[Portable application creators]]
* [[Comparison of application virtual machines]]
* [[Emulator]]
* [[Software as a service]]
* [[Shim (computing)]]
* [[Virtual Application]]

==References==
{{reflist}}

[[Category:Virtualization software]]
[[Category:Windows software]]
[[Category:Mac OS software]]
[[Category:Linux emulation software]]
[[Category:Unix emulation software]]

[[hu:AlkalmazÃ¡svirtualizÃ¡ciÃ³]]
[[sv:Applikationsvirtualisering]]</rev></revisions></page></pages></query></api>
