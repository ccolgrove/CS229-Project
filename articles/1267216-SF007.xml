<?xml version="1.0"?><api><query><pages><page pageid="1267216" ns="0" title="Hypervisor"><revisions><rev xml:space="preserve">In [[computing]], a '''hypervisor''', also called '''virtual machine manager''' ('''VMM'''), is one of many [[hardware virtualization]] techniques that allow multiple [[operating system]]s, termed ''guests'', to run concurrently on a host computer. It is so named because it is conceptually one level higher than a [[supervisory program]]. The hypervisor presents to the guest operating systems a [[platform virtualization|virtual operating platform]] and manages the execution of the guest operating systems. Multiple instances of a variety of operating systems may share the virtualized hardware resources. Hypervisors are installed on [[server hardware]] whose only task is to run guest operating systems.

The term is often used to describe the interface provided by the specific [[cloud computing]] functionality [[infrastructure as a service]] (IaaS).&lt;ref&gt;{{cite web | url =http://www-07.ibm.com/solutions/in/education/download/Virtualization%20in%20Education.pdf | title = Virtualization in education | publisher = [[IBM]]| date = October 2007 | accessdate = 6 July 2010}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.itbusinessedge.com/topics/reader.aspx?oss=51359 |title=Microsoft, VMware, Citrix Battle for Hypervisor Cloud &amp;#124; Virtualization |publisher=ITBusinessEdge.com |date= |accessdate=2010-12-10}}&lt;/ref&gt;

The term &quot;hypervisor&quot; was first used in 1965, referring to software that accompanied an IBM [[RPQ]] for the IBM 360/65. It allowed the model IBM 360/65 to share its memory: half acting like a IBM 360; half as an emulated IBM 7080. The software, labeled &quot;hypervisor,&quot; did the switching between the 2 modes on split time basis. The term hypervisor was coined as an evolution of the term &quot;supervisor,&quot; the software that provided control on earlier hardware.&lt;ref&gt;Don Skiba, author of this addition, was the instigator for the RPQ in 1965&lt;/ref&gt;&lt;ref&gt;Documentation for IBM RPQ E880801&lt;/ref&gt; 

==Classification==
Robert P. Goldberg classifies two types of hypervisor:&lt;ref&gt;{{cite journal
|url= http://www.dtic.mil/cgi-bin/GetTRDoc?AD=AD772809&amp;Location=U2&amp;doc=GetTRDoc.pdf
|title=Architectural Principles for Virtual Computer Systems |first=Robert P. |last=Goldberg |publisher=[[Harvard University]] |month=February |year=1973 |pages=22â26 |format=PDF |accessdate=2010-04-12}}
&lt;/ref&gt;
* ''Type 1'' (or ''native'', ''bare metal'') hypervisors run directly on the host's hardware to control the hardware and to manage guest operating systems. A guest operating system thus runs on another level above the hypervisor.

:This model represents the classic implementation of virtual machine architectures; the original hypervisor was [[CP/CMS]], developed at [[IBM]] in the 1960s, ancestor of IBM's [[z/VM]].  A modern equivalent of this is the [[ESXi|VMware ESXi]], [[Hyper-V|Microsoft Hyper-V]] hypervisor, or [[Kernel-based Virtual Machine|KVM]] hypervisor.
* ''Type 2'' (or ''hosted'') hypervisors run within a conventional [[operating system]] environment. With the hypervisor layer as a distinct second software level, guest operating systems run at the third level above the hardware.
In other words, Type 1 hypervisor runs directly on the hardware; a Type 2 hypervisor runs on another operating system, such as FreeBSD&lt;ref&gt;http://callfortesting.org/bhyve/&lt;/ref&gt; or Linux&lt;ref&gt;http://xen.org/&lt;/ref&gt;.

Note: Microsoft [[Hyper-V]] (released in June 2008)&lt;ref&gt;{{cite journal |url=http://download.microsoft.com/download/5/B/4/5B46A838-67BB-4F7C-92CB-EABCA285DFDD/693821ebook.pdf |title=Understanding Microsoft Virtualization R2 Solutions |first=Mitch |last=Tulloch |publisher=[[Microsoft Press]] |month=February |year=2010 |pages=23â29 |format=PDF |accessdate=February 18, 2010}}&lt;/ref&gt; exemplifies a type 1 product that can be mistaken for a type 2. Both the free stand-alone version and the version that is part of the commercial [[Windows Server 2008]] product use a virtualized Windows Server 2008 parent partition to manage the Type 1 Hyper-V hypervisor. In both cases the Hyper-V hypervisor loads prior to the management operating system, and any virtual environments created run directly on the hypervisor, not via the management operating system.

[[File:Hyperviseur.png|center|]]

==Mainframe origins==
The first hypervisor providing [[full virtualization]], IBM's one-off research [[IBM CP-40|CP-40]] system, began production use in [[1967#January|January 1967]], and became the first version of IBM's [[CP/CMS]] operating system. CP-40 ran on a [[System/360|S/360-40]] that was modified at the IBM [[Cambridge Scientific Center]] to support [[Dynamic Address Translation]], a key feature that allowed virtualization. Prior to this time, computer hardware had only been virtualized enough to allow multiple user applications to run concurrently (see [[Compatible Time-Sharing System|CTSS]] and [[IBM M44/44X]]). With CP-40, the hardware's ''supervisor state'' was virtualized as well, allowing multiple operating systems to run concurrently in separate [[virtual machine]] contexts.

Programmers soon re-implemented CP-40 (as [[CP-67]]) for the [[IBM System/360-67]], the first production computer-system capable of [[full virtualization]]. IBM first shipped this machine in 1966; it included page-translation-table hardware for virtual memory, and other techniques that allowed a [[full virtualization]] of all kernel tasks, including I/O and interrupt handling. (Note that its &quot;official&quot; operating system, the ill-fated [[TSS/360]], did not employ full virtualization.) Both CP-40 and CP-67 began production use in 1967. [[CP/CMS]] was available to IBM customers from 1968 to 1972, in source code form without support.

[[CP/CMS]] formed part of IBM's attempt to build robust [[time-sharing]] systems for its [[Mainframe computer|mainframe]] computers. By running multiple operating systems concurrently, the hypervisor increased system robustness and stability: Even if one operating system crashed, the others would continue working without interruption. Indeed, this even allowed [[Development stage#Beta|beta]] or experimental versions of operating systems â or even of new hardware&lt;ref&gt;See [[History of CP/CMS]] for virtual-hardware simulation in the development of the [[System/370]]&lt;/ref&gt; â to be deployed and debugged, without jeopardizing the stable main production system, and without requiring costly additional development systems.

IBM announced its [[System/370]] series in 1970 without any virtualization features, but added them in the August 1972 Advanced Function announcement.  Virtualization has been featured in all successor systems. (All modern-day ({{as of | 2009 | lc = on}}) IBM mainframes, such as the [[zSeries]] line, retain backwards-compatibility with the 1960s-era IBM S/360 line.) The 1972 announcement also included [[VM (operating system)|VM/370]], a reimplementation of [[CP/CMS]] for the S/370. Unlike [[CP/CMS]], IBM provided support for this version (though it was still distributed in source code form for several releases). VM stands for ''[[Virtual Machine]]'', emphasizing that all, and not just some, of the hardware interfaces are virtualized. Both VM and CP/CMS enjoyed early acceptance and rapid development by universities, corporate users, and [[time-sharing]] vendors, as well as within IBM. Users played an active role in ongoing development, anticipating trends seen in modern [[open source]] projects. However, in a series of disputed and bitter battles, time-sharing lost out to batch processing through IBM political infighting, and VM remained IBM's &quot;other&quot; mainframe operating system for decades, losing to [[MVS]]. It enjoyed a resurgence of popularity and support from 2000 as the [[z/VM]] product, for example as the platform for [[Linux for zSeries]].

As mentioned above, the VM control program includes a ''hypervisor-call'' handler which intercepts DIAG (&quot;Diagnose&quot;) instructions used within a virtual machine. This provides fast-path non-virtualized execution of file-system access and other operations. (DIAG is a model-dependent privileged instruction, not used in normal programming, and thus is not virtualized. It is therefore available for use as a signal to the &quot;host&quot; operating system.) When first implemented in [[CP/CMS]] release 3.1, this use of DIAG provided an operating system interface that was analogous to the [[System/360]] SVC (&quot;supervisor call&quot;) instruction, but that did not require altering or extending the system's virtualization of SVC.

In 1985 IBM introduced the [[PR/SM]] hypervisor to manage [[Logical partition (virtual computing platform)|logical partitions]] (LPAR).

==UNIX and Linux servers==
Several factors led to a resurgence around 2005&lt;ref&gt;[http://searchenterpriselinux.techtarget.com/news/1152219/Xen-virtualization-quickly-becoming-open-source-killer-app (virtualization quickly becoming open source 'killer app')]&lt;/ref&gt; in the use of [[Platform virtualization|virtualization]] technology among [[UNIX]] and [[Linux]] server vendors:
* expanding hardware capabilities, allowing each single machine to do more simultaneous work
* efforts to control costs and to simplify management through consolidation of servers
* the need to control large [[multiprocessor]] and [[computer cluster|cluster]] installations, for example in [[server farm]]s and [[render farm]]s
* the improved security, reliability, and device independence possible from hypervisor architectures
* the ability to run complex, OS-dependent applications in different hardware or OS environments

Major [[UNIX]] vendors, including [[Sun Microsystems]], [[HP]], [[IBM]], and [[Silicon Graphics|SGI]], have been selling virtualized hardware since before 2000. These have generally been large systems with hefty, server-class price-tags (in the multi-million dollar range at the high end), although virtualization is also available on some mid-range systems, such as IBM's [[IBM System p|System-P]] servers, [[Sun Microsystems|Sun]]'s CoolThreads T1000, T2000 and T5x00 servers and [[HP Superdome]] series.

Multiple host operating systems have been modified{{By whom|date=April 2010}} to run as guest OSes on Sun's [[Logical Domains]] Hypervisor. {{As of | 2006 | alt = As of late 2006}}, [[Solaris Operating System|Solaris]], [[Linux]] (Ubuntu and Gentoo), and [[FreeBSD]] have been ported to run on top of Hypervisor (and can all run simultaneously on the same processor, as fully virtualized independent guest OSes). Wind River &quot;[[Carrier Grade Linux]]&quot; also runs on Sun's Hypervisor.&lt;ref&gt;[http://www.windriver.com/news/press/pr.html?ID=3881 Wind River To Support Sun's Breakthrough UltraSPARC T1 Multithreaded Next-Generation Processor]&lt;/ref&gt; Full virtualization on [[SPARC]] processors proved straightforward: since its inception in the mid-1980s Sun deliberately kept the SPARC architecture clean of artifacts that would have impeded virtualization. (Compare with virtualization on x86 processors below.)&lt;ref&gt;[https://www.bsi.bund.de/SharedDocs/Downloads/EN/BSI/Publications/Studies/TC_ErgA/TC-ErgA_Part1.pdf?__blob=publicationFile Complementary and Alternative Technologies to Trusted Computing (TC-Erg./-A.), Part 1, A study on behalf of the German Federal Office for Information Security (BSI), Lothar Fritsch, Rani Husseiki, Ammar Alkassar]&lt;/ref&gt;

HP calls its technology to host multiple OS technology on its [[Itanium]] powered systems (Integrity) &quot;Integrity Virtual Machines&quot; (Integrity VM). Itanium can run [[HP-UX]], Linux, Windows and [[OpenVMS]]. Except for OpenVMS, to be supported in a later release, these environments are also supported as virtual servers on HP's Integrity VM platform. The HP-UX operating system hosts the Integrity VM hypervisor layer which allows for many important features of HP-UX to be taken advantage of and provides major differentiation between this platform and other commodity platforms - such as processor hotswap, memory hotswap, and dynamic kernel updates without system reboot. While it heavily leverages HP-UX, the Integrity VM hypervisor is really a hybrid that runs on bare-metal while guests are executing. Running normal HP-UX applications on an Integrity VM host is heavily discouraged{{By whom|date=April 2010}}, because Integrity VM implements its own memory management, scheduling and I/O policies that are tuned for virtual machines and are not as effective for normal applications. HP also provides more rigid partitioning of their Integrity and HP9000 systems by way of VPAR and [[HP nPar (Hard Partitioning)|nPar]] technology, the former offering shared resource partitioning and the later offering complete I/O and processing isolation. The flexibility of virtual server environment (VSE) has given way to its use more frequently in newer deployments.{{Citation needed|date=November 2008}}

IBM provides virtualization partition technology known as [[LPAR|logical partitioning]] (LPAR) on [[System/390]], [[zSeries]], [[pSeries]] and [[iSeries]] systems. For IBM's Power Systems, the Power Hypervisor (PowerVM) functions as a native (bare-metal) hypervisor and provides [[Evaluation Assurance Level|EAL4+]] strong isolation between LPARs. Processor capacity is provided to LPARs in either a dedicated fashion or on an entitlement basis where unused capacity is harvested and can be re-allocated to busy workloads. Groups of LPARs can have their processor capacity managed as if they were in a &quot;pool&quot; - IBM refers to this capability as Multiple Shared-Processor Pools (MSPPs) and implements it in servers with the [[POWER6]] processor. LPAR and MSPP capacity allocations can be dynamically changed. Memory is allocated to each LPAR (at LPAR initiation or dynamically) and is address-controlled by the POWER Hypervisor. For real-mode addressing by operating systems (AIX, Linux, IBM i), the [[IBM POWER|POWER]] processors ([[POWER4]] onwards) have architected virtualization capabilities where a hardware address-offset is evaluated with the OS address-offset to arrive at the physical memory address. Input/Output (I/O) adapters can be exclusively &quot;owned&quot; by LPARs or shared by LPARs through an appliance partition known as the Virtual I/O Server (VIOS). The Power Hypervisor provides for high levels of reliability, availability and serviceability (RAS) by facilitating hot add/replace of many parts (model dependent: processors, memory, I/O adapters, blowers, power units, disks, system controllers, etc.)

Similar trends have occurred with x86/x86_64 server platforms, where  [[open source|open-source]] projects such as [[Xen]] have led virtualization efforts. These include hypervisors built on Linux and Solaris kernels as well as custom kernels. Since these technologies span from large systems down to desktops, they are described in the next section.

==PCs and desktop systems==
Interest in the high-profit server-hardware market sector has led to the development of hypervisors for machines using the Intel x86 instruction set, including for traditional desktop [[IBM PC|PCs]]. One of the early PC hypervisors, the commercial-software [[VMware]], debuted in 1998. [[Parallels, Inc.]] introduced [[Parallels Workstation]], which is primarily used on PCs, in 2005 and [[Parallels Desktop for Mac]], which runs on Mac OS X (10.4 for Intel or higher), in 2006.

The x86 architecture used in most PC systems poses particular difficulties to virtualization. Full virtualization (presenting the illusion of a complete set of standard hardware) on x86 has significant costs in hypervisor complexity and run-time performance. Starting in 2005, CPU vendors have added hardware virtualization assistance to their products, for example: [[Intel]]'s [[Intel VT-x]] (codenamed Vanderpool) and [[AMD]]'s [[AMD-V]] (codenamed Pacifica). These extensions address the parts of x86 that are difficult or inefficient to virtualize, providing additional support to the hypervisor. This enables simpler virtualization code and a higher performance for full virtualization.

An alternative approach requires modifying the guest operating-system to make system calls to the hypervisor, rather than executing machine I/O instructions which the hypervisor then simulates. This is called [[paravirtualization]] in [[Xen]], a &quot;hypercall&quot; in [[Parallels Workstation]], and a &quot;DIAGNOSE code&quot; in IBM's [[VM (operating system)|VM]]. VMware supplements the slowest rough corners of virtualization with device drivers for the guest. All are really the same thing, a system call to the hypervisor below. Some microkernels such as [[Mach microkernel|Mach]] and [[L4 microkernel family|L4]] are flexible enough such that &quot;paravirtualization&quot; of guest operating systems is possible.

In June 2008 Microsoft delivered a new Type-1 hypervisor called [[Hyper-V]] (codenamed &quot;Viridian&quot; and previously referred to as &quot;Windows Server virtualization&quot;); the design features OS integration at the lowest level.&lt;ref&gt;Peter Galli. [http://www.eweek.com/article2/0,1895,1946420,00.asp &quot;Microsoft Sheds More Light on Windows Hypervisor Technology.&quot;] April 5, 2006.&lt;/ref&gt;
Versions of the [[Microsoft Windows|Windows operating system]] beginning with [[Windows Vista]] include extensions to boost performance when running on top of the [[Hyper-V]] hypervisor.

==Embedded systems==
{{As of | 2009}} virtual machines have started to appear in [[embedded systems]], such as [[mobile phones]]. This provides a high-level operating-system interface for application programming, such as [[Linux]] or [[Microsoft Windows]], while at the same time maintaining traditional [[real-time operating system]] (RTOS) APIs. The low-level RTOS environments need to be retained for legacy support, and because the real-time capabilities of high-level OSes are insufficient for many embedded applications.

[[Embedded Hypervisor|Embedded hypervisors]] must therefore have [[real-time computing|real-time]] capability, a design criterion not present for hypervisors used in other domains. The resource-constrained nature of many embedded systems, especially battery-powered mobile systems, imposes a further requirement for small memory-size and low overhead. Finally, in contrast to the ubiquity of the x86 architecture in the PC world, the embedded world uses a wider variety of architectures. Support for virtualization requires [[memory protection]] (in the form of a [[memory management unit]] or at least a memory protection unit) and a distinction between [[user mode]] and [[privileged mode]], which rules out most [[microcontrollers]]. This still leaves [[X86 architecture|x86]], [[MIPS architecture|MIPS]], [[ARM architecture|ARM]] and [[PowerPC]] as widely deployed architectures on medium- to high-end embedded systems.

As manufacturers of embedded systems usually have the source code to their operating systems, they have less need for [[full virtualization]] in this space. Instead, the performance advantages of [[paravirtualization]] make this usually the virtualization technology of choice. Nevertheless, ARM has recently added full virtualization support as an IP option and has included it in their latest high end processor codenamed Eagle.

Other differences between virtualization in server/desktop and embedded environments include requirements for efficient sharing of resources across virtual machines, high-bandwidth, low-latency inter-VM communication, a global view of scheduling and power management, and fine-grained control of information flows.&lt;ref name=Hei08&gt;{{cite conference | author=[[Gernot Heiser]] | title=The role of virtualization in embedded systems | booktitle = Proc. 1st Workshop on Isolation and Integration in Embedded Systems (IIES'08) | pages=11â16 | year=2008 | month=April | url=http://ertos.nicta.com.au/publications/papers/Heiser_08.abstract }}
&lt;/ref&gt;

==Security implications==
The use of hypervisor technology by [[malware]] and [[rootkit]]s installing themselves as a hypervisor below the operating system can make them more difficult to detect because the malware could intercept any operations of the operating system (such as someone entering a password) without the antivirus software necessarily detecting it (since the malware runs below the entire operating system). Implementation of the concept has allegedly occurred in the [[SubVirt]] laboratory rootkit (developed jointly by [[Microsoft]] and [[University of Michigan]] researchers&lt;ref&gt;{{cite web|url=http://www.eecs.umich.edu/virtual/papers/king06.pdf|accessdate=2008-09-15|title=SubVirt: Implementing malware with virtual machines |date=2006-04-03 |publisher=[[University of Michigan]], [[Microsoft]]}}&lt;/ref&gt;) as well as in the [[Blue Pill (malware)|Blue Pill malware]] package. However, such assertions have been disputed by others who claim that it would indeed be possible to detect the presence of a hypervisor-based rootkit.&lt;ref&gt;{{cite web|url=http://www.virtualization.info/2006/08/debunking-blue-pill-myth.html |title=Debunking Blue Pill myth |publisher=Virtualization.info |date= |accessdate=2010-12-10}}&lt;/ref&gt;

In 2009, researchers from Microsoft and [[North Carolina State University]] demonstrated a hypervisor-layer anti-rootkit called [[Hooksafe]] that can provide generic protection against kernel-mode [[rootkit]]s.&lt;ref&gt;{{cite journal|url=http://research.microsoft.com/en-us/um/people/wdcui/papers/hooksafe-ccs09.pdf
|title=Countering Kernel Rootkits with Lightweight Hook Protection|date=11 August 2009|accessdate=2009-11-11|publisher=[[Microsoft]]/[[North Carolina State University]]|author=Zhi Wang, Xuxian Jiang, Weidong Cui &amp; Peng Ning}}
&lt;/ref&gt;

==See also==
* [[Comparison of platform virtual machines]]
* [[Nanokernel]]
* [[Virtual disk image]]
* [[PowerVM]]
* [[Storage_hypervisor|Storage Hypervisor]]

==References==
{{Reflist|2}}

[[Category:Servers]]
[[Category:Virtualization software]]

[[ca:Hipervisor]]
[[cs:Hypervizor]]
[[de:Hypervisor]]
[[es:Hipervisor]]
[[fr:Hyperviseur]]
[[ko:íì´í¼ë°ì´ì ]]
[[it:Hypervisor]]
[[nl:Hypervisor]]
[[ja:ãã¤ãã¼ãã¤ã¶]]
[[pl:Virtual Machine Monitor]]
[[pt:VirtualizaÃ§Ã£o]]
[[ru:ÐÐ¸Ð¿ÐµÑÐ²Ð¸Ð·Ð¾Ñ]]
[[ta:à®®à¯à®¯à¯à®¨à®¿à®à®°à®¾à®à¯à®à®¿]]</rev></revisions></page></pages></query></api>
