<?xml version="1.0"?><api><query><pages><page pageid="4473" ns="0" title="BIOS"><revisions><rev xml:space="preserve">{{About|the personal computer term||Bios (disambiguation){{!}}Bios}}

In [[IBM PC compatible]] computers, the '''basic input/output system (BIOS)''', also known as the '''System BIOS''' or '''[[read-only memory|ROM]] BIOS''' ({{IPA-en|ËbaÉª.oÊs|pron}}), is a [[de facto standard|''de facto'' standard]] defining a [[firmware]] interface.&lt;ref name = &quot;pcguidedefinition&quot;&gt;[http://www.pcguide.com/ref/mbsys/bios/index.htm The PC Guide - System BIOS]&lt;/ref&gt;
[[File:AwardBIOS CMOS Setup Utility.png|thumb|right|Phoenix AwardBIOS [[Nonvolatile BIOS memory|CMOS (non-volatile memory)]] Setup utility on a standard PC]] 

The BIOS software is built into the [[Personal computer|PC]], and is the first code run by a PC when powered on ('boot firmware'). When the PC starts up, the first job for the BIOS is to initialize and identify system devices such as the [[video display card]], [[Computer keyboard|keyboard]] and [[Mouse (computer)|mouse]], [[hard disk drive]], [[optical disc drive]] and other [[Computer hardware|hardware]]. The BIOS then locates [[boot loader]] software held on a [[peripheral device]] (designated as a 'boot device'), such as a [[hard disk]] or a [[CD]]/[[DVD]], and loads and executes that software, giving it control of the PC.&lt;ref&gt;[http://computer.howstuffworks.com/bios1.htm HowStuffWorks: What BIOS Does].&lt;/ref&gt;
This process is known as ''booting'', or booting up, which is short for [[Bootstrapping (computing)|bootstrapping]].

BIOS software is stored on a [[non-volatile]] [[read-only memory|ROM]] chip on the [[motherboard]]. It is specifically designed to work with each particular model of computer, interfacing with various devices that make up the complementary chipset of the system. In modern computer systems the [[EEPROM|BIOS chip's contents can be rewritten]] without removing it from the motherboard, allowing BIOS software to be upgraded in place. 

A BIOS has a [[user interface]] (UI), typically a menu system accessed by pressing a certain key on the keyboard when the PC starts. In the BIOS UI, a user can:
* configure hardware
* set the [[system clock]]
* enable or disable system components
* select which devices are eligible to be a potential boot device
* set various password prompts, such as a password for securing access to the BIOS UI functions itself and preventing malicious users from booting the system from unauthorized peripheral devices.

The BIOS provides a small [[Library (computing)|library]] of basic input/output functions used to operate and control the peripherals such as the keyboard, text display functions and so forth, and these software library functions are callable by external software. In the IBM PC and AT, certain peripheral cards such as hard-drive controllers and video display adapters carried their own BIOS extension [[Option ROM]], which provided additional functionality. [[Operating system]]s and executive software, designed to supersede this basic firmware functionality, will provide replacement software interfaces to applications. 

The [[#Changing role of the BIOS|role of the BIOS]] has changed over time. As of 2011, the BIOS is being replaced by the more complex [[Extensible Firmware Interface]] (EFI) in many new machines, but BIOS remains in widespread use, and EFI booting has only been supported in [[Microsoft]]'s [[operating system]] products supporting [[GUID Partition Table|GPT]]&lt;ref&gt;[http://www.microsoft.com/whdc/device/storage/gpt_faq.mspx Windows and GPT FAQ]&lt;/ref&gt; and [[Linux kernel]]s 2.6.1 and greater builds (and in [[Mac OS X]] on [[AppleâIntel architecture|Intel-based Macs]]).&lt;ref&gt;[http://www.intel.com/technology/efi/ Extensible Firmware Interface (EFI) and Unified EFI (UEFI)]&lt;/ref&gt; However, the distinction between BIOS and EFI is rarely made in terminology by the average computer user, making BIOS a catch-all term for both systems.

== Terminology ==
The term BIOS (Basic Input/Output System) was invented by [[Gary Kildall]] and first appeared in the [[CP/M]] operating system in 1975, describing the machine-specific part of CP/M loaded during boot time that interfaced directly with the [[Computer hardware|hardware]] (CP/M machines usually had only a simple [[boot loader]] in their [[Read-only memory|ROM]]). Later versions of CP/M, as well as [[Concurrent CP/M]], [[Concurrent DOS]], [[DOS Plus]], [[Multiuser DOS]], [[System Manager]]&lt;!-- Datapac System Manager --&gt; and [[REAL/32]] came with an [[XIOS]] (Extended Input/Output System) instead of the BIOS. Most versions of [[DOS]] have a file called &quot;[[IO.SYS]]&quot;, &quot;[[IBMBIO.COM]]&quot;, &quot;IBMBIO.SYS&quot; or &quot;DRBIOS.SYS&quot;, called the DOS&amp;nbsp;BIOS, that is analogous to the CP/M&amp;nbsp;BIOS.

Among other classes of computers, the generic terms ''[[boot monitor]]'', ''[[boot loader]]'' or ''[[Booting|boot ROM]]'' were commonly used. Some Sun and PowerPC-based computers use [[Open Firmware]] for this purpose. There are a few alternatives for Legacy BIOS in the x86 world: [[Extensible Firmware Interface]], [[Open Firmware]] (used on the [[OLPC XO-1]]) and [[coreboot]].

==IBM PC-compatible BIOS chips ==
In principle, the BIOS in ROM was customized to the particular manufacturer's hardware, allowing low-level services (such as reading a keystroke or writing a sector of data to diskette) to be provided in a standardized way to the operating system.&amp;nbsp; For example, an IBM PC might have had either a monochrome or a color display adapter, using different display memory addresses and hardware, but a single, standard, BIOS system call would be invoked to display a character at a specified position on the screen in [[text mode]].

{| align=&quot;right&quot; class=&quot;wikitable&quot;
|- style=&quot;background-color: #efefcc&quot;
| Boot Block
|- style=&quot;background-color: #cccccc&quot;
| [[Desktop Management Interface|DMI]] Block
|- style=&quot;background-color: #acaccc&quot;
| Main Block
|}
[[Image:Phoenix bios.jpg|thumb|150px|[[Phoenix Technologies|PhoenixBIOS]] D686.&amp;nbsp; This BIOS chip is housed in a [[Plastic leaded chip carrier|PLCC]] package, which is, in turn, plugged into a PLCC socket.]] 

Prior to the early 1990s, '''BIOS'''es were stored in [[Read-only memory|ROM]] or [[Programmable read-only memory|PROM]] chips, which could not be altered by users.&amp;nbsp; As its complexity and need for updates grew, and re-programmable parts became more available, BIOS firmware was most commonly stored on [[EEPROM]] or [[flash memory]] devices.&amp;nbsp; According to Robert Braver, the president of the BIOS manufacturer Micro Firmware, '''Flash BIOS''' chips became common around 1995 because the electrically erasable PROM (EEPROM) chips are cheaper and easier to program than standard erasable PROM ([[EPROM]]) chips.&amp;nbsp; EPROM chips may be erased by prolonged exposure to ultraviolet light, which accessed the chip via the window.&amp;nbsp; Chip manufacturers use EPROM programmers (blasters) to program EPROM chips.&amp;nbsp; Electrically erasable (EEPROM) chips allow BIOS reprogramming using higher-than-normal voltage.&lt;ref&gt;&quot;[http://www.smartcomputing.com/editorial/article.asp?article=articles%2F1997%2Fjun97%2F060997%2F060997.asp Decoding RAM &amp; ROM].&quot; ''[[Smart Computing]]''.&amp;nbsp; June 1997.&amp;nbsp; Volume 8, Issue 6.&lt;/ref&gt;&amp;nbsp; BIOS versions are upgraded to take advantage of newer versions of hardware and to correct bugs in previous revisions of BIOSes.&lt;ref&gt;&quot;[http://www.smartcomputing.com/editorial/article.asp?article=articles%2F1996%2Fmar96%2F96n0324%2F96n0324.asp Upgrading Your Flash BIOS For Plug And Play].&quot; ''[[Smart Computing]]''.&amp;nbsp; March 1996.&amp;nbsp; Volume 7, Issue 3.&lt;/ref&gt;

Beginning with the IBM AT, PCs supported a hardware clock settable through BIOS.&amp;nbsp; It had a century bit which allowed for manually changing the century when the year 2000 happened.&amp;nbsp; Most BIOS revisions created in 1995 and nearly all BIOS revisions in 1997 supported [[Y2K bug|the year 2000]] by setting the century bit automatically when the clock rolled past midnight, December 31, 1999.&lt;ref&gt;&quot;[http://www.smartcomputing.com/editorial/article.asp?article=articles/archive/g0704/41u6/41u6.asp&amp;guid= Time To Check BIOS].&quot; ''[[Smart Computing]]''.&amp;nbsp; April 1999.&amp;nbsp; Volume 7, Issue 4.&lt;/ref&gt;

The first flash chips were attached to the [[Industry Standard Architecture|ISA bus]].&amp;nbsp; Starting in 1997, the BIOS flash moved to the [[Low Pin Count|LPC]] bus, a functional replacement for ISA, following a new standard implementation known as &quot;firmware hub&quot; (FWH).&amp;nbsp; In 2006, the first systems supporting a [[Serial Peripheral Interface]] (SPI) appeared, and the BIOS flash moved again.

The size of the BIOS, and the capacities of the ROM, EEPROM and other media it may be stored on, has increased over time as new features have been added to the code; BIOS versions now exist with sizes up to 16 megabytes. Some modern motherboards are including even bigger NAND [[flash memory]] ICs on board which are capable of storing whole compact operating system distribution like some [[Linux distribution]]s. For example, some recent ASUS motherboards included [[SplashTop]] Linux embedded into their NAND flash memory ICs.

== Flashing the BIOS ==
In modern PCs the BIOS is stored in [[EEPROM|rewritable memory]], allowing the contents to be replaced or 'rewritten'. This rewriting of the contents is sometimes termed '''flashing'''. This can be done by a special program, usually provided by the system's manufacturer, or at [[Power-on self-test|POST]], with a BIOS image in a hard drive or [[USB flash drive]]. A file containing such contents is sometimes termed 'a BIOS image'. A BIOS might be reflashed in order to upgrade to a newer version to fix bugs or provide improved performance or to support newer hardware, or a reflashing operation might be needed to fix a damaged BIOS.
A BIOS may also be &quot;flashed&quot; by putting the file on the root of a USB drive and booting.

== BIOS chip vulnerabilities ==
[[File:AMIBIOSIntel CPU uCode Error.jpg|thumb|An [[American Megatrends]] BIOS showing a â[[Intel]] CPU uCode Loading Errorâ after a failed attempt to upload microcode patches into the CPU.]]&lt;!-- probably just because the CPU revision isn't recognized by this BIOS revision.--&gt;

[[EEPROM]] chips are advantageous because they can be easily updated by the user; hardware manufacturers frequently issue BIOS updates to upgrade their products, improve compatibility and remove [[Software bug|bugs]]. However, this advantage had the risk that an improperly executed or aborted BIOS update could render the computer or device unusable. To avoid these situations, more recent BIOSes use a &quot;boot block&quot;; a portion of the BIOS which runs first and must be updated separately. This code verifies if the rest of the BIOS is intact (using [[Hash function|hash]] [[checksum]]s or other methods) before transferring control to it. If the boot block detects any corruption in the main BIOS, it will typically warn the user that a recovery process must be initiated by booting from [[removable media]] (floppy, CD or USB memory) so the user can try flashing the BIOS again. Some [[motherboard]]s have a ''backup'' BIOS (sometimes referred to as DualBIOS boards) to recover from BIOS corruptions.

== Overclocking ==
Some BIOS chips allow [[overclocking]], an action in which the [[Central processing unit|CPU]] is adjusted to a higher [[clock rate]] than its factory preset. Overclocking may, however, seriously compromise system reliability in insufficiently cooled computers and generally shorten component lifespan. Overclocking, incorrectly performed, may also cause component temperatures to rise so quickly that they destroy themselves.

== Virus attacks ==
There are at least four known BIOS attack viruses, two of which were for demonstration purposes. The first one found in the wild was Mebromi, targeting Chinese users.

=== CIH ===
{{Main|CIH (computer virus)}}
The first was a virus which was able to erase Flash ROM BIOS content, rendering computer systems unstable. [[CIH (computer virus)|CIH]], also known as &quot;[[Chernobyl Virus]]&quot;, appeared for the first time in mid-1998 and became active in April 1999. It affected systems' BIOSs and often they could not be fixed on their own since they were no longer able to boot at all. To repair this, flash ROM IC had to be removed from the motherboard to be reprogrammed elsewhere. Damage from CIH was possible since the virus was specifically targeted at the then widespread Intel i430TX motherboard chipset, and the most common operating systems of the time were based on the [[Windows 9x]] family allowing direct hardware access to all programs. 
[[File:Bios_chip-2011-04-11.jpg|thumb|Detached BIOS Chip]]
Modern systems are not vulnerable to CIH because of a variety of chipsets being used which are incompatible with the Intel i430TX chipset, and also other flash ROM IC types. There is also extra protection from accidental BIOS rewrites in the form of boot blocks which are protected from accidental overwrite or dual and quad BIOS equipped systems which may, in the event of a crash, use a backup BIOS. Also, all modern operating systems such as [[Linux]], [[Mac OS X]], [[Windows NT]]-based Windows OS like [[Windows 2000]], [[Windows XP]] and newer, do not allow user-mode programs to have direct hardware access. As a result, as of 2008, CIH has become essentially harmless, at worst causing annoyance by infecting executable files and triggering alerts from antivirus software. Other BIOS viruses remain possible, however;&lt;ref&gt;[http://www.tomshardware.com/news/bios-virus-rootkit-security-backdoor,7400.html New BIOS Virus Withstands HDD Wipes], March 27, 2009 by Marcus Yam - Tom's Hardware US&lt;/ref&gt; since most Windows home users without Windows Vista/7's UAC run all applications with administrative privileges, a modern CIH-like virus could in principle still gain access to hardware.

=== Black Hat 2006 ===
The second one was a technique presented by John Heasman, principal security consultant for UK-based Next-Generation Security Software at the Black Hat Security Conference (2006), where he showed how to elevate privileges and read physical memory, using malicious procedures that replaced normal [[Advanced Configuration and Power Interface|ACPI]] functions stored in flash memory.

=== Persistent BIOS infection ===
The third one, known as &quot;Persistent BIOS infection&quot;, was a method presented in CanSecWest Security Conference (Vancouver, 2009) and SyScan Security Conference (Singapore, 2009) where researchers Anibal Sacco&lt;ref&gt;{{Cite web
| last = Sacco
| first = Anibal
| coauthors = Alfredo OrtÃ©ga
| title = Persistent BIOS Infection
| work = [[Exploiting Stuff]]
| accessdate = 2010-02-06
| url = http://exploiting.wordpress.com/2009/03/23/cansecwest-was-great-here-the-presentation-slides/
}}&lt;/ref&gt; and Alfredo Ortega, from Core Security Technologies, demonstrated insertion of malicious code into the decompression routines in the BIOS, allowing for nearly full control of the PC at every start-up, even before the operating system is booted.

The proof-of-concept does not exploit a flaw in the BIOS implementation, but only involves the normal BIOS flashing procedures. Thus, it requires physical access to the machine or for the user on the operating system to be root. Despite this, however, researchers underline the profound implications of their discovery: âWe can patch a driver to drop a fully working [[rootkit]]. We even have a little code that can remove or disable antivirus.â&lt;ref&gt;{{Cite web
| last = Fisher
| first = Dennis
| title = Researchers unveil persistent BIOS attack methods
| work = [[Threat Post]]
| accessdate = 2010-02-06
| url = http://threatpost.com/en_us/blogs/researchers-unveil-persistent-bios-attack-methods-031909
}}&lt;/ref&gt;

=== Mebromi ===
Mebromi is a [[Trojan horse (computing)|trojan]] primarily targeting Chinese users using the [[AwardBIOS]] and [[Microsoft Windows]].  Upon execution it will first search to see if the system uses the AwardBIOS. If the system does use the AwardBIOS it infects the BIOS. Then it installs a rootkit infecting the [[Master boot record]]. Mebromi selectively seeks out if a computer is protected by [[antivirus]] software made by two Chinese companies: [[Rising Antivirus]] and Jiangmin KV Antivirus.&lt;ref&gt;{{Cite web
| last = Giuliani
| first = Marco
| title = Mebromi: the first BIOS rootkit in the wild
| work = [[blog]]
| accessdate = 2011-09-19
| url = http://blog.webroot.com/2011/09/13/mebromi-the-first-bios-rootkit-in-the-wild/
}}&lt;/ref&gt;
&lt;ref&gt;{{Cite web
| last = 
| first = 
| title = 360åå¸âBMWçæ¯âææ¯åææ¥å
| work = [[blog]]
| accessdate = 2011-09-19
| url = http://bbs.360.cn/4005462/251096134.html
}}&lt;/ref&gt;
&lt;ref&gt;{{Cite web
| last = Yuan
| first = Liang
| title = Trojan.Mebromi
| work = [[Threat Response]]
| accessdate = 2011-09-19
| url = http://www.symantec.com/security_response/writeup.jsp?docid=2011-090609-4557-99
}}&lt;/ref&gt;

== Firmware on adapter cards ==
A computer system can contain several BIOS firmware chips. The motherboard BIOS typically contains code to access hardware components absolutely necessary for bootstrapping the system, such as the keyboard (either [[PS/2]] or on a [[Universal Serial Bus|USB]] human interface device), and storage ([[floppy drive]]s, if available, and PATA or SATA hard disk controllers). In addition, plug-in adapter cards such as [[SCSI]], [[RAID]], [[network interface card]]s, and video boards often include their own BIOS (e.g. [[Video BIOS]]), complementing or replacing the system BIOS code for the given component. (This code is generally referred to as an [[option ROM]]). Even devices built into the motherboard can behave in this way; their option ROMs can be stored as separate code on the main BIOS flash chip, and upgraded either in tandem with, or separately from, the main BIOS.

An add-in card usually only requires an option ROM if it:
* Needs to be used before the operating system can be loaded (usually this means it is required in the bootstrapping process), and
* Is too sophisticated or specific a device to be handled by the main BIOS

Older [[Personal computer|PC]] [[operating system]]s, such as [[MS-DOS]] (including all DOS-based versions of Microsoft Windows), and early-stage bootloaders, may continue to use the BIOS for input and output. However, the restrictions of the BIOS environment means that modern OSes will almost always use their own [[device driver]]s to directly control the hardware. Generally, these device drivers only use BIOS and option ROM calls for very specific (non-performance-critical) tasks, such as preliminary device initialization.

In order to discover memory-mapped [[Industry Standard Architecture|ISA]] option ROMs during the boot process, PC BIOS implementations scan real memory from &lt;code&gt;0xC0000&lt;/code&gt; to &lt;code&gt;0xF0000&lt;/code&gt; on 2 [[KiB]] boundaries, looking for a ROM ''signature'': &lt;code&gt;0xAA55&lt;/code&gt; (0x55 followed by 0xAA, since the [[x86]] architecture is [[little-endian]]). In a valid expansion ROM, this signature is immediately followed by a single byte indicating the number of 512-byte blocks it occupies in real memory. The next byte contains an offset describing the option ROM's [[entry point]], to which the BIOS immediately transfers control. At this point, the expansion ROM code takes over, using BIOS services to register [[interrupt vector]]s for use by post-boot applications, provide a user configuration interface, or display diagnostic information.

There are many methods and utilities for examining the contents of various motherboard BIOS and expansion ROMs, such as Microsoft [[DEBUG (DOS Command)|DEBUG]] or the Unix [[dd (Unix)|dd]].

==BIOS boot specification==
If the expansion ROM wishes to change the way the system boots (such as from a network device or a SCSI adapter for which the BIOS has no driver code), it can use the ''BIOS Boot Specification'' (BBS) [[Application programming interface|API]] to register its ability to do so. Once the expansion ROMs have registered using the BBS APIs, the user can select among the available boot options from within the BIOS's user interface. This is why most BBS compliant PC BIOS implementations will not allow the user to enter the BIOS's user interface until the expansion ROMs have finished executing and registering themselves with the BBS API.{{Citation needed|date=October 2008}}

==Changing role of the BIOS==
Some [[operating system]]s, for example [[MS-DOS]], rely on the BIOS to carry out most input/output tasks within the PC.&lt;ref&gt;[http://www.smartcomputing.com/editorial/article.asp?article=articles%2F1994%2Fjuly94%2Fpcn0713%2Fpcn0713.asp Smart Computing Article - What Is The BIOS?] - Computing Basics July 1994 â¢ Vol.5 Issue 7&lt;/ref&gt; A variety of technical reasons makes it inefficient for some recent operating systems written for [[32-bit]] CPUs such as [[Linux]] and [[Microsoft Windows]] to invoke the BIOS directly. Larger, more powerful, servers and workstations using [[PowerPC]] or [[SPARC]] CPUs by several manufacturers developed a platform-independent [[Open Firmware]] (IEEE-1275), based on the [[Forth (programming language)|Forth]] programming language. It is included with Sun's SPARC computers, IBM's [[RS/6000]] line, and other PowerPC [[Common Hardware Reference Platform|CHRP]] motherboards. Later x86-based personal computer operating systems, like Windows NT, use their own, native drivers which also makes it much easier to extend support to new hardware, while the BIOS still relies on a legacy 16-bit [[real mode]] runtime interface.

There was a similar transition for the Apple Macintosh, where the system software originally relied heavily on the [[Macintosh Toolbox|ToolBox]]âa set of drivers and other useful routines stored in ROM based on Motorola's 680x0 CPUs. These Apple ROMs were replaced by Open Firmware in the [[PowerPC]] [[Macintosh]], then [[Extensible Firmware Interface|EFI]] in Intel Macintosh computers.

Later BIOS took on more complex functions, by way of interfaces such as [[Advanced Configuration and Power Interface|ACPI]]; these functions include [[power management]], [[hot swapping]], thermal management. To quote [[Linus Torvalds]],
the task of BIOS is &quot;just load the [[operating system|OS]] and get the hell out of there&quot;. However BIOS limitations (16-bit processor mode, only 1 MiB addressable space, PC AT hardware dependencies, etc.) were seen as clearly unacceptable for the newer computer platforms. [[Extensible Firmware Interface]] (EFI) is a specification which replaces the runtime interface of the legacy BIOS. Initially written for the Itanium architecture, EFI is now available for [[x86]] and [[x86-64]] platforms; the specification development is driven by The [[Unified EFI Forum]], an industry [[Special Interest Group]].  

Linux supports EFI via the [[elilo]] and [[GNU GRUB]] boot loaders. The open source community increased their effort to develop a replacement for proprietary BIOSes and their future incarnations with an open sourced counterpart through the [[coreboot]] and [[OpenBIOS]]/[[Open Firmware]] projects. [[Advanced Micro Devices|AMD]] provided product specifications for some chipsets, and [[Google]] is sponsoring the project. [[Motherboard]] manufacturer [[Tyan]] offers [[coreboot]] next to the standard BIOS with their [[Opteron]] line of motherboards. [[Micro-Star International|MSI]] and [[Gigabyte Technology]] have followed suit with the MSI K9ND MS-9282 and MSI K9SD MS-9185 resp. the M57SLI-S4 models.

Some BIOSes contain a &quot;SLIC&quot; (software licensing description table), a digital signature placed inside the BIOS by the manufacturer, for example [[Dell]]. This SLIC is inserted in the ACPI table and contains no active code. Computer manufacturers that distribute OEM versions of Microsoft Windows and Microsoft application software can use the SLIC to authenticate licensing to the OEM Windows Installation disk and/or system [[recovery disc]] containing Windows software. Systems having a SLIC can be preactivated with an OEM product key, and they verify an XML formatted OEM certificate against the SLIC in the BIOS as a means of self-activating (see [[System Locked Preinstallation]]). If a user performs a fresh install of Windows, they will need to have possession of both the OEM key and the digital certificate for their SLIC in order to bypass activation; in practice this is extremely unlikely and hence the only real way this can be achieved is if the user performs a restore using a pre-customised image provided by the OEM.

Recent [[Intel]] processors (P6 and P7) have reprogrammable [[microcode]]. The BIOS may contain patches to the processor code to allow errors in the initial processor code to be fixed, updating the processor microcode each time the system is powered up. Otherwise, an expensive processor swap would be required.&lt;ref&gt;Scott Mueller, ''Upgrading and repairing PCs 15th edition'', Que Publishing, 2003 ISBN 0789729741, pages 109-110&lt;/ref&gt; For example, the [[Pentium FDIV bug]] became an expensive fiasco for Intel that required a [[product recall]] because the original Pentium did not have patchable microcode.

==The BIOS business==
The vast majority of PC motherboard suppliers license a BIOS &quot;core&quot; and toolkit from a commercial third-party, known as an &quot;independent BIOS vendor&quot; or IBV. The motherboard manufacturer then customizes this BIOS to suit its own hardware. For this reason, updated BIOSes are normally obtained directly from the motherboard manufacturer.

Major BIOS vendors include [[American Megatrends]] (AMI), [[Insyde Software]], [[Phoenix Technologies]] and [[Byosoft]]. Former vendors include [[Award Software]] and [[Microid Research]] which were acquired by [[Phoenix Technologies]] in 1998. Phoenix has now phased out the Award Brand name. [[General Software]], which was also acquired by Phoenix in 2007, sold BIOS for Intel processor based embedded systems.

== Comparison ==
{| class=&quot;wikitable&quot;
! || AwardBIOS || AMIBIOS &lt;!--latest version is 8 --&gt; || [[SeaBIOS]] &lt;!--latest version is 1.6.3 --&gt;
|-
! License
| Proprietary || Proprietary || [[GNU Lesser General Public License|LGPL]]v3
|-
! 32-bit PCI BIOS calls
| {{Dunno}} || {{Dunno}} || {{Yes}}
|-
! {{Abbr|AHCI|Advanced Host Controller Interface}}
| {{Yes}} || {{Yes}} || {{Yes}}
|-
! {{Abbr|APM|Advanced Power Management}}
| {{Yes}} || {{Yes}} || {{Yes}}
|-
! {{Abbr|BBS|BIOS Boot Specification}}
| {{Yes}} || {{Yes}} &lt;!-- SATA, IDE, USB, LAN, Floppy --&gt; || {{Yes}}
|-
! Boot menu
| {{Yes}} || {{Yes}} || {{Yes}}
|-
! CMOS
| {{Yes}} || {{Yes}} || {{No}}
|-
! {{Abbr|EDD|Enhanced Disk Drive}}
| {{Yes}} || {{Yes}} || {{Yes}} &lt;small&gt;(3.0)&lt;/small&gt;
|-
! {{Abbr|ESCD|Extended System Configuration Data}}
| {{Yes}} || {{Yes}} || {{No}}
|-
! GUID Partition Table (GPT)
| {{Dunno}} || {{No}} || {{No}}
|-
! Language
| Assembly || Assembly || C
|- 
! {{Abbr|LBA|Logical Block Addressing}}
| {{Yes}} &lt;small&gt;(48)&lt;/small&gt; || {{Yes}} &lt;small&gt;(48)&lt;/small&gt; || {{Yes}} &lt;small&gt;(48)&lt;/small&gt;
|-
! MultiProcessor Specification
| {{Yes}} || {{Yes}} || {{Yes}}
|-
! Option ROM
| {{Yes}} || {{Yes}} || {{Yes}}
|-
! Password
| {{Yes}} || {{Yes}} || {{No}}
|-
! {{Abbr|PMM|Post Memory Manager}}
| {{Dunno}} || {{Yes}} || {{Yes}}
|-
! Setup screen
| {{Yes}} || {{Yes}} || {{No}}
|-
! SMBIOS
| {{Yes}} || {{Yes}} || {{Yes}}
|-
! Splash screen
| {{Yes}}
| {{Yes}}
| {{Yes}} &lt;small&gt;(BMP, JPG)&lt;/small&gt; &lt;!-- jpeg would use 16 or 24 bpp video mode, BMP use 24bpp mode only --&gt;
|-
! USB booting
| {{Yes}} || {{Yes}} || {{Yes}}
|-
! USB hub
| {{Dunno}} || {{Dunno}} || {{Yes}}
|-
! USB keyboard
| {{Yes}} || {{Yes}} || {{Yes}}
|-
! USB mouse
| {{Yes}} || {{Dunno}} || {{Yes}}
|}

==See also==
{{Portal|Computing}}
* [[Advanced Configuration and Power Interface]] (ACPI)
* [[ARCS (computing)|ARCS]]
* [[Booting#Boot devices (IBM PC)|Boot devices (IBM PC)]]
* [[BIOS interrupt call]]s
* [[coreboot]], a project whose aim is to create a [[free and open source software|free and open source]] replacement for the BIOS
* [[Unified Extensible Firmware Interface]] (UEFI)
* [[Firmware]]
* [[Input/output base address]]
* [[Nonvolatile BIOS memory]]
* [[Open Firmware]]
* [[Power-on self-test]] (POST)
* [[e820|e820h memory map]]

== References ==
{{Reflist|2}}

== Further reading ==
* {{Cite book
|title=IBM Personal Computer Technical Reference manual
|publisher=IBM Corporation
|edition= First Edition, |date=Revised March 1983}}
* [http://www.howstuffworks.com/bios.htm/printable ''How BIOS Works''] - ''[[howStuffWorks]]''

==External links==
{{Commons category|Basic Input Output System|the BIOS}}
* [http://www.ufoit.com/ PC BIOS Development Forum]
*{{HSW|harvard-extension-schools-computer-science-e-1-understand/2664-changing-pc-bios-settings-video|Changing PC BIOS Settings}}
*{{HSW|885-episode-38-flash-your-bios-video|Flashing the BIOS}}
* [http://www.biosflash.com/ BIOS Recovery, Chip replacement, Update instructions]
* [http://www.bioscentral.com/ BIOS Central - BIOS POST and Beep error codes]
* [http://www.wimsbios.com/ Wim's BIOS Page - Finding BIOS Updates for your PC, Forum]
* [http://miro.pair.com/ TweakBIOS - BIOS information and tweaking]
* [http://www.techarp.com/freebog.aspx BIOS options explained]
* [http://www.wimsbios.com/awardnumbers.jsp Identifying motherboards via Award, AMI and Acer BIOS identification strings]
* [http://www.biosman.com/ Information about the BIOS, POST, BIOS recovery and chip replacement]
* [http://www.tomshardware.com/2006/01/04/bios_from_a_to_z/ BIOS from A to Z]
* [http://www.tomshardware.com/2005/09/22/bios_for_beginners/ BIOS for Beginners]
* [http://exploiting.wordpress.com/2009/03/23/cansecwest-was-great-here-the-presentation-slides/ Persistent BIOS Infection - Exploiting Stuff]
* [http://www.phrack.com/archives/66/p66_0x07_Persistent%20BIOS%20infection_by_aLS%20and%20Alfredo.txt Persistent BIOS Infection  - Phrack #66]
* Some universal and/or firmware flash tools are: [http://www.uniflash.org/ UniFlash] and [http://packages.debian.org/flashrom flashrom - a Linux tool].

=== Specifications ===
* [http://www.ufoit.com/thread-7-1-1.html BIOS Development specifications]
* [http://download.intel.com/design/flcomp/applnots/29219202.PDF Preventing BIOS Failures Using Intel Boot Block Flash Memory] (December 1998)
* [http://www.phoenix.com/resources/specs-bbs101.pdf BIOS Boot Specification] 1.01 (January 1996)
* [http://download.intel.com/design/flcomp/support/applnots/29216101.pdf Implementing a Plug and Play BIOS Using Intel's Boot Block Flash Memory] (February 1995)

{{DEFAULTSORT:Bios}}
[[Category:BIOS]]
[[Category:Boot loaders]]
[[Category:CP/M technology]]
[[Category:DOS technology]]

[[ar:Ø¨ÙÙØ³]]
[[az:BIOS]]
[[bs:Basic Input/Output System]]
[[br:BIOS]]
[[bg:BIOS]]
[[ca:BIOS]]
[[cs:BIOS]]
[[da:BIOS]]
[[de:BIOS]]
[[et:BaasvahetussÃ¼steem]]
[[el:BIOS]]
[[es:BIOS]]
[[eu:BIOS]]
[[fa:Ø¨Ø§ÛØ§Ø³]]
[[fr:Basic Input Output System]]
[[gl:BIOS]]
[[ko:ë°ì´ì¤ì¤]]
[[hi:à¤¬à¤¾à¤¯à¥à¤¸]]
[[hr:BIOS]]
[[id:BIOS]]
[[it:BIOS]]
[[he:BIOS]]
[[ka:BIOS]]
[[kk:ÐÐ°Ð·Ð°Ð»ÑÒ ÐµÐ½Ð³ÑÐ·Ñ-ÑÑÒÐ°ÑÑ Ð¶Ò¯Ð¹ÐµÑÑ]]
[[ku:BIOS]]
[[lv:BIOS]]
[[lb:BIOS]]
[[lt:BIOS]]
[[hu:BIOS]]
[[ml:à´¬à´¯àµà´¸àµ]]
[[ms:BIOS]]
[[nl:BIOS]]
[[ja:Basic Input/Output System]]
[[no:BIOS]]
[[pl:BIOS]]
[[pt:BIOS]]
[[ro:BIOS]]
[[ru:BIOS]]
[[sq:BIOS]]
[[simple:BIOS]]
[[sk:Basic Input Output System]]
[[sl:BIOS]]
[[ckb:Ø¨Ø§ÛÛØ³]]
[[sr:BIOS]]
[[fi:BIOS]]
[[sv:Basic Input/Output System]]
[[tl:BIOS]]
[[th:à¹à¸à¸­à¸­à¸ª]]
[[tr:BIOS]]
[[uk:BIOS]]
[[vi:BIOS]]
[[zh:BIOS]]</rev></revisions></page></pages></query></api>
