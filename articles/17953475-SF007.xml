<?xml version="1.0"?><api><query><redirects><r from="Problems with old software" to="Computer software" /></redirects><pages><page pageid="5309" ns="0" title="Computer software"><revisions><rev xml:space="preserve">{{Redirect|Software}}
'''Computer software''', or just '''software''', is a collection of [[computer program]]s and related [[data]] that provide the instructions for telling a [[computer]] what to do and how to do it.
In other words, software is a conceptual entity which is a set of computer programs, procedures, and associated documentation concerned with the operation of a data processing system. We can also say software refers to one or more computer programs and data held in the storage of the computer for some purposes. In other words software is a set of '''programs, procedures, algorithms''' and its '''documentation'''. Program [[software]] performs the [[Function (engineering)|function]] of the [[Computer program|program]] it implements, either by directly providing [[instruction (computer science)|instructions]] to the computer hardware or by serving as input to another piece of software. The [[Terminology|term]] was coined to contrast to the old term [[hardware]] (meaning physical devices). In contrast to hardware, software is intangible, meaning it &quot;cannot be touched&quot;.&lt;ref&gt;{{cite web
| title = Wordreference.com: WordNet 2.0
| publisher = Princeton University, Princeton, NJ
| url = http://www.wordreference.com/definition/software
| accessdate = 2007-08-19 }}&lt;/ref&gt; Software is also sometimes used in a more narrow sense, meaning [[application software]] only. Sometimes the term includes data that has not traditionally been associated with computers, such as film, tapes, and records.&lt;ref&gt;software..(n.d.). ''Dictionary.com Unabridged (v 1.1)''. Retrieved 2007-04-13, from Dictionary.com website: http://dictionary.reference.com/browse/software&lt;/ref&gt;

==History==
{{For|the history prior to 1946|History of computing hardware}}
The first theory about software was proposed by [[Alan Turing]] in his 1935 essay ''Computable numbers with an application to the Entscheidungsproblem (Decision problem)''.&lt;ref&gt;Hally, Mike (2005:79). ''Electronic brains/Stories from the dawn of the computer age''. British Broadcasting Corporation and Granta Books, London. ISBN 1-86207-663-4.&lt;/ref&gt;
The term &quot;software&quot; was first used in print by [[John W. Tukey]] in 1958.&lt;ref name=&quot;NYTobit&quot;&gt;John Tukey, 85, Statistician; Coined the Word 'Software', New York Times, Obituaries, July 28, 2000 [http://query.nytimes.com/gst/fullpage.html?res=9500E4DA173DF93BA15754C0A9669C8B63&amp;scp=1&amp;sq=&amp;pagewanted=1]&lt;/ref&gt; Colloquially, the term is often used to mean application software. In computer science and [[software engineering]], software is all [[information]] processed by [[computer system]], programs and [[data]].&lt;ref name=&quot;NYTobit&quot;/&gt; The academic fields studying software are [[computer science]] and [[software engineering]].
&lt;!-- replaced the following citation with the reusable one
&gt;&lt;ref&gt;{{cite news|url=http://query.nytimes.com/gst/fullpage.html?res=9500E4DA173DF93BA15754C0A9669C8B63|title=John Tukey, 85, Statistician; Coined the Word 'Software'|publisher=New York Times |date=July 28, 2000 | first=David | last=Leonhardt}}&lt;/ref&gt;
--&gt;


The history of computer software is most often traced back to the first [[software bug]] in 1946{{Citation needed|date=November 2010}}. As more and more programs enter the realm of firmware, and the hardware itself becomes smaller, cheaper and faster as predicted by [[Moore's law]], elements of computing first considered to be software, join the ranks of hardware. Most hardware companies today have more software programmers on the payroll than hardware designers{{Citation needed|date=November 2010}}, since software tools have automated many tasks of [[Printed circuit board]] engineers. Just like the [[Auto industry]], the [[Software industry]] has grown from a few visionaries operating out of their garage with [[prototype]]s. [[Steve Jobs]] and [[Bill Gates]] were the [[Henry Ford]] and [[Louis Chevrolet]] of their times{{Citation needed|date=November 2010}}, who capitalized on ideas already commonly known before they started in the business. In the case of [[Software development]], this moment is generally agreed to be the publication in the 1980s of the specifications for the [[IBM Personal Computer]] published by [[IBM]] employee [[Philip Don Estridge]]. Today his move would be seen as a type of [[crowd-sourcing]].

Until that time, software was ''[[Bundled software|bundled]]'' with the hardware by [[Original equipment manufacturer]]s (OEMs) such as [[Data General]], [[Digital Equipment]] and IBM{{Citation needed|date=November 2010}}. When a customer bought a [[minicomputer]], at that time the smallest computer on the market, the computer did not come with [[Pre-installed software]], but needed to be installed by engineers employed by the OEM. Computer hardware companies not only bundled their software, they also placed demands on the location of the hardware in a refrigerated space called a [[Data center|computer room]]. Most companies had their software on the books for 0 dollars, unable to claim it as an asset (this is similar to financing of popular music in those days). When Data General introduced the [[Data General Nova]], a company called Digidyne wanted to use its [[RDOS]] operating system on its own [[Clone (computing)|hardware clone]]. Data General refused to [[Software license|license their software]] (which was hard to do, since it was on the books as a free asset), and claimed their &quot;bundling rights&quot;. The [[Supreme Court]] set a precedent called Digidyne v. Data General in 1985. The Supreme Court let a 9th circuit decision stand, and Data General was eventually forced into licensing the Operating System software because it was ruled that restricting the license to only DG hardware was an illegal ''tying arrangement''.&lt;ref&gt;[http://www.jstor.org/pss/1372482 Tying Arrangements and the Computer Industry: Digidyne Corp. vs. Data General]&lt;/ref&gt; Soon after, IBM 'published' its [[DOS]] source for free,{{Citation needed|date=September 2011}} and [[Microsoft]] was born. Unable to sustain the loss from lawyer's fees, Data General ended up being taken over by [[EMC Corporation]]. The Supreme Court decision made it possible to value software, and also purchase [[Software patent]]s. The move by IBM was almost a protest at the time. Few in the industry believed that anyone would profit from it other than IBM (through free publicity). Microsoft and [[Apple Inc.|Apple]] were able to thus cash in on 'soft' products. It is hard to imagine today that people once felt that software was worthless without a machine. There are many successful companies today that sell only software products, though there are still many common software licensing problems due to the complexity of designs and poor documentation, leading to [[patent troll]]s.

With open software specifications and the possibility of software licensing, new opportunities arose for software tools that then became the [[de facto standard]], such as DOS for operating systems, but also various proprietary word processing and [[spreadsheet]] programs. In a similar growth pattern, proprietary development methods became standard [[Software development methodology]].

==Overview==
&lt;imagemap&gt;Image:Operating system placement.svg|thumb|A layer structure showing where the [[operating system]] is located on generally used software systems on [[desktop computer|desktops]]
rect 1 1 250 90 [[User (computing)|User]]
rect 1 91 250 180 [[Application software|Application]]
rect 1 181 250 270 [[Operating system|Operating System]]
rect 1 271 250 360 [[Personal computer hardware|Hardware]]

&lt;/imagemap&gt;
Software includes all the various forms and roles that digitally stored ''data'' may have and play in a computer (or similar system), regardless of whether the data is used as ''code'' for a CPU, or other [[interpreter]], or whether it represents other kinds of [[information]]. Software thus encompasses a wide array of products that may be developed using different techniques such as ordinary [[programming languages]], [[scripting languages]], [[microcode]], or an [[Field-programmable gate array|FPGA]] configuration.

The types of software include [[web pages]] developed in languages and frameworks like [[HTML]], [[PHP]], [[Perl]], [[JavaServer Pages|JSP]], [[ASP.NET]], [[XML]], and [[desktop application]]s like [[OpenOffice.org]], [[Microsoft Word]] developed in languages like&amp;nbsp;[[C (programming language)|C]], [[C++]], [[Objective-C]], [[Java (programming language)|Java]], [[C Sharp (programming language)|C#]], or [[Smalltalk]]. [[Application software]] usually runs on an underlying software [[operating system]]s such as [[Linux]] or [[Microsoft Windows]]. Software (or [[firmware]]) is also used in [[video game]]s and for the configurable parts of the [[logic]] systems of [[automobile]]s, [[television]]s, and other [[consumer electronics]].

[[Computer]] software is so called to distinguish it from [[computer hardware]], which encompasses the physical interconnections and devices required to store and execute (or run) the software. At the lowest level, executable code consists of machine language instructions specific to an individual processor. A machine language consists of groups of binary values signifying processor instructions that change the state of the computer from its preceding state. Programs are an ordered sequence of instructions for changing the state of the computer in a particular sequence. It is usually written in [[high-level programming language]]s that are easier and more efficient for humans to use (closer to [[natural language]]) than machine language. High-level languages are compiled or interpreted into machine language object code. Software may also be written in an [[assembly language]], essentially, a mnemonic representation of a machine language using a natural language alphabet. Assembly language must be assembled into object code via an [[Assemblers|assembler]].

==Types of software==
{{Unreferenced section|date=August 2010}}
Practical [[computer system]]s divide [[software system]]s into three major classes{{Citation needed|date=September 2009}}: [[system software]], [[programming software]] and [[application software]], although the distinction is arbitrary, and often blurred.

===System software===
[[System software]] provides the basic functions for computer usage and helps run the [[computer]] [[hardware]] and system. It includes a combination of the following:
* [[Device driver]]s
* [[Operating system]]s
* [[server (computing)|Servers]]
* [[software utility|Utilities]]
* [[Window system]]s

System software is responsible for managing a variety of independent hardware components, so that they can work together harmoniously. Its purpose is to unburden the [[application software]] [[programmer]] from the often complex details of the particular computer being used, including such accessories as [[communications device]]s, printers, device readers, displays and keyboards, and also to partition the computer's resources such as memory and processor time in a safe and stable manner.

===Programming software===
[[Programming software]] usually provides tools to assist a programmer in writing [[computer program]]s, and software using different programming languages in a more convenient way. The tools include:
* [[Compiler]]s
* [[Debugger]]s
* [[interpreter (computing)|Interpreters]]
* [[linker (computing)|Linkers]]
* [[Text editor]]s
An [[Integrated development environment]] (IDE) is a single application that attempts to manage all these functions.

===Application software===
[[Application software]] is developed to aid in any task that benefits from computation. It is a broad category, and encompasses [[software]] of many kinds, including the [[internet browser]] being used to display this page.
This category includes:
* [[Business software]]
* [[Computer-aided design]]
* [[Database]]s
* [[Decision making software]]
* [[Educational software]]
* [[Image editing]]
* [[automation|Industrial automation]]
* [[Mathematical software]]
* [[Medical software]]
* [[List of software for molecular mechanics modeling|Molecular modeling software]]
* [[List of quantum chemistry and solid state physics software|Quantum chemistry and solid state physics software]]
* [[Simulation software]]
* [[Spreadsheet]]s
* [[Telecommunication]]s (i.e., [[Internet|the Internet]] and everything that flows on it)
* [[Video editing  software]]
* [[Video game]]s
* [[Word processing]]

==Software topics==
===Architecture===
{{See also|Software architecture}}
Users often see things differently than programmers. People who use modern general purpose computers (as opposed to [[embedded system]]s, [[analog computer]]s and [[supercomputer]]s) usually see three layers of software performing a variety of tasks: platform, application, and user software.
* Platform software: [[Platform (computing)|Platform]] includes the [[firmware]], [[device driver]]s, an [[operating system]], and typically a [[graphical user interface]] which, in total, allow a user to interact with the computer and its [[peripheral]]s (associated equipment). Platform software often comes bundled with the computer. On a [[Personal computer|PC]] you will usually have the ability to change the platform software.
* Application software: [[Application software]] or Applications are what most people think of when they think of software. Typical examples include office suites and video games. Application software is often purchased separately from computer hardware. Sometimes applications are bundled with the computer, but that does not change the fact that they run as independent applications. Applications are usually independent programs from the operating system, though they are often tailored for specific platforms. Most users think of compilers, databases, and other &quot;system software&quot; as applications.
* User-written software: [[End-user development]] tailors systems to meet users' specific needs. User software include spreadsheet templates and [[word processor]] templates. Even email filters are a kind of user software. Users create this software themselves and often overlook how important it is. Depending on how competently the user-written software has been integrated into default application packages, many users may not be aware of the distinction between the original packages, and what has been added by co-workers.

===Documentation===
{{main|Software documentation}}

Most software has [[software documentation]] so that the [[end user]] can understand the program, what it does, and how to use it. Without clear documentation, software can be hard to useâespecially if it is very specialized and relatively complex like [[Photoshop]] or [[AutoCAD]].

Developer documentation may also exist, either with the code as comments and/or as separate files, detailing how the programs works and can be modified.

===Library===
{{main|Software library}}

An executable is almost always not sufficiently complete for direct execution. [[Software library|Software libraries]] include collections of [[function (computer science)|functions]] and functionality that may be embedded in other applications. Operating systems include many standard Software libraries, and applications are often distributed with their own libraries.

===Standard===
{{main|Software standard}}
Since software can be designed using many different [[programming languages]] and in many different [[operating systems]] and [[operating environment]]s, [[software standard]] is needed so that different software can understand and exchange information between each other. For instance, an [[email]] sent from a [[Microsoft Outlook]] should be readable from [[Yahoo! Mail]] and vice versa.

===Execution===
{{main|Execution (computing)}}

Computer software has to be &quot;loaded&quot; into the [[computer storage|computer's storage]] (such as the [[hard drive]] or [[Computer memory|memory]]). Once the software has loaded, the computer is able to ''execute'' the software. This involves passing [[instruction (computer science)|instructions]] from the application software, through the system software, to the [[hardware]] which ultimately receives the instruction as [[machine language|machine code]]. Each instruction causes the computer to carry out an operation&amp;nbsp;â moving [[data (computing)|data]], carrying out a [[computation]], or altering the [[control flow]] of instructions.

Data movement is typically from one place in memory to another. Sometimes it involves moving data between memory and registers which enable high-speed data access in the CPU. Moving data, especially large amounts of it, can be costly. So, this is sometimes avoided by using &quot;pointers&quot; to data instead. Computations include simple operations such as incrementing the value of a variable data element. More complex computations may involve many operations and data elements together.
&lt;!-- This section is simply to long for this article and needs to be compressed into the intro above, or moved to the articlee itselve ....
Instructions may be performed sequentially, conditionally, or iteratively. Sequential instructions are those operations that are performed one after another. Conditional instructions are performed such that different sets of instructions execute depending on the value(s) of some data. In some languages this is known as an &quot;if&quot; statement. Iterative instructions are performed repetitively and may depend on some data value. This is sometimes called a &quot;loop.&quot; Often, one instruction may &quot;call&quot; another set of instructions that are defined in some other program or [[module (programming)|module]]. When more than one computer processor is used, instructions may be executed simultaneously.

A simple example of the way software operates is what happens when a user selects an entry such as &quot;Copy&quot; from a menu. In this case, a conditional instruction is executed to copy text from data in a 'document' area residing in memory, perhaps to an intermediate storage area known as a 'clipboard' data area. If a different menu entry such as &quot;Paste&quot; is chosen, the software may execute the instructions to copy the text from the clipboard data area to a specific location in the same or another document in memory.

Depending on the application, even the example above could become complicated. The field of software engineering endeavors to manage the complexity of how software operates. This is especially true for software that operates in the context of a large or powerful [[computer system]].

Currently, almost the only limitations on the use of computer software in applications is the ingenuity of the designer/programmer. Consequently, large areas of activities (such as playing grand master level chess) formerly assumed to be incapable of software simulation are now routinely programmed. The only area that has so far proved reasonably secure from software simulation is the realm of human artâ especially, pleasing music and literature.{{Citation needed|date=June 2007}}

Kinds of software by operation: [[computer program]] as [[executable]], [[source code]] or [[script (computer programming)|script]], [[computer configuration|configuration]].--&gt;

===Quality and reliability===
{{main|Software quality|Software testing|Software reliability}}

Software quality is very important, especially for commercial and system software like [[Microsoft Office]], [[Microsoft Windows]] and [[Linux]]. If software is faulty (buggy), it can delete a person's work, crash the computer and do other unexpected things. Faults and errors are called &quot;[[Software bug|bugs]].&quot; Many bugs are discovered and eliminated (debugged) through [[software testing]]. However, software testing rarely&amp;nbsp;â if ever&amp;nbsp;â eliminates every bug; some programmers say that &quot;every program has at least one more bug&quot; (Lubarsky's Law). All major software companies, such as Microsoft, Novell and [[Sun Microsystems]], have their own software testing departments with the specific goal of just testing. Software can be tested through [[unit testing]], [[regression testing]] and other methods, which are done manually, or most commonly, automatically, since the amount of code to be tested can be quite large. For instance, [[NASA]] has extremely rigorous software testing procedures for many operating systems and communication functions. Many NASA based operations interact and identify each other through command programs called software. This enables many people who work at NASA to check and evaluate functional systems overall. Programs containing command software enable hardware engineering and system operations to function much easier together.

===License===
{{main|Software license}}

The software's license gives the user the right to use the software in the licensed environment. Some software comes with the license when purchased off the shelf, or an OEM license when bundled with hardware. Other software comes with a [[free software license]], granting the recipient the rights to modify and redistribute the software. Software can also be in the form of [[freeware]] or [[shareware]].

===Patents===
{{main|Software patent|Software patent debate}}

Software can be patented in some but not all countries; however, [[software patent]]s can be controversial in the software industry with many people holding different views about it. The controversy over software patents is about specific [[algorithms]] or techniques that the software contains, which may not be duplicated by others and considered [[intellectual property]] and [[copyright infringement]] depending on the severity.

==Design and implementation==
{{main|Software development|Computer programming|Software engineering}}
Design and implementation of software varies depending on the complexity of the software. For instance, design and creation of [[Microsoft Word]] software will take much more time than designing and developing [[Microsoft Notepad]] because of the difference in functionalities in each one.

Software is usually designed and created (coded/written/programmed) in [[integrated development environment]]s (IDE) like [[Eclipse (software)|Eclipse]], [[Emacs]] and [[Microsoft Visual Studio]] that can simplify the process and [[compiler|compile]] the program. As noted in different section, software is usually created on top of existing software and the [[application programming interface]] (API) that the underlying software provides like [[GTK+]], JavaBeans or [[Swing (Java)|Swing]]. Libraries (APIs) are categorized for different purposes. For instance, [[JavaBeans]] library is used for designing [[enterprise application]]s, [[Windows Forms]] library is used for designing graphical user interface (GUI) applications like [[Microsoft Word]], and [[Windows Communication Foundation]] is used for designing [[web services]]. Underlying [[computer programming]] [[concept]]s like [[quicksort]], [[hashtable]], [[array data type|array]], and [[binary tree]] can be useful to creating software. When a program is designed, it relies on the API. For instance, if a user is designing a Microsoft Windows desktop application, he/she might use the [[.NET Framework|.NET]] Windows Forms library to design the desktop application and call its APIs like ''Form1.Close()'' and ''Form1.Show()''&lt;ref&gt;{{cite web |url=http://msdn.microsoft.com/en-us/library/default.aspx | title=MSDN Library|accessdate=2010-06-14}}&lt;/ref&gt; to close or open the application and write the additional operations him/herself that it need to have. Without these APIs, the programmer needs to write these APIs him/herself. Companies like [[Sun Microsystems]], [[Novell]], and [[Microsoft]] provide their own APIs so that many applications are written using their [[software library|software libraries]] that usually have numerous APIs in them.

Computer software has special economic characteristics that make its design, creation, and distribution different from most other economic goods.&lt;ref&gt;
v. Engelhardt, Sebastian (2008): [http://ideas.repec.org/p/jrp/jrpwrp/2008-045.html &quot;The Economic Properties of Software&quot;, Jena Economic Research Papers, Volume 2 (2008), Number 2008-045.] (in Adobe [[Portable Document Format|pdf]] format)
&lt;/ref&gt;&lt;ref&gt;
[http://www.doxpara.com/read.php/core.html &quot;Why Open Source Is The Optimum Economic Paradigm for Software&quot;] by Dan Kaminsky 1999
&lt;/ref&gt;
A person who creates software is called a [[programmer]], [[software engineer]], [[software developer]], or [[code monkey]], terms that all have a similar meaning.
==Software types==
Examples of computer software include:
* [[Application software]] includes end-user applications of computers such as [[word processors]] or [[video game]]s, and [[ERP software]] for groups of users.
* [[Middleware]] controls and co-ordinates [[distributed computing|distributed systems]].
* [[Programming language]]s define the [[syntax]] and [[semantics]] of computer programs. For example, many mature banking applications were written in the [[COBOL]] language, originally invented in 1959. Newer applications are often written in more modern programming languages.
* [[System software]] includes [[operating system]]s, which govern computing resources. Today{{When|date=November 2010}} large{{quantify|date=October 2010}} applications running on remote machines such as [[Website]]s are considered{{By whom|date=November 2010}} to be system software, because{{Citation needed|date=October 2010}} the end-[[user interface]] is generally through a [[graphical user interface]], such as a [[web browser]].
* ''Teachware'' is any special breed of software or other means of product dedicated to education purposes in software engineering and beyond in general education&lt;ref&gt;[www.dict.cc/englisch-deutsch/teachware.html Translation 'teachware']&lt;/ref&gt;.
* [[Testware]] is any software for testing hardware or software.
* [[Firmware]] is low-level software often stored on electrically programmable memory devices. Firmware is given its name because it is treated like hardware and run (&quot;executed&quot;) by other software programs. Firmware often is not accessible for change by other entities but the developers' enterprises.
* Shrinkware is the older name given to consumer-purchased software, because it was often sold in retail stores in a [[Shrink wrap|shrink-wrapped]] box.
* [[Device drivers]] control parts of computers such as [[disk drive]]s, [[printer (computing)|printers]], [[CD drive]]s, or [[computer monitor]]s.
* [[Programming tool]]s help conduct computing tasks in any category listed above. For programmers, these could be tools for [[debugging]] or [[reverse engineering]] older [[legacy system]]s in order to check [[source code compatibility]].

==Industry and organizations==
{{main|Software industry}}

A great variety of software companies and programmers in the world comprise a software industry. Software can be quite a profitable industry: [[Bill Gates]], the founder of [[Microsoft]] was the richest person in the world in 2009 largely by selling the [[Microsoft Windows]] and [[Microsoft Office]] software products. The same goes for [[Larry Ellison]], largely through his [[Oracle database]] software. Through time the software industry has become increasingly specialized.

Non-profit software organizations include the [[Free Software Foundation]], [[GNU Project]] and [[Mozilla Foundation]]. Software standard organizations like the [[W3C]], [[IETF]] develop software standards so that most software can interoperate through standards such as [[XML]], [[HTML]], [[HTTP]] or [[FTP]].

Other well-known large software companies include [[Novell]], [[SAP AG|SAP]], [[Symantec]], [[Adobe Systems]], and [[Corel]], while small companies often provide innovation.

==See also==
*[[List of software]]
*[[hardware]]

==References==
&lt;references /&gt;

==External links==
{{Commons}}
{{Wiktionary|software}}
* [[wikia:software|Software Wikia]]

{{DEFAULTSORT:Computer Software}}
[[Category:Software| ]]

[[af:Sagteware]]
[[als:Software]]
[[ar:Ø¨Ø±ÙØ¬ÙØ©]]
[[an:Software]]
[[ast:Programa d'ordenador]]
[[az:Proqram tÉminatÄ±]]
[[bn:à¦à¦®à§à¦ªà¦¿à¦à¦à¦¾à¦° à¦¸à¦«à¦à¦à¦¯à¦¼à§à¦¯à¦¾à¦°]]
[[zh-min-nan:NÅg-thÃ©]]
[[be:ÐÑÐ°Ð³ÑÐ°Ð¼Ð½Ð°Ðµ Ð·Ð°Ð±ÐµÑÐ¿ÑÑÑÐ½Ð½Ðµ]]
[[be-x-old:ÐÑÐ°Ð³ÑÐ°Ð¼Ð½Ð°Ðµ Ð·Ð°Ð±ÐµÑÑÐ¿ÑÑÑÐ½ÑÐ½Ðµ]]
[[bg:Ð¡Ð¾ÑÑÑÐµÑ]]
[[bs:Softver]]
[[br:Meziant]]
[[ca:Programari]]
[[cs:Software]]
[[cy:Meddalwedd]]
[[da:Computerprogram]]
[[de:Software]]
[[et:Tarkvara]]
[[el:ÎÎ¿Î³Î¹ÏÎ¼Î¹ÎºÏ]]
[[es:Software]]
[[eo:Programaro]]
[[eu:Software]]
[[fa:ÙØ±ÙâØ§ÙØ²Ø§Ø±]]
[[fo:RitbÃºnaÃ°ur]]
[[fr:Logiciel]]
[[ga:BogearraÃ­]]
[[gd:Bathar-bog]]
[[gl:Software]]
[[gu:àª¸à«àª«à«àªàªµà«àª°]]
[[ko:ì»´í¨í° ìíí¸ì¨ì´]]
[[hi:à¤¸à¥à¤«à¤¼à¥à¤à¤µà¥à¤¯à¤°]]
[[hsb:Softwara]]
[[hr:Programska podrÅ¡ka]]
[[ilo:Software]]
[[id:Perangkat lunak]]
[[ia:Programmatura]]
[[iu:áá¿á¦áá ááááá­áá áááááá]]
[[is:HugbÃºnaÃ°ur]]
[[it:Software]]
[[he:×ª××× ×]]
[[kn:à²¤à²à²¤à³à²°à²¾à²à²¶]]
[[kk:ÐÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð°Ð»ÑÒ Ð¶Ð°ÑÐ°ÒÑÐ°Ð¼Ð°]]
[[ku:Nermalav]]
[[lo:àºàº­àºàºà»à»àº§àº£à»â]]
[[la:Programmatura computratralis]]
[[lv:ProgrammatÅ«ra]]
[[lb:Software]]
[[lt:PrograminÄ Ä¯ranga]]
[[ln:LitÃ¡mbwisi]]
[[lmo:Prugramadura]]
[[hu:Szoftver]]
[[mk:ÐÑÐ¾Ð³ÑÐ°Ð¼ÑÐºÐ° Ð¾Ð¿ÑÐµÐ¼Ð°]]
[[mg:Rindrankajy]]
[[ml:à´à´®àµà´ªàµà´¯àµà´àµà´àµ¼ à´¸àµà´«àµâà´±àµà´±àµâà´µàµà´¯àµ¼]]
[[mr:à¤¸à¥à¤«à¥à¤à¤µà¥à¤à¤°]]
[[arz:Ø³ÙÙØª ÙÙØ±]]
[[ms:Perisian]]
[[mn:ÐÑÐ¾Ð³ÑÐ°Ð¼ ÑÐ°Ð½Ð³Ð°Ð¼Ð¶]]
[[my:áá½ááºáá»á°áá¬ áá±á¬á·ááºáá²ááº]]
[[nl:Software]]
[[ne:à¤¸à¤«à¥à¤à¤µà¥à¤¯à¤°]]
[[new:à¤¸à¤«à¥à¤à¤µà¥à¤°]]
[[ja:ã½ããã¦ã§ã¢]]
[[no:Programvare]]
[[nn:Programvare]]
[[oc:Logicial]]
[[mhr:ÐÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ðµ Ð²Ð¾ÑÐ°Ò¥Ð´ÑÑ]]
[[pnb:Ø³ÙÙÙ¹ ÙØ¦Ø±]]
[[nds:Software]]
[[pl:Oprogramowanie]]
[[pt:Software]]
[[ro:Software]]
[[qu:Llamp'u kaq]]
[[rue:ÐÑÐ¾ÒÑÐ°Ð¼Ð¾Ð²Ðµ Ð·Ð°Ð±ÐµÐ·Ð¿ÐµÑÑÐ½Ñ]]
[[ru:ÐÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð½Ð¾Ðµ Ð¾Ð±ÐµÑÐ¿ÐµÑÐµÐ½Ð¸Ðµ]]
[[sah:Ð¡Ð¾ÑÑÑÑÑ]]
[[sq:Software]]
[[scn:Software]]
[[si:à¶´à¶»à·à¶à¶«à¶ à¶¸à·à¶¯à·à¶à·à¶à¶]]
[[simple:Computer software]]
[[sk:SoftvÃ©r]]
[[sl:Programska oprema]]
[[so:Software]]
[[sr:Ð¡Ð¾ÑÑÐ²ÐµÑ]]
[[sh:Softver]]
[[fi:Ohjelmisto]]
[[sv:Programvara]]
[[tl:Software]]
[[ta:à®®à¯à®©à¯à®ªà¯à®°à¯à®³à¯]]
[[tt:ÐÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð° Ð±ÐµÐ»ÓÐ½ ÑÓÑÐ¼Ð¸Ð½ Ð¸ÑÐµÐ»ÐµÑ]]
[[te:à°à°à°ªà±à°¯à±à°à°°à± à°¸à°¾à°«à±à°à±âà°µà±à°°à±]]
[[th:à¸à¸­à¸à¸à¹à¹à¸§à¸£à¹]]
[[tr:YazÄ±lÄ±m]]
[[uk:ÐÑÐ¾Ð³ÑÐ°Ð¼Ð½Ðµ Ð·Ð°Ð±ÐµÐ·Ð¿ÐµÑÐµÐ½Ð½Ñ]]
[[ur:ÙØµÙØ¹ ÙØ·ÛÙ]]
[[vec:Programatura]]
[[vi:Pháº§n má»m]]
[[war:Software]]
[[yi:×××××××××¨×]]
[[zh-yue:é»è¦è»ä»¶]]
[[bat-smg:PruogramÄnÄ Ä«ronga]]
[[zh:è½¯ä»¶]]</rev></revisions></page></pages></query></api>
