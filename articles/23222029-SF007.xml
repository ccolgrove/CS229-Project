<?xml version="1.0"?><api><query><pages><page pageid="23222029" ns="0" title="Ptrace"><revisions><rev xml:space="preserve">{{Lowercase|ptrace}}
'''ptrace''' is a [[system call]] found in several [[Unix]] and [[Unix-like]] [[operating system]]s.  By using ptrace (the name is an abbreviation of &quot;process trace&quot;) one [[Process (computing)|process]] can control another, enabling the controller to inspect and manipulate the internal state of its target. ptrace is used by [[debugger]]s and other code-analysis tools, mostly as aids to software development.

==Uses==
ptrace is used by debuggers (such as [[GNU Debugger|gdb]] and [[dbx (debugger)|dbx]]), by tracing tools like [[strace]] and [[ltrace]], and by [[code coverage]] tools. ptrace is also used by specialised programs to patch running programs, to avoid unfixed bugs or to overcome security features.

By attaching to another process using the ptrace call, a tool has extensive control over the operation of its target. This includes manipulation of its [[file descriptor]]s, memory, and [[processor register|registers]].  It can [[stepping (debugging)|single-step]] through the target's code, can observe system calls and their results, and can manipulate the target's [[signal (computing)|signal]] handlers and both receive and send signals on its behalf. The ability to write into the target's memory allows not only its data store to be changed, but also the applications own [[code segment]], allowing the controller to install [[breakpoint]]s and patch the running code of the target.&lt;ref name=&quot;retty&quot;/&gt;

As the ability to inspect and alter another process is very powerful, ptrace can attach only to processes that the owner can send signals to (typically only their own processes); the [[superuser]] account can ptrace almost any process (except [[init]]). In Linux systems that feature capabilities based security, the ability to ptrace is further limited by the CAP_SYS_PTRACE capability.&lt;ref name=&quot;linux_manpage&quot;/&gt;  In [[FreeBSD]], it's limited by [[FreeBSD jail]]s and [[Mandatory Access Control]] policies.

==Limitations==
Communications between the controller and target take place using repeated calls of ptrace, passing a small fixed-size block of memory between the two (necessitating two [[context switch]]es per call); this is acutely inefficient when accessing large amounts of the target's memory, as this can only be done in [[Word (data type)|word]] sized blocks (with a ptrace call for each word).&lt;ref name=&quot;mckusick&quot;/&gt; For this reason the 8th edition of Unix introduced [[procfs]], which allows permitted processes direct access to the memory of another process - 4.4BSD followed, and the use of &lt;tt&gt;/proc&lt;/tt&gt; for debugger support was inherited by Solaris, BSD, and AIX, and mostly copied by Linux.&lt;ref name=&quot;mckusick&quot;/&gt; Some, such as [[Solaris (operating system)|Solaris]], have removed ptrace as a system call altogether, retaining it as a library call that reinterprets calls to ptrace in terms of the platform's procfs.&lt;ref name=&quot;solaris_ptrace_proc&quot;/&gt; Such systems use [[ioctl]]s on the [[file descriptor]] of the opened &lt;tt&gt;/proc&lt;/tt&gt; file to issue commands to the controlled process.&lt;ref name=&quot;solaris_ptrace_proc&quot;/&gt; [[FreeBSD]], on the other hand, extended ptrace to remove mentioned problems, and declared [[procfs]] obsolete due to its inherent design problems.{{Vague|date=June 2011}}{{Citation needed|date=June 2011}}

ptrace only provides the most basic interface necessary to support debuggers and similar tools. Programs using it must have intimate knowledge of the specifics of the OS and architecture, including stack layout, [[application binary interface]], [[system call]] mechanism, [[name mangling]], the [[debugging data format|format of any debug data]], and are responsible for understanding and disassembling [[machine code]] themselves. Further, programs that inject executable code into the target process or (like gdb) allow the user to enter commands that are executed in the context of the target must generate and load that code themselves, generally without the help of the [[loader (computing)|program loader]].

==Support==
ptrace was first implemented in [[Version 7 Unix|Seventh Edition Unix]],&lt;ref name=&quot;freebsd&quot;/&gt; and was present in both the [[SVr4]] and [[4.3BSD]] branches of Unix.&lt;ref name=&quot;linux_manpage&quot;/&gt;  ptrace is available as a system call on [[IRIX]],&lt;ref name=&quot;irix_manual&quot;/&gt; [[IBM AIX]],&lt;ref name=&quot;aix_manual&quot;/&gt; [[NetBSD]],&lt;ref name=&quot;netbsd&quot;/&gt; [[FreeBSD]],&lt;ref name=&quot;freebsd&quot;/&gt; [[OpenBSD]],&lt;ref name=&quot;openbsd&quot;/&gt; and [[Linux]].&lt;ref name=&quot;linux_manpage&quot;/&gt; ptrace is implemented as a library call on Solaris, built on the Solaris kernel's procfs filesystem; Sun notes that ptrace on Solaris is intended for compatibility, and recommends that new implementations use the richer interface that proc supplies instead.&lt;ref name=&quot;solaris_ptrace_proc&quot; /&gt;   [[UnixWare]] also features a limited ptrace&lt;ref name=&quot;unixware_manual&quot;/&gt; but like Sun, SCO recommends implementers use the underlying procfs features instead.&lt;ref name=&quot;sco_porting&quot;/&gt; [[HP-UX]] supported ptrace until release 11i v3 (it was deprecated in favour of [http://docs.hp.com/en/B2355-60105/ttrace.2.html ttrace], a similar OS-specific call, in 11i v1).&lt;ref name=&quot;hpux_obsoleted&quot;/&gt;  Starting in [[Ubuntu 10.10]] ptrace is only allowed to be called on child processes.&lt;ref name=&quot;ubuntu&quot; /&gt;

Apple's [[Mac OS X]] also implements ptrace as a system call. Apple's version adds a special option PT_DENY_ATTACH - if a process invokes this option on itself, subsequent attempts to ptrace the process will fail.&lt;ref name=&quot;osx_manpage&quot;/&gt; Apple uses this feature to limit the use of debuggers on programs that manipulate [[digital rights management|DRM]]-ed content, including [[iTunes]].&lt;ref name=&quot;miller&quot;/&gt;  PT_DENY_ATTACH on also disables [[DTrace]]'s ability to monitor the process.&lt;ref name=&quot;computerworld&quot;/&gt;  Debuggers on OS X typically use a combination of ptrace and the [[Mach (kernel)|Mach]] VM and thread APIs.&lt;ref name=&quot;singh&quot;/&gt; ptrace (again with PT_DENY_ATTACH) is available to developers for the Apple [[iPhone]].&lt;ref name=&quot;iphone&quot;/&gt;

Linux also gives processes the ability to prevent other processes from attaching them. Processes can call the &lt;tt&gt;prctl&lt;/tt&gt; syscall and clear their &lt;tt&gt;PR_SET_DUMPABLE&lt;/tt&gt; flag; in later kernels this prevents non-root processes from ptracing the calling process; the [[OpenSSH]] authentication agent uses this mechanism to prevent ssh session hijacking via ptrace.&lt;ref name=&quot;linux_prctl&quot;/&gt;&lt;ref name=&quot;kees_cook&quot;/&gt;&lt;ref name=&quot;ubuntu&quot;/&gt; Later Ubuntu&lt;!-- and other?? --&gt; versions ship with a Linux kernel configured to prevent ptrace attaches from processes other than the traced process' parent; this allows gdb and strace to continue to work when running a target process, but prevents them from attaching to an unrelated running process.&lt;ref name=&quot;ubuntu&quot;/&gt; Control of this feature is performed via the &lt;tt&gt;/proc/sys/kernel/yama/ptrace_scope&lt;/tt&gt; setting.&lt;ref name=&quot;ubuntu&quot;/&gt;

==References==
{{reflist|refs=

&lt;ref name=&quot;irix_manual&quot;&gt;[http://techpubs.sgi.com/library/tpl/cgi-bin/getdoc.cgi?cmd=getdoc&amp;coll=0650&amp;db=man&amp;fname=2%20ptrace &quot;ptrace(2)&quot;], IRIX 6.5 manual, section 2, SGI techpubs library&lt;/ref&gt;

&lt;ref name=&quot;aix_manual&quot;&gt;[http://publib.boulder.ibm.com/infocenter/systems/index.jsp?topic=/com.ibm.aix.basetechref/doc/basetrf1/ptrace.htm &quot;ptrace,ptracex,ptrace64 subroutine&quot;], IBM AIX Technical Reference: Base Operating System and Extensions, Volume 1&lt;/ref&gt;

&lt;ref name=&quot;netbsd&quot;&gt;[http://www.daemon-systems.org/man/ptrace.2.html ptrace(2)], netbsd manual, section 2&lt;/ref&gt;

&lt;ref name=&quot;freebsd&quot;&gt;[http://miroirs.cesars.org/man/pages/FreeBSD-6.2-RELEASE/man/cat2/ptrace.2.txt], FreeBSD manual, section 2&lt;/ref&gt;

&lt;ref name=&quot;openbsd&quot;&gt;[http://www.openbsd.org/cgi-bin/man.cgi?query=ptrace&amp;sektion=2 &quot;ptrace(2)&quot;], OpenBSD manual, section 2&lt;/ref&gt;

&lt;ref name=&quot;linux_manpage&quot;&gt;[http://linux.die.net/man/2/ptrace &quot;ptrace(2) manpage&quot;], Linux manual section 2&lt;/ref&gt;

&lt;ref name=&quot;solaris_ptrace_proc&quot;&gt;[http://docs.sun.com/app/docs/doc/805-6331/6j5vgg69p?a=view &quot;ptrace() Request Values&quot;], ''Solaris Transition Guide'', [[Sun Microsystems]], 2000&lt;/ref&gt;

&lt;ref name=&quot;unixware_manual&quot;&gt;[http://uw714doc.sco.com/en/man/html.2/ptrace.2.html ptrace(2)], SCO UnixWare 7 manual, section 2&lt;/ref&gt;

&lt;ref name=&quot;retty&quot;&gt;For example [http://pasky.or.cz/~pasky/dev/retty/ retty] uses ptrace to alter another process' file descriptors, and to inject executable code into the target's text segment&lt;/ref&gt;

&lt;ref name=&quot;mckusick&quot;&gt;''The Design and Implementation of the 4.4 BSD Operating System'', [[Marshall Kirk McKusick]], [[Keith Bostic]], Michael J. Karels, [[John Quarterman]], Addison-Wesley, April 1996, ISBN 0-201-54979-4&lt;/ref&gt;

&lt;ref name=&quot;iphone&quot;&gt;[http://developer.apple.com/IPhone/library/documentation/System/Conceptual/ManPages_iPhoneOS/man2/ptrace.2.html &quot;ptrace(2)&quot;], BSD System Calls Manual, Apple iPhone OS Reference Library&lt;/ref&gt;

&lt;ref name=&quot;computerworld&quot;&gt;[http://www.computerworlduk.com/toolbox/open-source/kernel-systems/news/index.cfm?RSS&amp;NewsId=7164 &quot;Apple 'breaks' Sun developer app&quot;], Matthew Broersma, ''[[Computerworld|Computerworld UK]]'', 24 January 2008&lt;/ref&gt;

&lt;ref name=&quot;singh&quot;&gt;Chapter 9, ''Mac OS X internals: a systems approach'', Amit Singh, ISBN 978-0321278548, Addison Wesley, 2006&lt;/ref&gt;

&lt;ref name=&quot;hpux_obsoleted&quot;&gt;[http://docs.hp.com/en/5991-6469/ch09s25.html &quot;ptrace() System Call (Obsolete)&quot;], HP-UX 11i Version 3 Release Notes: HP 9000 and HP Integrity Servers, [[Hewlett Packard]], February 2007&lt;/ref&gt;

&lt;ref name=&quot;sco_porting&quot;&gt;[http://uw714doc.sco.com/en/SDK_porting/syscall_compat_notes_top.html &quot;System call compatibility notes&quot;], UnixWare 7 Documentation&lt;/ref&gt;

&lt;ref name=&quot;osx_manpage&quot;&gt;[http://developer.apple.com/mac/library/documentation/Darwin/Reference/ManPages/man2/ptrace.2.html &quot;ptrace(2) manual page&quot;], Apple Darwin/OS-X manual&lt;/ref&gt;

&lt;ref name=&quot;miller&quot;&gt;[http://www.blackhat.com/presentations/bh-jp-08/bh-jp-08-Miller/BlackHat-Japan-08-Miller-Hacking-OSX.pdf &quot;Owning the Fanboys : Hacking Mac OS X&quot;], Charlie Miller, [[Black Hat Briefings]] conference 2008&lt;/ref&gt;

&lt;ref name=&quot;ubuntu&quot;&gt;[https://wiki.ubuntu.com/SecurityTeam/Roadmap/KernelHardening#ptrace%20Protection &quot;KernelHardening&quot;], Ubuntu security team roadmap&lt;/ref&gt;

&lt;ref name=&quot;linux_prctl&quot;&gt;[http://linux.die.net/man/2/prctl &quot;prctl(2)&quot;],  Linux programmer's manual, section 2&lt;/ref&gt;

&lt;ref name=&quot;kees_cook&quot;&gt;[http://www.gossamer-threads.com/lists/linux/kernel/1239943 &quot;PATCH ptrace: allow restriction of ptrace scope&quot;] posting by [[Canonical Ltd.]] engineer Kees Cook, Linux Kernel mailing list, June 16 2010&lt;/ref&gt;

}}

==External links==
* [http://tldp.org/LDP/LGNET/81/sandeep.html Article from Linux Gazette about ptrace]
* [http://www.linuxjournal.com/article/6100 Article about ptrace in linux journal]

[[Category:Unix]]
[[Category:Debugging]]

[[cs:ptrace]]</rev></revisions></page></pages></query></api>
