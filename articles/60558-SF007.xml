<?xml version="1.0"?><api><query><pages><page pageid="60558" ns="0" title="ARM architecture"><revisions><rev xml:space="preserve">{{About|a computer processor architecture|other uses|ARM (disambiguation)}}
[[File:ARM powered Badge.svg|thumb|Logo]]
{{Infobox CPU architecture
| name         = ARM
| designer     = [[ARM Holdings]]
| bits         = 32/64
| introduced   = 1983
| version      = ARMv8&lt;ref name=&quot;v8arch&quot;/&gt;
| design       = RISC
| type         = Register-Register
| encoding     = Fixed
| branching    = Condition code
| endianness   = [[Bi-endian|Bi]] (Little as default)
| extensions   = NEON, Thumb, [[Jazelle]], VFP, A64
| open         =
| registers    = 16/31
}}
'''ARM''' is a [[32-bit]] [[reduced instruction set computer]] (RISC) [[instruction set architecture]] (ISA) developed by [[ARM Holdings]]. It was named the ''Advanced RISC Machine'', and before that, the ''Acorn RISC Machine''. The ARM architecture is the most widely used [[32-bit]] instruction set architecture in numbers produced.&lt;ref&gt;[http://www.extremetech.com/extreme/52180-arm-cores-climb-into-3g-territory &quot;ARM Cores Climb Into 3G Territory&quot;] by Mark Hachman, 2002.&lt;/ref&gt;&lt;ref&gt;[http://www.embedded.com/shared/printableArticle.jhtml?articleID=9900861 &quot;The Two Percent Solution&quot;] by Jim Turley 2002.&lt;/ref&gt; Originally conceived by [[Acorn Computers]] for use in its [[personal computer]]s, the first ARM-based products were the [[Acorn Archimedes]] range introduced in 1987.

The relative simplicity of ARM processors makes them suitable for low power applications. As a result, they have become dominant in the mobile and embedded electronics market, as relatively low-cost, small [[microprocessor]]s and [[microcontroller]]s. In 2005, about 98% of the more than one billion [[mobile phone]]s sold each year used at least one ARM processor.&lt;ref name=Krazit&gt;[http://news.cnet.com/ARMed-for-the-living-room/2100-1006_3-6056729.html &quot;ARMed for the living room&quot;].&lt;/ref&gt; {{As of|2009}}, ARM processors account for approximately 90% of all embedded 32-bit RISC processors&lt;ref&gt;{{cite doi|10.1145/1941487.1941501}}&lt;/ref&gt; and are used extensively in consumer electronics, including [[personal digital assistant]]s (PDAs), mobile phones, digital media and music players, hand-held game consoles, [[calculator]]s and computer peripherals such as [[hard drive]]s and [[router (computing)|router]]s.

The ARM architecture is licensable. Companies that are current or former ARM licensees include [[Alcatel-Lucent]], [[Apple Inc.]], [[AppliedMicro]], [[Atmel]], [[Broadcom]], [[Cirrus Logic]], [[Digital Equipment Corporation]], [[Ember (company)|Ember]], [[Energy Micro]], [[Freescale]], [[Intel]] (through [[Digital Equipment Corporation|DEC]]), [[LG]], [[Marvell Technology Group]], [[Microsemi]], [[Microsoft]], [[NEC]],  [[Nintendo]], [[Nuvoton]], [[Nvidia]], [[Sony]], [[NXP Semiconductors|NXP]] (formerly Philips), [[Oki Electric Industry|Oki]], [[ON Semiconductor]], [[Psion]], [[Qualcomm]], [[Samsung]], [[Sharp Corporation|Sharp]], [[STMicroelectronics]], [[Symbios Logic]], [[Texas Instruments]], [[VLSI Technology]], [[Yamaha]], and [[ZiiLABS]].

ARM processors are developed by ARM and by ARM licensees. Prominent ARM processor families developed by ARM Holdings include the [[ARM7]], [[ARM9]], [[ARM11]] and [[ARM Cortex-A8|Cortex]]. Notable ARM processors developed by licensees include [[AppliedMicro]] X-Gene [[Digital Equipment Corporation|DEC]] [[StrongARM]], [[Freescale]] [[i.MX]], Marvell (formerly [[Intel]]) [[XScale]], Nvidia [[Nvidia Tegra|Tegra]], [[ST-Ericsson]] Nova and NovaThor, Qualcomm [[Snapdragon (processor)|Snapdragon]], the [[Texas Instruments]] [[Texas Instruments OMAP|OMAP]] product line, the [[Samsung Hummingbird]] and the [[Apple A4]] and [[Apple A5|A5]].

==History==
After achieving success with the [[BBC Micro]] computer, [[Acorn Computers|Acorn Computers Ltd]] considered how to move on from the relatively simple [[MOS Technology 6502]] processor to address business markets like the one that would soon be dominated by the [[IBM PC]], launched in 1981. The ''[[Acorn Business Computer]]'' (ABC) plan required a number of second processors to be made to work with the BBC Micro platform, but processors such as the [[Motorola 68000]] and [[National Semiconductor 32016]] were unsuitable, and the 6502 was not powerful enough for a graphics based user interface.{{Citation needed|date=July 2011}}

Acorn would need a new architecture, having tested all of the available processors and found them wanting. Acorn then seriously considered designing its own processor, and their engineers came across papers on the [[Berkeley RISC]] project. They felt it showed that if a class of graduate students could create a competitive 32-bit processor, then Acorn would have no problem. A trip to the [[Western Design Center]] in Phoenix, where the 6502 was being updated by what was effectively a single-person company, showed Acorn engineers [[Steve Furber]]&lt;ref&gt;{{cite book |author=Furber, Stephen B. |title=ARM system-on-chip architecture |publisher=Addison-Wesley |location=Boston |year=2000 |pages= |isbn=0-201-67519-6 |oclc= |doi= |accessdate=}}
&lt;/ref&gt; and [[Sophie Wilson]] that they did not need massive resources and state-of-the-art R&amp;D facilities.

Wilson set about developing the instruction set, writing a simulation of the processor in [[BBC Basic]] that ran on a BBC Micro with a second 6502 processor. It convinced the Acorn engineers that they were on the right track. Before they could go any further, however, they would need more resources. It was time for Wilson to approach Acorn's CEO, [[Hermann Hauser]], and explain what was afoot. Once the go-ahead had been given, a small team was put together to implement Wilson's model in hardware.

[[File:conexant arm.jpg|right|thumb|A [[Conexant]] ARM processor used mainly in [[router (computing)|routers]]]]

===Acorn RISC Machine: ARM2===
{{Refimprove section|date=March 2011}}
The official ''Acorn RISC Machine'' project started in October 1983. [[VLSI Technology, Inc]] was chosen as silicon partner, since it already supplied Acorn with ROMs and some custom chips. The design was led by Wilson and Furber, with a key design goal of achieving low-latency input/output (interrupt) handling like the 6502. The 6502's memory access architecture had allowed developers to produce fast machines without the use of costly [[direct memory access]] hardware. VLSI produced the first ARM silicon on 26 April 1985&amp;nbsp;â it worked the first time and came to be termed ARM1 by April 1985.&lt;ref&gt;[http://groups.google.com/group/comp.arch/msg/269fe7defd51f29e &quot;Some facts about the Acorn RISC Machine&quot;] [[Sophie Wilson|Roger Wilson]] posting to comp.arch, Nov 2 1988, Accessed 25 May 2007.&lt;/ref&gt; The first &quot;real&quot; production systems named ARM2 were available the following year.

Its first practical application was as a second processor to the BBC Micro, where it was used to develop the simulation software to finish work on the support chips (VIDC, IOC, MEMC) and to speed up the operation of the CAD software used in developing ARM2. Wilson subsequently coded BBC Basic in ARM assembly language, and the in-depth knowledge obtained from designing the instruction set allowed the code to be very dense, making ARM BBC Basic an extremely good test for any ARM emulator. The original aim of a principally ARM-based computer was achieved in 1987 with the release of the [[Acorn Archimedes]].

Such was the secrecy surrounding the ARM CPU project that when [[Olivetti]] were negotiating to take a controlling share of Acorn in 1985, they were not told about the development team until after the negotiations had been finalised. In 1992 Acorn once more won the [[Queen's Award for Technology]] for the ARM.

The ARM2 featured a 32-bit [[data bus]], a 26-bit [[address space]] and twenty-seven 32-bit [[Processor register|registers]]. Program code had to lie within the first 64 [[megabyte|Mbyte]] of the memory, as the [[program counter]] was limited to 24 bits because the top 6 and bottom 2 bits of the 32-bit register served as status flags. The ARM2 was possibly the simplest useful 32-bit microprocessor in the world, with only 30,000 [[transistor]]s (compare the [[microprocessor chronology#1980s|transistor count]] with Motorola's six-year older [[Motorola 68000|68000]] model which was aptly named, since it contained 68,000 transistors). Much of this simplicity comes from not having [[microcode]] (which represents about one-quarter to one-third of the 68000) and, like most CPUs of the day, not including any [[cache]]. This simplicity led to its low power usage, while performing better than the [[Intel 80286]].&lt;ref&gt;Patterson, Jason. [http://www.pattosoft.com.au/jason/Articles/HistoryOfComputers/1980s.html The Acorn Archimedes&quot;], ''The History Of Computers During My Lifetime â The 1980s'' by (accessed 12 March 2008)].&lt;/ref&gt; A successor, ARM3, was produced with a 4&amp;nbsp;KB cache, which further improved performance.

===Apple, DEC, Intel, Marvell:  ARM6, StrongARM, XScale===
In the late 1980s [[Apple Computer]] and [[VLSI Technology]] started working with Acorn on newer versions of the ARM core. The work was so important that Acorn spun off the design team in 1990 into a new company called Advanced RISC Machines Ltd. Advanced RISC Machines became ARM Ltd when its parent company, [[ARM Holdings plc]], floated on the [[London Stock Exchange]] and [[NASDAQ]] in 1998.&lt;ref&gt;[http://www.arm.com/miscPDFs/3822.pdf &quot;ARM Corporate Backgrounder&quot;], ''ARM Technology''.&lt;/ref&gt;

The new Apple-ARM work would eventually turn into the ARM6, first released in early 1992. Apple used the ARM6-based ARM 610 as the basis for their [[Apple Newton]] PDA. In 1994, Acorn used the ARM 610 as the main [[central processing unit]] (CPU) in their [[Risc PC]] computers. [[Digital Equipment Corporation|DEC]] licensed the ARM6 architecture and produced the [[StrongARM]]. At 233&amp;nbsp;MHz this CPU drew only one [[watt]] (more recent versions draw far less). This work was later passed to [[Intel]] as a part of a lawsuit settlement, and Intel took the opportunity to supplement their aging [[Intel i960|i960]] line with the StrongARM. Intel later developed its own high performance implementation named [[Intel XScale|XScale]] which it has since sold to [[Marvell Technology Group|Marvell]].

===Licensing===
The ARM core has remained largely the same size throughout these changes. ARM2 had 30,000 transistors, while the ARM6 grew to only 35,000. ARM's business has always been to sell [[IP core]]s, which licensees use to create [[microcontroller]]s and [[CPU]]s based on this core. The most successful implementation has been the [[ARM7TDMI]] with hundreds of millions sold. The idea is that the [[original design manufacturer]] combines the ARM core with a number of optional parts to produce a complete CPU, one that can be built on old [[Fab (semiconductors)|semiconductor fabs]] and still deliver substantial performance at a low cost. [[Atmel]] has been a precursor design center in the ARM7TDMI-Based Embedded System.

ARM licensed about 1.6 billion cores in 2005. In 2005, about 1 billion ARM cores went into [[mobile phone]]s.&lt;ref&gt;
[http://news.cnet.com/ARMed-for-the-living-room/2100-1006_3-6056729.html &quot;ARMed for the living room&quot;] by Tom Krazit 2006.&lt;/ref&gt; By January 2008, over 10 billion ARM cores had been built, and in 2008 [[iSuppli]] predicted that by 2011, 5 billion ARM cores will be shipping per year.&lt;ref&gt;[http://www.arm.com/news/19720.html &quot;ARM Achieves 10 Billion Processor Milestone&quot;], ''ARM Technology'', 22 January 2008.&lt;/ref&gt;  {{As of|2011|1}}, ARM states that over 15 billion ARM processors have shipped.&lt;ref&gt;[http://www.arm.com/about/company-profile/index.php &quot;Company Profile - ARM&quot;], ''ARM Company Profile'', 11 January 2011.&lt;/ref&gt;

The ARM architectures used in [[smartphone]]s, [[personal digital assistant]]s and other [[mobile device]]s range from ARMv5, in obsolete/low-end devices, to the ARM M-series, in current high-end devices. [[XScale]] and [[ARM926]] processors are ARMv5TE, and are now more numerous in high-end devices than the [[StrongARM]], [[ARM9]]TDMI and [[ARM7TDMI]] based ARMv4 processors, but lower-end devices may use older cores with lower licensing costs.  ARMv6 processors represented a step up in performance from standard ARMv5 cores, and are used in some cases, but Cortex processors (ARMv7) now provide faster and more power-efficient options than all those prior generations.  Cortex-A targets applications processors, as needed by smartphones that formerly used ARM9 or ARM11.  Cortex-R targets real-time applications, and Cortex-M targets microcontrollers.

In 2009, some manufacturers introduced netbooks based on ARM architecture CPUs, in direct competition with netbooks based on [[Intel Atom]].&lt;ref&gt;
[http://www.linuxfordevices.com/c/a/News/Always-Innovating-Touch-Book/ &quot;ARM netbook ships with detachable tablet&quot;]
by Eric Brown 2009
&lt;/ref&gt;
According to analyst firm IHS iSuppli, by 2015, ARM ICs are estimated to be in 23% of all laptops.&lt;ref&gt;Dylan McGrath, EE Times. &quot;[http://eetimes.com/electronics-news/4217951/IHS--ARM-ICs-to-be-in-23--of-laptops-in-2015 IHS: ARM ICs to be in 23% of laptops in 2015].&quot; July 18, 2011. Retrieved July 20, 2011.&lt;/ref&gt;

In 2011, HiSilicon Technologies Co. Ltd. licensed a variety of ARM technology to be used in communications chip designs. These included 3G/4G basestations, networking infrastructure and mobile computing applications. &lt;ref&gt; Peter Clarke, EE Times. &quot;[http://eetimes.com/electronics-news/4218416/HiSilicon-licenses-ARM-3G-4G-communications HiSilicon extends ARM licenses for 3G/4G].&quot; August 2, 2011. Retrieved August 2, 2011. &lt;/ref&gt;

==ARM cores==
&lt;!-- List created per consensus on talk page. Please update your links using the
[[ARM core]] redirect, if that helps. Thanks. --&gt;
{{Main|List of ARM microprocessor cores}}

{| class=&quot;wikitable&quot;
|-
! Architecture !! Family
|-
| ARMv1 || ARM1
|-
| ARMv2 || ARM2, ARM3
|-
| ARMv3 || ARM6, ARM7
|-
| ARMv4 || StrongARM, ARM7TDMI, ARM9TDMI
|-
| ARMv5 || ARM7EJ, ARM9E, ARM10E, XScale
|-
| ARMv6 || ARM11
|-
| ARMv7 || Cortex
|-
| ARMv8 || ''No cores available yet. Will support 64-bit data and addressing'' &lt;ref&gt;{{Cite web| url = http://arm.com/about/newsroom/arm-discloses-technical-details-of-the-next-version-of-the-arm-architecture.php | title = ARM Discloses Technical Details Of The Next Version Of The ARM Architecture | year = 2011 | accessdate = 2011-10-31}}&lt;/ref&gt;&lt;ref&gt; Michael J. Miller, PC Magazine. &quot;[http://forwardthinking.pcmag.com/chips/289987-moving-on-up-arm-s-next-gen-cores-ascend-to-64-bit#fbid=aXy3o2Z2ZgE Moving On Up: ARM's Next-Gen Cores Ascend to 64-Bit].&quot; November 1, 2011. Retrieved November 7, 2011. &lt;/ref&gt;
|}

A summary of the numerous vendors who implement ARM cores in their design is provided by ARM.&lt;ref&gt;{{Cite web| url = http://www.arm.com/support/0141_5LineCard.pdf |title= Line Card |format=PDF | year = 2003 |accessdate= 2011-01-06}}&lt;/ref&gt;

==Example applications of ARM cores==
{{Main|List of applications of ARM cores}}

&lt;!-- Please consider carefully before expanding the list below.
     The main list is in the article linked to above. --&gt;
ARM cores are used in a number of products,  particularly various [[smartphone]]s. Some computing examples are the [[Acorn Archimedes]], [[iPad|Apple iPad]] and [[ASUS Eee Pad Transformer]]. Some other uses are the Apple [[iPod]] portable media player, [[Canon PowerShot A470]] digital camera, [[Nintendo DS]] handheld games console and [[TomTom]] automotive navigation system.

Since 2005, ARM was also involved in Manchester University's computer, SpiNNaker, which used ARM cores to simulate the human brain.&lt;ref&gt;{{cite web | url=http://www.eetimes.com/electronics-news/4217840/Million-ARM-cores-brain-simulator | title=One Million ARM Cores Linked to Simulate Brain | accessdate=2011-08-02 | last=Parrish | first=Kevin | authorlink=  | coauthors= | date=2011-07-14 | format= | work= | publisher=EE Times | pages= | language= | archiveurl= | archivedate= | quote= }}&lt;/ref&gt;

==Architecture==
{{Refimprove section|date=March 2011}}
From 1995 onwards, the ''[http://infocenter.arm.com/help/index.jsp ARM Architecture Reference Manual]'' has been the primary source of documentation on the ARM processor architecture and instruction set, distinguishing interfaces that all ARM processors are required to support (such as instruction semantics) from implementation details that may vary.  The architecture has evolved over time, and starting with the Cortex series of cores, three &quot;profiles&quot; are defined:
*&quot;Application&quot; profile: Cortex-A series
*&quot;Real-time&quot; profile: Cortex-R series
*&quot;Microcontroller&quot; profile: Cortex-M series

Profiles are allowed to subset the architecture.  For example the ARMv7-M profile used by the Cortex-M3 core is notable in that it supports only the Thumb-2 instruction set, and the ARMv6-M profile (used by the Cortex-M0) is a subset of the ARMv7-M profile (supporting fewer instructions).

===Instruction set===
To keep the design clean, simple and fast, the original ARM implementation was hardwired without [[microcode]], like the much simpler 8-bit [[MOS Technology 6502|6502]] processor used in prior [[Acorn Computers Ltd|Acorn]] microcomputers.

The ARM architecture includes the following [[RISC]] features:
* Load/store architecture.
* No support for misaligned memory accesses (now supported in ARMv6 cores, with some exceptions related to load/store multiple word instructions).
* Uniform 16 Ã 32-bit [[register file]].
* Fixed instruction width of 32 bits to ease decoding and [[pipelining]], at the cost of decreased [[code density]]. Later, the [[#Thumb|Thumb instruction set]] increased code density.
* Mostly single-cycle execution.

To compensate for the simpler design, compared with contemporary processors like the [[Intel 80286]] and [[Motorola 68020]], some additional design features were used:
* Conditional execution of most instructions, reducing branch overhead and compensating for the lack of a [[branch predictor]].
* Arithmetic instructions alter [[Condition Code Register|condition code]]s only when desired.
* 32-bit [[barrel shifter]] which can be used without performance penalty with most arithmetic instructions and address calculations.
* Powerful indexed [[addressing mode]]s.
* A [[link register]] for fast leaf function calls.
* Simple, but fast, 2-priority-level [[interrupt]] subsystem with switched register banks.

====Conditional execution====
The conditional execution feature (called [[Branch predication|predication]]) is implemented with a 4-bit condition code selector (the predicate) on every instruction; one of the four-bit codes is reserved as an &quot;escape code&quot; to specify certain unconditional instructions, but nearly all common instructions are conditional. Most CPU architectures only have condition codes on branch instructions.

This cuts down significantly on the encoding bits available for displacements in memory access instructions, but on the other hand it avoids branch instructions when generating code for small [[conditional (programming)|&lt;code&gt;if&lt;/code&gt; statements]]. The standard example of this is the subtraction-based [[Euclidean algorithm]]:
ARM address mode

In the [[C (programming language)|C programming language]], the loop is:
&lt;source lang=&quot;c&quot;&gt;
    while(i != j) {
       if (i &gt; j)
           i -= j;
       else
           j -= i;
    }
&lt;/source&gt;
In ARM [[assembly language|assembly]], the loop is:
&lt;source lang=&quot;asm&quot;&gt;
 loop   CMP    Ri, Rj       ; set condition &quot;NE&quot; if (i != j),
                            ;               &quot;GT&quot; if (i &gt; j),
                            ;            or &quot;LT&quot; if (i &lt; j)
        SUBGT  Ri, Ri, Rj   ; if &quot;GT&quot; (greater than), i = i-j;
        SUBLT  Rj, Rj, Ri   ; if &quot;LT&quot; (less than), j = j-i;
        BNE    loop         ; if &quot;NE&quot; (not equal), then loop
&lt;/source&gt;

which avoids the branches around the &lt;code&gt; then &lt;/code&gt; and &lt;code&gt; else &lt;/code&gt; clauses.
Note that if &lt;code&gt;Ri&lt;/code&gt; and &lt;code&gt;Rj&lt;/code&gt; are equal then neither of the &lt;code&gt;SUB&lt;/code&gt; instructions will be executed, optimising out the need for a conditional branch to implement the &lt;code&gt;while&lt;/code&gt; check at the top of the loop, for example had &lt;code&gt;SUBLE&lt;/code&gt; (less than or equal) been used.

One of the ways that Thumb code provides a more dense encoding is to remove that four bit selector from non-branch instructions.

====Other features====
{{Refimprove section|date=March 2011}}
Another feature of the [[Instruction set matrix|instruction set]] is the ability to fold shifts and rotates into the &quot;data processing&quot; (arithmetic, logical, and register-register move) instructions, so that, for example, the C statement
&lt;source lang=&quot;c&quot;&gt;a += (j &lt;&lt; 2);&lt;/source&gt;
could be rendered as a single-word, single-cycle instruction on the ARM.
&lt;source lang=&quot;asm&quot;&gt;ADD     Ra, Ra, Rj, LSL #2&lt;/source&gt;
This results in the typical ARM program being denser than expected with fewer memory accesses; thus the pipeline is used more efficiently. Even though the ARM runs at what many would consider to be low speeds, it nevertheless competes quite well with much more complex CPU designs.{{Citation needed|date=July 2010}}

The ARM processor also has some features rarely seen in other RISC architectures, such as [[Program counter|PC]]-relative addressing (indeed, on the 32-bit&lt;ref name=&quot;v8arch&quot;&gt;{{cite web | url=http://www.arm.com/files/downloads/ARMv8_Architecture.pdf | title=ARMv8 Technology Preview | year=2011 | accessdate=2011-10-31 | first=Richard | last=Grisenthwaite}}&lt;/ref&gt; ARM the [[Program counter|PC]] is one of its 16 registers) and pre- and post-increment addressing modes.

Another item of note is that the ARM has been around for a while, with the instruction set increasing somewhat over time. Some early ARM processors (before ARM7TDMI), for example, have no instruction to store a two-byte quantity, thus, strictly speaking, for them it's not possible to generate efficient code that would behave the way one would expect for C objects of type &quot;int16_t&quot;.

====Pipelines and other implementation issues====
The ARM7 and earlier implementations have a three stage [[Pipeline (computing)|pipeline]]; the stages being fetch, decode, and execute. Higher performance designs, such as the ARM9, have deeper pipelines: Cortex-A8 has thirteen stages. Additional implementation changes for higher performance include a faster adder, and more extensive branch prediction logic.  The difference between the ARM7DI and ARM7DMI cores, for example, was an improved multiplier (hence the added &quot;M&quot;).

====Coprocessors====
For those familiar with the Intel [[x86]] family of CPUs, the ARM family of processors does not support or have any instructions similar to [[CPUID]]. There are however mechanisms for addressing coprocessors in the ARM architecture. 

The ARM architecture provides a non-intrusive way of extending the instruction set using &quot;coprocessors&quot; which can be addressed using MCR, MRC, MRRC, MCRR, and similar instructions.  The coprocessor space is divided logically into 16 coprocessors with numbers from 0 to 15, coprocessor 15 (cp15) being reserved for some typical control functions like managing the caches and [[Memory management unit|MMU]] operation (on processors that have one).

In ARM-based machines, peripheral devices are usually attached to the processor by mapping their physical registers into ARM memory space or into the coprocessor space or connecting to another device (a bus) which in turn attaches to the processor. Coprocessor accesses have lower latency so some peripherals (for example [[XScale]] interrupt controller) are designed to be accessible in both ways (through memory and through coprocessors).

In other cases, chip designers only integrate hardware using the coprocessor mechanism.  For example, an image processing engine might be a small ARM7TDMI core combined with a coprocessor that has specialized operations to support a specific set of HDTV transcoding primitives.

===Debugging===
{{Refimprove section|date=March 2011}}
All modern ARM processors include hardware debugging facilities; without them, software debuggers could not perform basic operations like halting, stepping, and breakpointing of code starting from reset.  These facilities are built using [[JTAG]] support, though some newer cores optionally support ARM's own two-wire &quot;SWD&quot; protocol.  In ARM7TDMI cores, the &quot;D&quot; represented JTAG debug support, and the &quot;I&quot; represented presence of an &quot;EmbeddedICE&quot; debug module.  For ARM7 and ARM9 core generations, EmbeddedICE over JTAG was a de-facto debug standard, although it was not architecturally guaranteed.

The ARMv7 architecture defines basic debug facilities at an architectural level.  These include breakpoints, watchpoints, and instruction execution in a &quot;Debug Mode&quot;; similar facilities were also available with EmbeddedICE.  Both &quot;halt mode&quot; and &quot;monitor&quot; mode debugging are supported.  The actual transport mechanism used to access the debug facilities is not architecturally specified, but implementations generally include JTAG support.

There is a separate ARM &quot;CoreSight&quot; debug architecture, which is not architecturally required by ARMv7 processors.

===DSP enhancement instructions===
To improve the ARM architecture for [[digital signal processing]] and multimedia applications, a few new instructions were added to the set.&lt;ref&gt;{{Cite web|url=http://www.arm.com/products/CPUs/cpu-arch-DSP.html |title=ARM DSP Instruction Set Extensions |publisher=Arm.com |date= |accessdate=2009-04-18}}&lt;/ref&gt; These are signified by an &quot;E&quot; in the name of the ARMv5TE and ARMv5TEJ architectures. E-variants also imply T,D,M and I.

The new instructions are common in [[digital signal processor]] architectures. They are variations on signed [[multiplyâaccumulate]], saturated add and subtract, and count leading zeros.

===Jazelle===
{{Main|Jazelle}}
Jazelle is a technique that allows Java Bytecode to be executed directly in the ARM architecture as a third execution state (and instruction set) alongside the existing ARM and Thumb-mode.  Support for this state is signified by the &quot;J&quot; in the ARMv5TEJ architecture, and in ARM9EJ-S and ARM7EJ-S core names.  Support for this state is required starting in ARMv6 (except for the ARMv7-M profile), although newer cores only include a trivial implementation that provides no hardware acceleration.

===Thumb===
{{Refimprove section|date=March 2011}}
To improve compiled code-density, processors since the ARM7TDMI have featured the ''Thumb'' instruction set state. (The &quot;T&quot; in &quot;TDMI&quot; indicates the Thumb feature.)  When in this state, the processor executes the Thumb instruction set, a compact 16-bit encoding for a subset of the ARM instruction set.&lt;ref&gt;{{cite book |author=Jaggar, Dave |title=ARM Architecture Reference Manual |year=1996 |publisher=Prentice Hall |isbn=9-780137-362998 |pages=6-1}}&lt;/ref&gt;  Most of the Thumb instructions are directly mapped to normal ARM instructions. The space-saving comes from making some of the instruction operands implicit and limiting the number of possibilities compared to the ARM instructions executed in the ARM instruction set state.

In Thumb, the 16-bit opcodes have less functionality. For example, only branches can be conditional, and many opcodes are restricted to accessing only half of all of the CPU's general purpose registers. The shorter opcodes give improved code density overall, even though some operations require extra instructions. In situations where the memory port or bus width is constrained to less than 32 bits, the shorter Thumb opcodes allow increased performance compared with 32-bit ARM code, as less program code may need to be loaded into the processor over the constrained memory bandwidth.

Embedded hardware, such as the [[Game Boy Advance]], typically have a small amount of RAM accessible with a full 32-bit datapath; the majority is accessed via a 16 bit or narrower secondary datapath. In this situation, it usually makes sense to compile Thumb code and hand-optimise a few of the most CPU-intensive sections using full 32-bit ARM instructions, placing these wider instructions into the 32-bit bus accessible memory.

The first processor with a Thumb instruction decoder was the ARM7TDMI. All ARM9 and later families, including [[Intel XScale|XScale]], have included a Thumb instruction decoder.

===Thumb-2===
''Thumb-2'' technology made its debut in the ''ARM1156 core'', announced in 2003. Thumb-2 extends the limited 16-bit instruction set of Thumb with additional 32-bit instructions to give the instruction set more breadth, thus producing a variable-length instruction set. A stated aim for Thumb-2 is to achieve code density similar to Thumb with performance similar to the ARM instruction set on 32-bit memory.  In ARMv7 this goal can be said to have been met.{{Citation needed|date=December 2011}}

Thumb-2 extends both the ARM and Thumb instruction set with yet more instructions, including bit-field manipulation, table branches, and conditional execution.  A new &quot;Unified Assembly Language&quot; (UAL) supports generation of either Thumb-2 or ARM instructions from the same source code; versions of Thumb seen on ARMv7 processors are essentially as capable as ARM code (including the ability to write interrupt handlers).  This requires a bit of care, and use of a new &quot;IT&quot; (if-then) instruction, which permits up to four successive instructions to execute based on a tested condition.  When compiling into ARM code this is ignored, but when compiling into Thumb-2 it generates an actual instruction.  For example:
&lt;source lang=&quot;asm&quot;&gt;
; if (r0 == r1)
CMP r0, r1
ITE EQ        ; ARM: no code ... Thumb: IT instruction
; then r0 = r2;
MOVEQ r0, r2  ; ARM: conditional; Thumb: condition via ITE 'T' (then)
; else r0 = r3;
MOVNE r0, r3  ; ARM: conditional; Thumb: condition via ITE 'E' (else)
; recall that the Thumb MOV instruction has no bits to encode &quot;EQ&quot; or &quot;NE&quot;
&lt;/source&gt;

All ARMv7 chips support the Thumb-2 instruction set.
Some chips, such as the Cortex-M3, support only the Thumb-2 instruction set. Other chips in the Cortex and ARM11 series support both &quot;ARM instruction set mode&quot; and &quot;Thumb-2 instruction set mode&quot;.&lt;ref&gt;{{Cite web|url=http://www.arm.com/products/CPUs/architecture.html |title=ARM Processor Instruction Set Architecture |publisher=Arm.com |date= |accessdate=2009-04-18}}&lt;/ref&gt;&lt;ref&gt;{{Cite web|url=http://www.linuxdevices.com/news/NS7814673959.html |title=ARM aims son of Thumb at uCs, ASSPs, SoCs |publisher=Linuxdevices.com |date= |accessdate=2009-04-18}}&lt;/ref&gt;&lt;ref&gt;{{Cite web|url=http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0290g/I1005458.html |title=ARM Information Center |publisher=Infocenter.arm.com |date= |accessdate=2009-04-18}}&lt;/ref&gt;

===Thumb Execution Environment (ThumbEE)===
''ThumbEE'', also termed ''Thumb-2EE'', and marketed as [http://www.arm.com/products/multimedia/java/jazelle_architecture.html Jazelle RCT] (Runtime Compilation Target), was announced in 2005, first appearing in the ''Cortex-A8'' processor. ThumbEE is a fourth processor mode, making small changes to the Thumb-2 extended Thumb instruction set.  These changes make the instruction set particularly suited to code generated at runtime (e.g. by [[Just-in-time compilation|JIT compilation]]) in managed ''Execution Environments''. ThumbEE is a target for languages such as [[Limbo (programming language)|Limbo]], [[Java (programming language)|Java]], [[C Sharp (programming language)|C#]], [[Perl]] and [[Python (programming language)|Python]], and allows [[JIT compiler]]s to output smaller compiled code without impacting performance.

New features provided by ThumbEE include automatic null pointer checks on every load and store instruction, an instruction to perform an array bounds check, access to registers r8-r15 (where the Jazelle/DBX Java VM state is held), and special instructions that call a handler.&lt;ref&gt;
[http://www.arm.com/miscPDFs/10069.pdf &quot;Arm strengthens Java compilers: New 16-Bit Thumb-2EE Instructions Conserve System Memory&quot;] by Tom R. Halfhill 2005.&lt;/ref&gt; Handlers are small sections of frequently called code, commonly used to implement a feature of a high level language, such as allocating memory for a new object.  These changes come from repurposing a handful of opcodes, and knowing the core is in the new ThumbEE mode.

===VFP===
''VFP'' (Vector Floating Point) technology is an ''FPU'' coprocessor extension to the ARM architecture. It provides low-cost [[single precision floating-point format|single-precision]] and [[double precision floating-point format|double-precision]] floating-point computation fully compliant with the ''[[IEEE 754|ANSI/IEEE Std 754-1985 Standard for Binary Floating-Point Arithmetic]]''. VFP provides floating-point computation suitable for a wide spectrum of applications such as PDAs, smartphones, voice compression and decompression, three-dimensional graphics and digital audio, printers, set-top boxes, and automotive applications. The VFP architecture was intended to support execution of short &quot;vector mode&quot; instructions but these operated on each vector element sequentially and thus did not offer the performance of true [[SIMD|single instruction, multiple data]] (SIMD) vector parallelism. This vector mode was therefore removed shortly after its introduction,&lt;ref&gt;{{Cite web|url=http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0204j/Chdehgeh.html |title=VFP directives and vector notation |publisher=Arm.com |accessdate=2011-11-21}}&lt;/ref&gt; to be replaced with the much more powerful NEON Advanced SIMD unit.

Some devices such as the ARM Cortex-A8 has a cut-down ''VFPLite'' module instead of a full VFP module, and requires roughly 10x more clock cycles per float operation.&lt;ref name=&quot;cortex_a9&quot;&gt;{{Cite web|url=http://www.shervinemami.info/armAssembly.html#cortex-a9 |title=Differences between ARM Cortex-A8 and Cortex-A9 |publisher=Shervin Emami |accessdate=2011-11-21}}&lt;/ref&gt; Other floating-point and/or SIMD coprocessors found in ARM-based processors include [[Floating Point Accelerator|FPA]], FPE, [[MMX (instruction set)|iwMMXt]]. They provide some of the same functionality as VFP but are not [[opcode]]-compatible with it.

===Advanced SIMD (NEON)===
The ''Advanced SIMD'' extension (aka ''NEON'' or &quot;MPE&quot; Media Processing Engine) is a combined 64- and 128-bit [[SIMD|single instruction multiple data]] (SIMD) instruction set that provides standardized acceleration for media and signal processing applications. NEON is included in all Cortex-A8 devices (such as the iPhone 4) but is optional in Cortex-A9 devices&lt;ref&gt;{{Cite web|url=http://www.arm.com/products/processors/cortex-a/cortex-a9.php |title=Cortex-A9 Processor |publisher=Arm.com |date= |accessdate=2011-11-21}}&lt;/ref&gt; (such as the iPhone 4S). NEON can execute MP3 audio decoding on CPUs running at 10&amp;nbsp;MHz and can run the [[GSM]] [[adaptive multi-rate compression|adaptive multi-rate]] (AMR) speech [[codec]] at no more than 13&amp;nbsp;MHz. It features a comprehensive instruction set, separate register files and independent execution hardware.&lt;ref&gt;{{Cite web|url=http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0409f/Chdceejc.html |title=About the Cortex-A9 NEON MPE |publisher=Arm.com |date= |accessdate=2011-11-21}}&lt;/ref&gt; NEON supports 8-, 16-, 32- and 64-bit integer and single-precision (32-bit) floating-point data and operates in SIMD operations for handling audio and video processing as well as graphics and gaming processing. In NEON, the SIMD supports up to 16 operations at the same time. The NEON hardware shares the same floating-point registers as used in VFP. Devices such as the ARM Cortex-A8 and Cortex-A9 support 128-bit vectors but will execute with just 64-bits at a time,&lt;ref name=&quot;cortex_a9&quot; /&gt; whereas newer Cortex-A15 devices can execute 128-bits at once.

===Security Extensions (TrustZone)===
The Security Extensions, marketed as TrustZone Technology, is found in ARMv6KZ and later application profile architectures. It provides a low cost alternative to adding an additional dedicated security core to an [[system-on-a-chip|SoC]], by providing two virtual processors backed by hardware based access control. This enables the application core to switch between two states, referred to as worlds (to reduce confusion with other names for capability domains), in order to prevent information from leaking from the more trusted world to the less trusted world. This world switch is generally orthogonal to all other capabilities of the processor, thus each world can operate independently of the other while using the same core. Memory and peripherals are then made aware of the operating world of the core and may use this to provide access control to secrets and code on the device.

Typical applications of TrustZone Technology are to run a rich operating system in the less trusted world, and smaller security-specialized code in the more trusted world (named TrustZone Software, a TrustZone optimized version of the Trusted Foundations Software developed by [http://www.trusted-logic.com Trusted Logic]), allowing much tighter [[digital rights management]] for controlling the use of media on ARM-based devices,&lt;ref&gt;{{Cite web|url=http://news.thomasnet.com/companystory/476887 |title=ARM Announces Availability of Mobile Consumer DRM Software Solutions Based on ARM T |publisher=News.thomasnet.com |date= |accessdate=2009-04-18}}&lt;/ref&gt; and preventing any unapproved use of the device.

In practice, since the specific implementation details of TrustZone are proprietary and have not been publicly disclosed for review, it is unclear what level of assurance is provided for a given threat model.

===No-execute page protection===
As of ARMv6, the ARM architecture supports [[NX bit|no-execute page protection]], which is referred to as ''XN'', for ''eXecute Never''.&lt;ref&gt;&quot;APX
and XN (execute never) bits have been added in VMSAv6 [Virtual Memory System Architecture]&quot;, [http://www.arm.com/miscPDFs/14128.pdf ARM Architecture Reference Manual], retrieved 2009/12/01.&lt;/ref&gt;

==ARM licensees==
{{Refimprove section|date=March 2011}}
ARM Ltd does not manufacture and sell CPU devices based on its own designs, but rather, licenses the processor architecture to interested parties. ARM offers a variety of licensing terms, varying in cost and deliverables. To all licensees, ARM provides an integratable hardware description of the ARM core, as well as complete software development toolset ([[compiler]], [[debugger]], [[SDK]]), and the right to sell manufactured [[silicon]] containing the ARM CPU.

Fabless licensees, who wish to integrate an ARM core into their own chip design, are usually only interested in acquiring a ready-to-manufacture verified [[IP core]]. For these customers, ARM delivers a [[netlist|gate netlist]] description of the chosen ARM core, along with an abstracted simulation model and test programs to aid design integration and verification. More ambitious customers, including integrated device manufacturers (IDM) and foundry operators, choose to acquire the processor IP in [[Logic synthesis|synthesizable]] [[Register transfer level|RTL]] ([[Verilog]]) form. With the synthesizable RTL, the customer has the ability to perform architectural level optimizations and extensions. This allows the designer to achieve exotic design goals not otherwise possible with an unmodified netlist (high clock speed, very low power consumption, instruction set extensions, etc.). While ARM does not grant the licensee the right to resell the ARM architecture itself, licensees may freely sell manufactured product (chip devices, evaluation boards, complete systems, etc.). [[Merchant]] [[Semiconductor fabrication plant|foundries]] can be a special case; not only are they allowed to sell finished silicon containing ARM cores, they generally hold the right to re-manufacture ARM cores for other customers.

Like most IP vendors, ARM prices its IP based on perceived value. In architectural terms, lower performing ARM cores command lower license costs than higher performing cores. In implementation terms, a synthesizable core costs more than a hard macro (blackbox) core. Complicating price matters, a merchant foundry which holds an ARM license (such as Samsung and Fujitsu) can offer reduced licensing costs to its fab customers. In exchange for acquiring the ARM core through the foundry's in-house design services, the customer can reduce or eliminate payment of ARM's upfront license fee. Compared to dedicated semiconductor foundries (such as [[TSMC]] and [[United Microelectronics Corporation|UMC]]) without in-house design services, Fujitsu/Samsung charge 2 to 3 times more per manufactured wafer. For low to mid volume applications, a design service foundry offers lower overall pricing (through subsidization of the license fee). For high volume mass produced parts, the long term cost reduction achievable through lower wafer pricing reduces the impact of ARM's NRE (Non-Recurring Engineering) costs, making the dedicated foundry a better choice.

Many semiconductor or IC design firms hold ARM licenses; [[Analog Devices]], [[AppliedMicro]], [[Atmel]], [[Broadcom]], [[Cirrus Logic]], [[Energy Micro]], [[Faraday Technology]], [[Freescale]], [[Fujitsu]], [[Intel]] (through its settlement with [[Digital Equipment Corporation]]), [[International Business Machines|IBM]], [[Infineon Technologies]], [[Marvell Technology Group]], [[Nintendo]], [[NXP Semiconductors]], [[Oki Electric Industry|OKI]], [[Qualcomm]], [[Samsung Electronics|Samsung]], [[Sharp Corporation|Sharp]], [[STMicroelectronics]], and [[Texas Instruments]] are some of the many companies who have licensed the ARM in one form or another.

===Approximate licensing costs===
ARM's 2006 annual report and accounts state that royalties totalling Â£88.7 million ($164.1 million) were the result of licensees shipping 2.45 billion units.&lt;ref&gt;&quot;Business review/Financial review/IFRS&quot;, p. 10, [http://media.corporate-ir.net/media_files/irol/19/197211/reports/ar06.pdf ARM annual report and accounts, 2006]. Retrieved May 7, 2007.&lt;/ref&gt; This is equivalent to Â£0.036 ($0.067) per unit shipped. However, this is averaged across all cores, including expensive new cores and inexpensive older cores.

In the same year ARM's licensing revenues for processor cores were Â£65.2 million (US$119.5 million),&lt;ref&gt;Based on total Â£110.6 million ($202.5 million) divided by &quot;License revenues by product&quot;; &quot;Business review/Financial review/IFRS&quot; and &quot;Key performance indicators&quot; respectively, p. 10 / p. 3 [http://media.corporate-ir.net/media_files/irol/19/197211/reports/ar06.pdf ARM annual report and accounts, 2006]. Retrieved May 7, 2007.&lt;/ref&gt; in a year when 65 processor licenses were signed,&lt;ref&gt;&quot;Key performance indicators&quot;, p. 3, [http://media.corporate-ir.net/media_files/irol/19/197211/reports/ar06.pdf ARM annual report and accounts, 2006]. Retrieved May 7, 2007.&lt;/ref&gt; an average of Â£1 million ($1.84 million) per license. Again, this is averaged across both new and old cores.

Given that ARM's 2006 income from processor cores was approximately 60% from royalties and 40% from licenses, ARM makes the equivalent of Â£0.06 ($0.11) per unit shipped including both royalties and licenses. However, as one-off licenses are typically bought for new technologies, unit sales (and hence royalties) are dominated by more established products. Hence, the figures above do not reflect the true costs of any single ARM product.

==Operating systems==
[[File:Android 4.0.png|thumb|[[Android (operating system)|Android]], a popular operating system running on the ARM architecture]]
{{Primary sources|section|date=September 2011}}

===Acorn systems===
The very first ARM-based [[Acorn Archimedes]] personal computers ran an interim operating system called [[Arthur (operating system)|Arthur]], which evolved into [[RISC OS]], used on later ARM-based systems from Acorn and other vendors.

===Embedded operating systems===
The ARM architecture is supported by a large number of [[Embedded operating system|embedded]] and [[real-time operating systems]], including [[Windows CE]], [[.NET Micro Framework]], [[Symbian]], [[ChibiOS/RT]], [[FreeRTOS]], [[eCos]], [[Integrity (operating system)|Integrity]], [[Nucleus RTOS|Nucleus PLUS]], [[MicroC/OS-II]], [[QNX]], [[RTEMS]], BRTOS, [[RTXC Quadros]], [[ThreadX]], [[Unison Operating System]], [[uTasker]], [[VxWorks]], [[MQX]] and [[Operating System Embedded|OSE]].&lt;ref name=&quot;arm-soft&quot;&gt;{{Cite web|title=Software Enablement|url=http://www.arm.com/community/software-enablement/index.php|work=www.arm.com|publisher=ARM Ltd.|accessdate=18 November 2010}}&lt;/ref&gt;

===Unix-like===
The ARM architecture is supported by [[Unix]] and [[Unix-like]] operating systems such as:
*[[Android (operating system)|Android]]
*[[BSD]]
*[[Linux]]
*[[iOS]]
*[[Plan 9 from Bell Labs]]
**[[Inferno (operating system)|Inferno]]
*[[Solaris (operating system)|Solaris]]
*[[webOS]] 
*[[Bada]]
{{col-begin}}
{{col-2}}

====Linux====
The following [[Linux distribution]]s support ARM processors:
{{div col}}
* [[APEXAR PDK (APEXAR Embedded Solution)|APEXAR PDK]]&lt;ref&gt;{{Cite web|url=http://www.apexar.com|title=APEXAR PDK|publisher=|date= |accessdate=2011-11-08}}&lt;/ref&gt;
* [[Android (operating system)|Android]]&lt;ref&gt;{{Cite web|url=http://source.android.com/source/index.html |title=Android Source Code |publisher=|date= |accessdate=2011-07-01}}&lt;/ref&gt;
* [[Arch Linux Arm]]&lt;ref&gt;{{Cite web|url=http://archlinuxarm.org/ |title=Arch Linux Arm |publisher=|date= |accessdate=2011-11-12}}&lt;/ref&gt;
* [[ÃngstrÃ¶m distribution|ÃngstrÃ¶m]]&lt;ref&gt;http://www.angstrom-distribution.org/&lt;/ref&gt;
* [[CRUX ARM]]&lt;ref&gt;{{Cite web|url=http://crux-arm.nu/ |title=CRUX Linux on ARM |publisher=|date= |accessdate=2011-05-01}}&lt;/ref&gt;
* [[BackTrack]]
* [[Google Chrome OS|Chrome OS]]&lt;ref name=&quot;Bloomberg&quot;&gt;{{cite web|last=Womack|first=Brian|date=July 8, 2009|accessdate=July 8, 2009|url=http://www.bloomberg.com/apps/news?pid=20601087&amp;sid=aTd2k.YdQZ.Y|title=Google to Challenge Microsoft With Operating System|publisher=Bloomberg }}&lt;/ref&gt;
* [[DSLinux]]{{citation needed|date=March 2011}}
* [[Debian]]&lt;ref&gt;{{Cite web|url=http://www.debian.org/ports/arm/ |title=Debian ARM Port|publisher=|date= |accessdate=2009-06-01}}&lt;/ref&gt;
* [[ELinOS]]&lt;ref&gt;{{Cite web|url=http://www.sysgo.com/products/board-support-packages/elinos/ |title=ELinOS supported boards |publisher=|date= |accessdate=2010-04-22}}&lt;/ref&gt;
* [[Fedora (operating system)|Fedora]]&lt;ref&gt;{{Cite web|url=http://fedoraproject.org/wiki/Architectures/ARM |title=Architectures/ARM |publisher=|date= |accessdate=2009-06-01}}&lt;/ref&gt;
* [[Gentoo Linux|Gentoo]]&lt;ref&gt;{{Cite web|url=http://www.gentoo.org/proj/en/base/arm/index.xml |title=Gentoo Linux ARM Development |publisher=|date= |accessdate=2009-06-01}}&lt;/ref&gt;
* [[GoboLinux]]&lt;ref&gt;{{Cite web|url=http://lists.gobolinux.org/pipermail/gobolinux-arm/2007-January/000019.html |title=New release for ARM cpus |publisher=|date=2007-01-25 |accessdate=2009-09-17}}&lt;/ref&gt;
* [[iPodLinux]]{{citation needed|date=March 2011}}
* [[Maemo]]{{citation needed|date=March 2011}}
* [[MeeGo]]{{citation needed|date=March 2011}}
* [[Mer]]&lt;ref&gt;{{Cite web|url=http://releases.merproject.org/releases/0.20111020.1/builds/ |title=Mer ARM builds|publisher=|date= |accessdate=2011-11-27}}&lt;/ref&gt;
* [[MontaVista]]&lt;ref&gt;{{Cite web|url=http://www.mvista.com/boards.php |title=Platform Support for MontaVista Linux |publisher=|date= |accessdate=2010-02-16}}&lt;/ref&gt;
* [[Slackware]]&lt;ref&gt;{{Cite web|url=http://www.armedslack.org/ |title=Slackware Linux for ARM |publisher=|date= |accessdate=2009-06-01}}&lt;/ref&gt;
* [[T2 SDE]]&lt;ref&gt;{{Cite web|url=http://www.t2-project.org/ |title=T2 SDE |publisher=|date= |accessdate=2010-03-12}}&lt;/ref&gt;
* [[TimeSys]]&lt;ref&gt;{{Cite web|url=http://www.timesys.com/ |title=TimeSys |publisher=|date= |accessdate=2011-09-30}}&lt;/ref&gt;
* [[Ubuntu (operating system)|Ubuntu]]&lt;ref&gt;{{Cite web|url=http://www.ubuntu.com/products/whatisubuntu/arm|title=Ubuntu on Arm|year=2009|publisher=[[Canonical Ltd.]]|accessdate=2009-06-15}}&lt;/ref&gt;&lt;ref&gt;{{Cite web|url=https://wiki.ubuntu.com/ARM |title=ARM |publisher=|date= |accessdate=2009-06-01}}&lt;/ref&gt;
* [[webOS]]{{citation needed|date=March 2011}}
* [[Wind River Linux]]&lt;ref&gt;{{Cite web|url=http://windriver.com/products/bsp_web/bsp_platform.html?platform=Wind+River+Linux+3.0.x |title=Wind River - Board Support Packages |publisher=|date= |accessdate=2010-02-16}}&lt;/ref&gt;
{{div col}}
{{col-2}}

====BSD====
The following BSD derivatives support ARM processors:
*[[RISC iX]] (Acorn ARM2/ARM3-based systems only)
* [[FreeBSD]]&lt;ref&gt;{{Cite web|url=http://www.freebsd.org/platforms/arm.html |title=FreeBSD/ARM Project |publisher=|date= |accessdate=2009-06-01}}&lt;/ref&gt;
* [[NetBSD]]&lt;ref&gt;{{Cite web|url=http://www.netbsd.org/ports/#ports-by-cpu |title=Hardware supported by NetBSD |publisher=|date= |accessdate=2009-06-01}}&lt;/ref&gt;
* [[OpenBSD]]&lt;ref&gt;{{Cite web|url=http://www.openbsd.org/armish.html |title=OpenBSD/armish |publisher=|date= |accessdate=2009-06-01}}&lt;/ref&gt;
* [[iOS]]

====Solaris====
* [[OpenSolaris]]&lt;ref&gt;{{Cite web|url=http://www.opensolaris.org/os/project/osarm/|title=OpenSolaris Project: ARM Platform Port|publisher=[[Sun Microsystems]]}}&lt;/ref&gt;
{{col-end}}

===Windows===
Microsoft announced on 5 January 2011 that the next major version of the [[Windows NT]] family (now termed [[Windows 8]])&lt;ref name=sf-win8&gt;{{cite news|title=Microsoft Says Faster ARM Chips Make Windows 8 'Natural Fit'|url=http://www.sfgate.com/cgi-bin/article.cgi?f=/g/a/2011/06/02/bloomberg1376-LM5E6P1A1I4H01-49H6CK3KIV23BG1ARCBRKIT8TD.DTL|accessdate=2 June 2011|newspaper=San Francisco Chronicle|date=2 June 2011}}&lt;/ref&gt; will include support for ARM processors. Microsoft demonstrated a preliminary version of Windows (version 6.2.7867) running on an ARM-based computer at the 2011 [[Consumer Electronics Show]].&lt;ref name=&quot;windows-ces2011&quot;&gt;[http://www.winrumors.com/microsoft-demonstrates-early-build-of-windows-8/ Microsoft demonstrates early build of Windows 8]&lt;/ref&gt; The ARM architecture is also supported by Microsoft's mobile operating systems, [[Windows Phone 7]] and [[Windows Mobile]].
ARM is also supported on Microsoft's Embedded OS, [[Windows Embedded CE]] which is now called [[Windows Embedded Compact]].  This latest version supports ARMv 5,6 and 7.  Windows CE 5 is the underlying OS for Windows Mobile and Windows Embedded Compact 7 is the underlying OS for Windows Phone 7. The smaller Microsoft OS .NET Microframework also uses ARM (only).

==See also==
{{Portal box|Electronics}}
{{div col}}
* [[AMULET microprocessor|AMULET]] â a family of asynchronous ARMs
* [[ARMulator|ARMulator, ARM Instruction Set Simulator]]
* [[ARMware]], a virtual machine that emulates an ARM-based PDA.
* [[QEMU]], a virtual machine which supports a lot of ARM processors (armXXXX, cortex-XX, ti925t, pxa2XX, pxa270-XX, any).
* [[LPC2000|NXP/Philips LPC2000 ARM7TDMI-S Microcontrollers]]
* [[Comparison of platform virtual machines#Other emulators|SkyEye simulator]] â an open source ARM Instruction Set Simulator
* [[Amber (processor core)]] â an open source ARM core developed in Verilog HDL.
* [[Smartbook]]
* [[Texas Instruments OMAP]] â an ARM core plus DSP and application acceleration cores
* [[Texas Instruments Stellaris ARM Microcontrollers]] â ARM MCUs using the Cortex-M3 and the Thumb-2 instruction set
* [[Symbian]]
* [[Windows CE]] and [[Windows Phone]]
* [[iOS]]
* [[Inferno (operating system)|Inferno]]
* [[Android (operating system)|Android]]
* [[Plug computer|Plug computer architectures]]
* [[Linaro]]
* [[Raspberry Pi]], a $25 ARM-based computer
{{div col end}}

==References==
{{Reflist|colwidth=30em}}

==Further reading==
* ''The Definitive Guide to the ARM Cortex-M3''; 2nd Edition; Joseph Yiu; Newnes; 479 pages; 2009; ISBN 978-1856179638. [http://books.google.com/books?id=mb5d_xeINZEC&amp;printsec=frontcover&amp;dq=isbn:9781856179638 (Online Sample)]
* ''The Definitive Guide to the ARM Cortex-M0''; 2nd Edition; Joseph Yiu; Newnes; 552 pages; 2011; ISBN 978-0123854773. [http://books.google.com/books?id=5OZblBzjsJ0C&amp;printsec=frontcover&amp;dq=isbn:9780123854773 (Online Sample)]

==External links==
{{Commons category|ARM microprocessors}}
* {{Official website|www.arm.com}}, ARM Ltd.

{{RISC-based processor architectures}}

{{DEFAULTSORT:Arm Architecture}}
[[Category:Acorn Computers]]
[[Category:ARM architecture| ]]
[[Category:Instruction set architectures]]
[[Category:1983 introductions]]
[[Category:Articles with example code]]

[[ar:Ø¥ÙÙ.Ø¢Ø±.Ø¥Ù (ÙØ¹Ø§ÙØ¬)]]
[[be-x-old:ARM (Ð¿ÑÐ°ÑÑÑÐ°Ñ)]]
[[ca:ARM]]
[[cs:ARM]]
[[da:ARM (processorarkitektur)]]
[[de:ARM-Architektur]]
[[el:ÎÏÏÎ¹ÏÎµÎºÏÎ¿Î½Î¹ÎºÎ® ARM]]
[[et:ARM (arvutiarhitektuur)]]
[[es:Arquitectura ARM]]
[[fr:Architecture ARM]]
[[ko:ARM ìí¤íì²]]
[[id:Arsitektur ARM]]
[[it:Architettura ARM]]
[[kn:ARM à²à²°à³à²à²¿à²à³à²à³à²à²°à³ (à²µà²¿à²¨à³à²¯à²¾à²¸)]]
[[lv:ARM]]
[[hu:ARM architektÃºra]]
[[ml:à´à´ à´àµ¼à´àµà´à´¿à´àµà´àµà´àµ¼]]
[[nl:ARM-instructieset]]
[[ja:ARMã¢ã¼ã­ãã¯ãã£]]
[[no:ARM (prosessorarkitektur)]]
[[pl:Architektura ARM]]
[[pt:Arquitetura ARM]]
[[ru:ARM (Ð°ÑÑÐ¸ÑÐµÐºÑÑÑÐ°)]]
[[sq:Arkitektura ARM]]
[[sl:Arhitektura ARM]]
[[sr:ARM Ð°ÑÑÐ¸ÑÐµÐºÑÑÑÐ°]]
[[fi:ARM]]
[[sv:ARM (processorarkitektur)]]
[[tr:ARM mimarisi]]
[[uk:ARM]]
[[vi:Cáº¥u trÃºc ARM]]
[[zh:ARMæ¶æ§]]</rev></revisions></page></pages></query></api>
