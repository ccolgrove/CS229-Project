<?xml version="1.0"?><api><query><pages><page pageid="1556246" ns="0" title="Coreboot"><revisions><rev xml:space="preserve">{{lowercase}}
{{Infobox software
| name = coreboot
| logo = [[Image:Coreboot logo.svg|alt=Graphic of a running hare in black and white above text &quot;coreboot&quot; in lowercase sans-serif font.|Coreboot logo]]
| screenshot =
| caption = coreboot
| author = Ronald G. Minnich, Eric Biederman, Olli Lo, Stefan Reinauer, the coreboot community
| developer =
| released = 1999
| latest release version = 4.0
| latest release date = {{Start date and age|2010|02|08}}
| platform = [[x86 architecture|x86]] [[x86-64]] (WiP:&lt;ref&gt;http://www.coreboot.org/ARM&lt;/ref&gt; [[ARM architecture|ARM]])
| genre = [[Firmware]]
| license = [[GNU General Public License]]
| website = [http://coreboot.org/ coreboot.org]
}}
'''Coreboot''' (formerly known as LinuxBIOS&lt;ref&gt;{{cite web
|url=http://coreboot.org/pipermail/coreboot/2008-January/029133.html
|title=&lt;nowiki&gt;[LinuxBIOS]&lt;/nowiki&gt; Welcome to coreboot
|date=2008-01-12
}}&lt;/ref&gt;) is a [[free software]] project, endorsed by the [[Free Software Foundation]],&lt;ref&gt;[http://www.fsf.org/campaigns/free-bios.html The Free Software Foundation's Campaign for Free BIOS]&lt;/ref&gt; aimed at replacing the proprietary [[BIOS]] [[firmware]] found in most computers with a lightweight system designed to perform only the minimum of tasks necessary to load and run a modern [[32-bit]] or [[64-bit]] [[operating system]].

==History==
The coreboot project was started in the winter of 1999 in the Advanced Computing Laboratory at [[Los Alamos National Laboratory]] (LANL).&lt;ref&gt;coreboot FAQ: [http://www.coreboot.org/FAQ#Who_is_working_on_coreboot.3F Who is working on coreboot?]&lt;/ref&gt;
The goal was a BIOS that would start fast and handle errors smartly.&lt;ref&gt;Anton Borisov: ''[http://www.h-online.com/open/features/The-Open-Source-BIOS-is-Ten-An-interview-with-the-coreboot-developers-746525.html?view=print The Open Source BIOS is Ten. An interview with the coreboot developers]''. [[The H]], 2009.&lt;/ref&gt;
It is licensed under the terms of the [[GNU General Public License]] (GPL). Main contributors have been [[Los Alamos National Laboratory|LANL]], [[Advanced Micro Devices|AMD]], [[coresystems GmbH]] and [[Linux Networx|Linux Networx, Inc]], as well as motherboard vendors [[Micro-Star International|MSI]], [[Gigabyte Technology|Gigabyte]] and [[Tyan]], by offering coreboot next to their standard BIOS or providing specifications of the hardware interfaces for some of their recent motherboards. However, Tyan seems to have dropped support of coreboot.{{Citation needed|date=January 2008}}
[[Google]] partly sponsors the coreboot project.&lt;ref&gt;[http://google-code-updates.blogspot.com/2006/11/google-sponsors-linuxbios-project.html Google Sponsors the LinuxBIOS project]&lt;/ref&gt; [[CME Group]], a cluster of [[futures exchange]]s, began supporting the coreboot project in 2009.&lt;ref&gt;[http://www.wallstreetandtech.com/it-infrastructure/showArticle.jhtml?articleID=217400294 CME Group Dives Into Coreboot]&lt;/ref&gt;

Code from [[Das U-Boot]] was assimilated to enable support for the [[ARM architecture]]&lt;ref&gt;http://blogs.coreboot.org/blog/2011/06/05/gsoc2011week-1-analysis-of-u-boot-arm-boot-code/&lt;/ref&gt;.

==Supported platforms==

Besides x86 and x86-64 architectures, coreboot support also exists for the AMD [[Geode (processor)|Geode]] solutions. Support started with the Geode GX processor developed by AMD for the [[One Laptop per Child|OLPC]], Artec Group then added Geode LX support for its model DBE61 [[ThinCan]]. Recently, that code was adopted by AMD and further polished for the OLPC after they upgraded to the Geode LX platform. That code is now being further developed by the coreboot community to support other AMD Geode solutions. Coreboot can be flashed onto an AMD Geode platform using [[Flashrom]].

From that initial development on AMD Geode based platforms, coreboot support has been extended onto many AMD processors and chipsets. The processor list includes Family 0Fh and 10h ([[AMD K8|K8]] core), and recently Family 14h ([[Bobcat (processor)|Bobcat]] core, [[AMD Fusion|Fusion]] [[Accelerated Processing Unit|APU]]). Coreboot support also extends to AMD chipsets: [[AMD 690 chipset series|RS690]], [[AMD 700 chipset series|RS7xx]], [[AMD 580 chipset series|SB600]], and SB8xx. It is expected that as new processors and chipsets are introduced, coreboot will quickly support them as well.

==Design==

Coreboot usually loads a [[Linux kernel]], but it can load any other [[standalone program|stand-alone]] [[Executable and Linkable Format|ELF]] executable, such as [[Etherboot]], which can boot [[Linux]] over a [[network boot|network]], or [[SeaBIOS]]&lt;ref&gt;[http://www.coreboot.org/SeaBIOS SeaBIOS] (previously known as LegacyBIOS) is an open-source legacy BIOS implementation&lt;/ref&gt;, which can load Linux, [[Microsoft Windows]] 2000 and later, and *BSD (previously, Windows 2000/XP and OpenBSD support was provided by ADLO&lt;ref&gt;[http://www.coreboot.org/ADLO coreboot Add-on Layer (ADLO)]&lt;/ref&gt;&lt;ref&gt;[http://www.missl.cs.umd.edu/sebos_phase2.html SEBOS, Security Enhanced Bootloader for Operating Systems, Phase 2 ], adding PC BIOS Services to coreboot via Bochs BIOS (Link noted to be defunct on 18 July 2008. See [http://web.archive.org/web/20070619101948/www.missl.cs.umd.edu/sebos_phase2.html SEBOS page archived on archive.org] Archived copy of SEBOS Phase 2)&lt;/ref&gt;).
Coreboot can also load almost any [[operating system]] from any supported device, such as Myrinet, Quadrics, or SCI [[Computer cluster|cluster]] interconnects. Some OSes (such as Windows 2000/XP/Vista/7 and *BSD) require legacy BIOS functions which are provided by SeaBIOS.

A unique feature of coreboot is that the [[x86 architecture|x86]] version runs in [[32-bit]] mode after executing only ten instructions&lt;ref&gt;[http://lxr.linux.no/coreboot-v3+r777/arch/x86/geodelx/stage0.S coreboot v3 early startup code]&lt;/ref&gt; (almost all other x86 BIOSes run exclusively in [[16-bit]] mode).  This is similar to the modern [[Uefi|UEFI]] firmware, which is used on Intel-based Macintosh computers and other newer PC hardware.

Coreboot can boot other [[Kernel (computer science)|kernels]], or pass control to a boot loader to boot a kernel/image instead. It can also boot a [[Plan 9 from Bell Labs]] kernel directly {{clarify|reason=Implies booting of plan 9 differs from &quot;other kernels&quot; but it is not clear how|date=May 2011}}. A coreboot-capable version of [[GNU GRUB]] 2 exists.

By default, coreboot does not provide [[BIOS interrupt call|BIOS call]] services. A payload called SeaBIOS can be used to provide BIOS calls and thus allow coreboot to load [[operating system]]s that require those services, however most modern operating systems access hardware in another manner and only use BIOS calls during early initialization and as a fallback mechanism.

==Developing and debugging coreboot==
Since coreboot must initialize the bare hardware, it must be ported to every [[chipset]] and [[motherboard]] that it supports. Before initializing [[Random-access memory|RAM]], coreboot initializes the [[serial port]] (addressing cache and registers only), so it can send out debug text to a connected [[Computer terminal|terminal]]. It can also send byte codes to port 0x80 that are displayed on a two-hex-digit display of a connected [[POST card]]. Another porting aid is the commercial &quot;RD1 BIOS Savior&quot; product from IOSS,&lt;ref&gt;[http://www.ioss.com.tw/ IOSS]&lt;/ref&gt; which is a combination of two boot memory devices that plugs into the boot memory socket and has a manual switch to select between the two devices. The computer can boot from one device, and then the switch can be toggled to allow the computer to reprogram or &quot;flash&quot; the second device.  A more expensive alternative is an external [[EPROM]]/[[Flash memory|flash]] programmer. There are also CPU [[emulator]]s that either replace the [[Central processing unit|CPU]] or connect via a [[Joint Test Action Group|JTAG]] port, with the Sage SmartProbe&lt;ref&gt;[http://www.se-eng.com/ Sage Engineering]&lt;/ref&gt; being an example. Code can be built on, or downloaded to, BIOS emulators rather than flashing the BIOS device.

==Payloads==
Coreboot can load a payload. Payloads can be written using the libpayload helper-library, but it is not required. Existing payloads include:
* [[SeaBIOS]], a tiny implementation of x86 BIOS, written mostly in 16-bit [[C_(programming_language)|C]] using the [[GNU_Compiler_Collection|GNU C compiler]]. It is able to boot traditional PC operating systems.
* FILO, a GRUB-like bootloader with USB boot support.
* Etherboot, it can boot an operating system over the network
* [[gPXE]], the successor to Etherboot, works when run under SeaBIOS.
* [[TianoCore]]
* A branch of [[Das U-Boot]] used by Google for [[Chromium OS]]&lt;ref&gt;{{cite web
|url=http://groups.google.com/a/chromium.org/group/chromium-os-reviews/browse_thread/thread/8daf5b5ffe245c1d/0eda7e414407a923
|title=Modify u-boot code to allow building coreboot payload. &lt;nowiki&gt;[chromiumos/third_party/u-boot-next : chromeos-v2011.03]&lt;/nowiki&gt;
|date=2011-07-24
}}&lt;/ref&gt;

==Initializing DRAM==
The most difficult hardware that coreboot initializes is the [[Memory controller|DRAM controller]]s and [[Dynamic random-access memory|DRAM]]. In some cases, technical documentation on this subject is [[Non-disclosure agreement|NDA]] restricted or unavailable. RAM initialization is particularly difficult because before the RAM is initialized it cannot be used. Therefore, to initialize DRAM controllers and DRAM, the initialization code may have only the CPU's [[Processor register|general purpose registers]] or Cache-as-RAM as temporary storage.

[[romcc]], a [[C (programming language)|C]] [[compiler]] that uses registers instead of RAM, eases the task. Using romcc, it is relatively easy to make [[System Management Bus|SMBus]] accesses to the [[Serial Presence Detect|SPD]] ROMs of the DRAM [[DIMM]]s, that allows the RAM to be used.

With newer x86 processors, the processor cache can be used as RAM until DRAM is initialized. The processor cache has to be initialized into Cache-as-RAM&lt;ref&gt;[http://www.coreboot.org/images/6/6c/LBCar.pdf A Framework for Using Processor Cache as RAM (CAR)]&lt;/ref&gt; mode as well, but this needs fewer instructions than initializing DRAM. Also, the Cache-as-RAM mode initialization is specific to CPU architectures, thus more generic than DRAM initialization, which is specific to each chipset and mainboard.

==See also==
{{Portal|Free software}}
* [[OpenBIOS]]
* [[Open Firmware]]
* [[ThinCan]]
* [[Rapid Boot]]
* [[LOBOS]]

==References==
{{Reflist|2}}

== Further reading ==

* [http://www-128.ibm.com/developerworks/linux/library/l-bios.html?ca=drs- Open BIOSes for Linux], by Peter Seebach
* [http://www.linux.com/article.pl?sid=06/11/30/199208 LinuxBIOS ready to go mainstream], by Bruce Byfield
* [http://lkml.org/lkml/2007/2/21/490 First desktop motherboard supported by LinuxBIOS: GIGABYTE M57SLI-S4], by Brandon Howard
* [http://ftp.belnet.be/mirrors/FOSDEM/2007/FOSDEM2007-LinuxBios.ogg Video recording of Ron Minnich's LinuxBIOS talk from FOSDEM 2007]

== External links ==

* {{Official|http://www.coreboot.org/}}

[[Category:BIOS]]
[[Category:Free boot loaders]]
[[Category:High priority free software projects]]
[[Category:Linux]]

[[cs:Coreboot]]
[[de:Coreboot]]
[[es:Coreboot]]
[[fr:Coreboot]]
[[ko:ì½ì´ë¶í¸]]
[[hr:Coreboot]]
[[it:Coreboot]]
[[ja:Coreboot]]
[[pl:Coreboot]]
[[pt:Coreboot]]
[[ru:Coreboot]]
[[sv:Coreboot]]</rev></revisions></page></pages></query></api>
