<?xml version="1.0"?><api><query><pages><page pageid="15196829" ns="0" title="Debian build toolchain"><revisions><rev xml:space="preserve">[[Image:Debian-source-package.png|right|frame|A typical input of the Debian build tools: three files constituting the source package (the bottom) and the unpacked source tree with a &lt;code&gt;debian&lt;/code&gt; subdirectory added there by the package maintainer.]]
The '''Debian build toolchain''' is a collection of software utilities used to create [[Debian]] source packages (&lt;code&gt;.dsc&lt;/code&gt;) and [[Deb (file format)|Debian binary packages]] (&lt;code&gt;.deb&lt;/code&gt; files) from [[Upstream (software development)|upstream]] source [[tarball]]s.

These tools are used in the Debian project and also in Debian-based distributions such as [[Ubuntu (operating system)|Ubuntu]].

==Overview==
Source code for [[free software]] is typically distributed in compressed [[Tar (file format)|tar]] archives called tarballs. Debian is a binary-oriented distribution, meaning that its &lt;code&gt;deb&lt;/code&gt; packages include precompiled binaries and data files arranged into a file system hierarchy that the software expects. The Debian build toolchain thus needs instructions on how to use the upstream build system to build correct &lt;code&gt;deb&lt;/code&gt; packages.

These instructions are stored in the &lt;code&gt;debian&lt;/code&gt; subdirectory, which is added to the source tree for the software being packaged by the package [[Software maintainer|maintainer]]. While it is possible to build the package directly from the modified source tree, it is standard practice to create ''source packages'', which contain the changes the maintainer made to the upstream sources in redistributable form.

==Source packages==
A typical Debian source package consists of three files:
* The original tarball &amp;mdash; a mere copy of the upstream source tarball if it is in &lt;code&gt;tar.gz&lt;/code&gt; format and no changes are necessary, or a repacked tarball. The latter can happen if it contains a snapshot from a [[version control system]] that was never released in tarball form, or if the maintainer needs to remove files not compatible with the [[Debian Free Software Guidelines]].
* The &lt;code&gt;diff.gz&lt;/code&gt; file, which contains changes to the upstream source made by the package maintainer. This includes the entire &lt;code&gt;debian&lt;/code&gt; directory and any modified files outside it (although such changes are usually aggregated into patch files that are automatically applied before building). It is a file in the unified [[diff]] format, compressed with [[gzip]].
* The &lt;code&gt;dsc&lt;/code&gt; file, which is a text file with [[metadata]], such as the names of all files constituting the source package and their [[MD5]] checksums. It also contains the signature of the creator of the source package.

For example, a source package named &lt;code&gt;foo&lt;/code&gt; with upstream version 1.2.3 and Debian revision 4 can consist of the following files:
* &lt;code&gt;foo_1.2.3.orig.tar.gz&lt;/code&gt;
* &lt;code&gt;foo_1.2.3-4.diff.gz&lt;/code&gt;
* &lt;code&gt;foo_1.2.3-4.dsc&lt;/code&gt;

A source package is created using the &lt;code&gt;dpkg-buildpackage&lt;/code&gt; tool or its wrapper &lt;code&gt;debuild&lt;/code&gt;. When invoked to create a source package, &lt;code&gt;dpkg-buildpackage&lt;/code&gt; calls the maintainer's rules to clean the source tree of any intermediate files, does various sanity checks, executes &lt;code&gt;diff&lt;/code&gt; to produce the difference between the original tarball and the unpacked source tree, and finally, signs the &lt;code&gt;dsc&lt;/code&gt; file with the packager's key using the &lt;code&gt;debsign&lt;/code&gt; utility.

The reverse process &amp;mdash; producing the unpacked source tree from a source package &amp;mdash; is accomplished using the &lt;code&gt;dpkg-source&lt;/code&gt; utility, which extracts the original tarball to a subdirectory and then applies the changes from the &lt;code&gt;diff.gz&lt;/code&gt; file. This is the first step that a build system does when building binary packages from a source package.

==The &lt;code&gt;debian&lt;/code&gt; directory==
The &lt;code&gt;debian&lt;/code&gt; directory contains files used by &lt;code&gt;dpkg-buildpackage&lt;/code&gt; to create both binary and source packages. Unlike [[RPM Package Manager|RPM]], which uses a single &lt;code&gt;spec&lt;/code&gt; file for instructions, the Debian tools use an entire subdirectory with multiple files. Three files are required at minimum to correctly build a package &amp;mdash; &lt;code&gt;changelog&lt;/code&gt;, &lt;code&gt;control&lt;/code&gt; and &lt;code&gt;rules&lt;/code&gt;. A fourth file, &lt;code&gt;copyright&lt;/code&gt;, is mandated by the Debian policy, but is a legal requirement rather than a technical one.

By design, since they must be representable in a diff, all files in the &lt;code&gt;debian&lt;/code&gt; directory are text files, most of which are human-readable and edited with a simple text editor.

===&lt;code&gt;debian/changelog&lt;/code&gt;===
This file contains information about all versions of the package since it was created. The build tools only process the top entry, which is used to determine the package version, urgency (which is only of relevance to Debian itself), and bugs in the distribution that this release fixes.

For example, for a package named &lt;code&gt;foo&lt;/code&gt;, an example &lt;code&gt;debian/changelog&lt;/code&gt; entry can read like this:

&lt;source lang=&quot;text&quot;&gt;
foo (1.2.3-1) unstable; urgency=low

  * New upstream release.
  * Dropped 02_manpage_hyphens.dpatch, fixed upstream.
  * Added 04_edit_button_crash.dpatch: fix a crash after pressing the edit button. (Closes: #654321)
  * debian/control: foo should conflict with libbar. (Closes: #987654)

 -- John Doe &lt;jdoe@example.com&gt;  Fri, 30 Nov 2007 15:29:42 +0100
&lt;/source&gt;

Debian provides two main utilities for manipulating the &lt;code&gt;debian/changelog&lt;/code&gt; file:
* &lt;code&gt;dch&lt;/code&gt; is used to add new entries to the changelog or modify existing ones.
* &lt;code&gt;dpkg-parsechangelog&lt;/code&gt; parses the most recent entry and extracts data from it in a &lt;code&gt;Key: value&lt;/code&gt; format similar to &lt;code&gt;debian/control&lt;/code&gt;. It is primarily used in scripts.

===&lt;code&gt;debian/control&lt;/code&gt;===
This file contains information about the source package and all binary packages it builds (there can be more than one; for example, the source package &lt;code&gt;libbar&lt;/code&gt; can serve as the source for binary packages &lt;code&gt;libbar0&lt;/code&gt;, which contains just the shared library, and &lt;code&gt;libbar-dev&lt;/code&gt;, which contains a static version of the library and header files).

It lists (among others) such things as the package name, maintainer, target architectures (for binary packages), build dependencies (packages that must be installed for the package to successfully build) and dependencies (packages that must be installed for the package to function properly when installed).

===&lt;code&gt;debian/rules&lt;/code&gt;===
This file is a script that is invoked by &lt;code&gt;dpkg-buildpackage&lt;/code&gt; with a single argument that specifies the action to take (&lt;code&gt;clean&lt;/code&gt;, &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;install&lt;/code&gt;, &lt;code&gt;binary&lt;/code&gt;). Although it can technically be any kind of script, it is typically implemented as a [[makefile]].

Apart from invoking the upstream build system, most instructions in &lt;code&gt;debian/rules&lt;/code&gt; are highly repetitive and ubiquitous, and thus, virtually all &lt;code&gt;debian/rules&lt;/code&gt; files wrap this functionality in [[debhelper]] scripts. For example, automatically determining the dependencies based on shared libraries used is a very common action, and thus, instead of including the code necessary to do it, the &lt;code&gt;debian/rules&lt;/code&gt; file simply calls &lt;code&gt;dh_shlibdeps&lt;/code&gt;. Other examples of debhelper scripts include &lt;code&gt;dh_installdocs&lt;/code&gt;, which installs stock documentation files such as &lt;code&gt;debian/copyright&lt;/code&gt; into their appropriate locations, or &lt;code&gt;dh_fixperms&lt;/code&gt;, which ensures that files in the package have correct access rights (for example, executables in &lt;code&gt;/usr/bin&lt;/code&gt; have the &quot;executable&quot; bit set, but are only writable by the superuser).

Since sequences of &lt;code&gt;debhelper&lt;/code&gt; scripts are themselves repetitive, some packages simplify &lt;code&gt;debian/rules&lt;/code&gt; files directly by using [[CDBS]] instead of using &lt;code&gt;debhelper&lt;/code&gt; directly.

==Patch systems==
Sometimes, a maintainer needs to modify the original source. While this can be done simply by editing the files in place and including the changes in the &lt;code&gt;diff.gz&lt;/code&gt;, this can make maintenance difficult when new upstream versions are released, because all the changes have to be examined and merged when necessary.

Therefore, the Debian build toolchain includes several patch systems that allow applying and reverting groups of logically separated patches, each of which deals with one change and can be sent upstream as is. The canonical location for these files is &lt;code&gt;debian/patches&lt;/code&gt;.

The two most popular patch systems are &lt;code&gt;dpatch&lt;/code&gt; and &lt;code&gt;quilt&lt;/code&gt;. The former generates and executes [[shell scripts]] that are non-standard [[unified diff]] files with a header, which nevertheless are compatible with the standard &lt;code&gt;diff&lt;/code&gt; utility. The &lt;code&gt;debian/rules&lt;/code&gt; file is modified to call &lt;code&gt;dpatch apply-all&lt;/code&gt; before building the binary package and &lt;code&gt;dpatch deapply-all&lt;/code&gt; before building the source package (and cleaning up any build byproducts).

&lt;code&gt;quilt&lt;/code&gt; and certain other patch systems eliminate the need for special headers and use standard diff files.

==Tracking changes in source packages: &lt;code&gt;debdiff&lt;/code&gt; and &lt;code&gt;interdiff&lt;/code&gt;==

Sometimes a user may want to look at differences between two source packages &amp;mdash; for example, to generate a proposed patch against the version currently in the repository for inclusion in the distribution's [[bug tracking system]]. If both packages use the same upstream version, this can done using the &lt;code&gt;debdiff&lt;/code&gt; tool, which produces differences between two source trees with packaging changes included.

If the upstream tarballs for the two versions are different, such a naive comparison cannot be used. Instead, the &lt;code&gt;interdiff&lt;/code&gt; utility can be used to produce a diff ''between two diff files'' (in this case, between two &lt;code&gt;diff.gz&lt;/code&gt; files). A drawback is that an &lt;code&gt;interdiff&lt;/code&gt; output requires more effort to apply, and the one applying the changes must also find and download the newer upstream tarball, which is typically done using the &lt;code&gt;get-orig-source&lt;/code&gt; rule in &lt;code&gt;debian/rules&lt;/code&gt;.

==Sanity checks with &lt;code&gt;lintian&lt;/code&gt;==
This tool provides automated checks for common packaging mistakes in both binary and source packages, including Debian policy violations and potential compatibility problems.

While a maintainer typically aims to correct all issues pointed out by &lt;code&gt;lintian&lt;/code&gt;, different distributions can have different policies regarding them. For example, [[Ubuntu (operating system)|Ubuntu]] requires all packages originating in Ubuntu to be clean, but for a package merged into Ubuntu from Debian, there is no such requirement: new changes should simply not introduce any warnings in addition to existing ones. This is done to minimize the divergence between Debian and Ubuntu packages.

Here are example &lt;code&gt;lintian&lt;/code&gt; outputs:

&lt;source lang=&quot;text&quot;&gt;
W: foo source: source-contains-CVS-dir config/CVS
N:
N:   Package contains a CVS directory. It was most likely included by
N:   accident, since transient CVS data usually doesn't belong in packages.
N:   Export from CVS rather than use a checkout.
N:
&lt;/source&gt;

&lt;source lang=&quot;text&quot;&gt;
W: libfoo-dev: debian-changelog-line-too-long line 2
N:
N:   The given line of the latest changelog entry is over 80 columns. Such
N:   changelog entries may look poor in terminal windows and mail messages
N:   and be annoying to read. Please wrap changelog entries at 80 columns
N:   or less where possible.
N:
&lt;/source&gt;

&lt;source lang=&quot;text&quot;&gt;
I: foo: arch-dep-package-has-big-usr-share 3399kB 77%
N:
N:   The package has a significant amount of architecture-independent data
N:   in /usr/share, while it is an architecture-dependent package. This is
N:   wasteful of mirror space and bandwidth, as we then end up with
N:   multiple copies of this data, one for each architecture.
N:   
N:   If the data in /usr/share is not architecture-independent, it is a
N:   policy violation, and in this case, you should move that data
N:   elsewhere.
N:   
N:   See also:
N:   http://www.debian.org/doc/developers-reference/ch-best-pkging-practice
N:   s#s-bpp-archindepdata
&lt;/source&gt;

==Isolated build environments==
Source packages are intended to be buildable on any installation of the target distribution version, provided that build dependencies are met. In addition, builds can be affected by packages already present in the system.

To verify that a package builds on any system, and to exclude any external factors, tools to create isolated build environments are used. These are &lt;code&gt;pbuilder&lt;/code&gt; (Personal Builder) and &lt;code&gt;sbuild&lt;/code&gt;.

These tools maintain minimal working systems in [[chroot]], install only the necessary build dependencies listed in &lt;code&gt;debian/control&lt;/code&gt;, and remove them when the build is finished. Therefore, using &lt;code&gt;pbuilder&lt;/code&gt;, a package maintainer can detect if some build dependencies were not specified in &lt;code&gt;debian/control&lt;/code&gt;. Also, &lt;code&gt;pbuilder&lt;/code&gt; makes it possible to test-build for distributions other than the one the maintainer is running: for example, for the development version, while actually running the stable version&lt;/code&gt;.

&lt;code&gt;sbuild&lt;/code&gt; is designed for integration with automated build daemons (&lt;code&gt;buildd&lt;/code&gt;). It is used by Debian build servers, which automatically build binary packages for every supported architecture. The [[Launchpad (website)|Launchpad]] service provides similar build daemons for Ubuntu, both the official distribution and personal package archives (PPAs).

==See also==
* [[Deb (file format)]]
* [[dpkg]]
* [[debhelper]]
* [[CDBS]]
* [[lintian]]

==External links==
* [http://www.debian.org/doc/maint-guide/ Debian New Maintainer's Guide]
* [https://wiki.ubuntu.com/PackagingGuide Ubuntu Packaging Guide]

[[Category:Dpkg]]

[[ar:Ø³ÙØ³ÙØ© Ø§Ø¯ÙØ§Øª Ø¨ÙØ§Ø¡ Ø¯Ø¨ÙØ§Ù]]</rev></revisions></page></pages></query></api>
