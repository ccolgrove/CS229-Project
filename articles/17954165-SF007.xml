<?xml version="1.0"?><api><query><redirects><r from="Legacy Software" to="Legacy system" /></redirects><pages><page pageid="18295" ns="0" title="Legacy system"><revisions><rev xml:space="preserve">{{refimprove|date=March 2009}}
A '''legacy system''' is an old [[wiktionary:method|method]], [[technology]], [[computer system]], or [[application program]] that continues to be used, typically because it still functions for the users' needs, even though newer technology or more efficient methods of performing a task are now available. A legacy system may include procedures or terminology which are no longer relevant in the current context, and may hinder or confuse understanding of the methods or technologies used.

The term &quot;legacy&quot; may have little to do with the size or age of the system&amp;nbsp;&amp;mdash; [[Mainframe computer|mainframes]] run 64-bit [[Linux]] and [[Java (programming language)|Java]] alongside 1960s [[vintage computer|vintage code]].

Although the term is most commonly used to describe computers and software, it may also be used to describe human behaviors, methods, and tools. For example, [[timber framing]] using [[wattle and daub]] is a legacy building construction method.

== Overview ==
Organizations can have compelling reasons for keeping a legacy system, such as:
* The system works satisfactorily, and the owner sees no reason for changing it.
* The costs of redesigning or replacing the system are prohibitive because it is large, [[monolithic system|monolithic]], and/or complex.
* Retraining on a new system would be costly in lost time and money, compared to the anticipated appreciable benefits of replacing it (which may be zero).
* The system requires near-constant [[availability]], so it cannot be taken out of service, and the cost of designing a new system with a similar availability level is high. Examples include systems to handle customers' accounts in [[bank]]s, [[computer reservation system]]s, [[air traffic control]], energy distribution ([[power grid]]s), [[nuclear power plant]]s, military defense installations, and systems such as the [[TOPS]] database.
* The way that the system works is not well understood. Such a situation can occur when the designers of the system have left the organization, and the system has either not been fully documented or documentation has been lost. 
* The user expects that the system can easily be replaced when this becomes  necessary.

==NASA example==

NASA's [[Space Shuttle]] program still uses a large amount of 1970s-era technology. Replacement is cost-prohibitive because of the expensive requirement for flight certification; the legacy hardware currently being used has completed the expensive integration and certification requirement for flight, but any new equipment would have to go through that entire process â requiring extensive tests of the new components in their new configurations â before a single unit could be used in the Space Shuttle program. This would make any new system that started the certification process a ''[[de facto]]'' legacy system by the time of completion. 

Additionally, because the entire Space Shuttle system, including ground and launch vehicle assets, was designed to work together as a closed system, and the specifications have not changed, all of the certified systems and components still serve well in the roles for which they were designed.  It was advantageous for NASA â even before the Shuttle was scheduled to be retired in 2010 â to keep using many pieces of 1970s technology rather than to upgrade those systems. 

==Potential problems==
{{Unreferenced section|date=January 2008}}
Legacy systems are considered to be potentially problematic by many software engineers for several reasons (for example, see Bisbal et al., 1999). 
* Legacy systems often run on obsolete (and usually slow) hardware, and spare parts for such computers may become increasingly difficult to obtain. 
* If legacy [[software]] runs on only antiquated [[computer hardware|hardware]], the cost of maintaining the system may eventually outweigh the cost of replacing both the software and hardware unless some form of [[emulator|emulation]] or [[backward compatibility]] allows the software to run on new hardware. 
* These systems can be hard to maintain, improve, and expand because there is a general lack of understanding of the system; the staff who were experts on it have retired or forgotten what they knew about it, and staff who entered the field after it became &quot;legacy&quot; never learned about it in the first place. This can be worsened by lack or loss of documentation. A [[regional airline]] fired its CEO in 2004 due to the failure of an antiquated legacy crew scheduling system that ran into a limitation not known to anyone in the company.&lt;ref&gt;[http://www.cio.com/article/112103/Comair_s_Christmas_Disaster_Bound_To_Fail Comair's Christmas Disaster: Bound To Fail - CIO.com - Business Technology Leadership&lt;!-- Bot generated title --&gt;]&lt;/ref&gt;
* Legacy systems may have vulnerabilities in older operating systems or applications due to lack of security patches being available or applied. There can also be production configurations that cause security problems. These issues can put the legacy system at risk of being compromised by attackers or knowledgeable insiders.&lt;ref&gt;http://www.mousesecurity.com/?p=220 The Danger of Legacy Systems&lt;/ref&gt; 
* Integration with newer systems may also be difficult because new software may use completely different technologies.  The kind of bridge hardware and software that becomes available for different technologies that are popular at the same time are often not developed for differing technologies in different times, because of the lack of a large demand for it and the lack of associated reward of a large market economies of scale, though some of this &quot;glue&quot; does get developed by vendors and enthusiasts of particular legacy technologies (often called &quot;retrocomputing&quot; {{Citation needed|date=February 2009}} communities).
Integration with newer systems may also be difficult

==Improvements on legacy software systems==
Where it is impossible to replace legacy systems through the practice of [[application retirement]], it is still possible to enhance them.  Most development often goes into adding new interfaces to a legacy system.  The most prominent technique is to provide a Web-based interface to a terminal-based mainframe application.  This may reduce staff productivity due to slower response times and slower mouse-based operator actions, yet it is often seen as an &quot;upgrade&quot;, because the interface style is familiar to unskilled users and is easy for them to use. John McCormick discusses such strategies that involve [[middleware]].&lt;ref&gt;[http://www.gcn.com/state/vol6_no6/guide/748-1.html Mainframe-web middleware - John McCormick]&lt;/ref&gt;

Printing improvements are problematic because legacy software systems often add no formatting instructions, or they use protocols that are not usable in modern PC/Windows printers. A print server can be used to intercept the data and translate it to a more modern code. [[Rich Text Format|Rich Text Format (RTF)]] or [[PostScript]] documents may be created in the legacy application and then interpreted at a PC before being printed.

Biometric security measures are difficult to implement on legacy systems.  A workable solution is to use a [[telnet]] or [[http]] proxy server to sit between users and the mainframe to implement secure access to the legacy application.

The change being undertaken in some organizations is to switch to [[Automated Business Process]] (ABP) software which generates complete systems. These systems can then interface to the organizations' legacy systems and use them as [[data repository|data repositories]]. This approach can provide a number of significant benefits: the users are insulated from the inefficiencies of their legacy systems, and the changes can be incorporated quickly and easily in the ABP software .

==Legacy support==
The term ''legacy support'' is often used with reference to obsolete or legacy computer hardware, whether [[peripheral]]s or core components. [[Operating system]]s with &quot;legacy support&quot; can detect and use legacy hardware.

It is also used as a verb for what vendors do for products in legacy mode â they &quot;support&quot;, or provide [[software maintenance]], for older products. A &quot;legacy&quot; product may have some advantage over a modern product, even if not one that causes a majority of the market to favor it over the newer offering. A product is only truly &quot;obsolete&quot; if it has [[Pareto efficiency|an advantage to nobody]] â if no person making a rational decision would choose to acquire it new. 

In some cases, &quot;legacy mode&quot; refers more specifically to [[backward compatibility]].

The [[Mainframe computer|computer mainframe]] era saw many applications running in legacy mode. In the modern business computing environment, [[n-tier]], or [[3-tier]] [[Computer architecture|architectures]] are more difficult to place into legacy mode as they include many components making up a single system. Government regulatory changes must also be considered in a system running in legacy mode.{{Clarify me|date=February 2009}}

[[Virtual machine|Virtualization]] technology allows for a resurgence of modern [[software applications]] entering legacy mode.

==Brownfield architecture==

IT has borrowed the term [[Brownfield land|''brownfield'']] from the building industry, where undeveloped land (and especially unpolluted land) is described as ''[[greenfield]]'' and previously developed land &amp;ndash; which is often polluted and abandoned &amp;ndash; is described as ''brownfield''.&lt;ref&gt;[http://searchunifiedcommunications.techtarget.com/sDefinition/0,,sid186_gci1062754,00.html Definition of greenfield and brownfield deployment]&lt;/ref&gt; 

* A ''brownfield architecture'' is an IT network design that incorporates legacy systems.
* A ''brownfield deployment'' is an upgrade or addition to an existing IT network and uses some legacy components.

==Alternative view==
{{Inappropriate tone|date=December 2007}}
There is an alternate point of view&amp;nbsp;&amp;mdash; growing since the &quot;Dot Com&quot; bubble burst in 1999&amp;nbsp;&amp;mdash; that legacy systems are simply computer systems that are both installed and working. In other words, the term is not pejorative, but the opposite. [[Bjarne Stroustrup]], creator of the [[C++]] language, addressed this issue succinctly:
{{quote|&quot;Legacy code&quot; often differs from its suggested alternative by actually working and scaling.|[[q:Bjarne Stroustrup|Bjarne Stroustrup]]}}

IT analysts estimate that the cost to replace business logic is about five times that of reuse,{{Citation needed|date=March 2009}} and that's not counting the risks involved in wholesale replacement. Ideally, businesses would never have to [[Rewrite (programming)|rewrite]] most core business logic; debits must equal credits&amp;nbsp;&amp;mdash; they always have, and they always will. New software may increase the risk of system failures and security breaches.

The IT industry is responding to these concerns. &quot;Legacy modernization&quot; and &quot;legacy transformation&quot; refer to the act of reusing and refactoring existing, core business logic by providing new user interfaces (typically Web interfaces), sometimes through the use of techniques such as [[screen scraping]] and service-enabled access (e.g., through [[Web services]]). These techniques allow organisations to understand their existing code assets (using discovery tools), provide new user and application interfaces to existing code, improve workflow, contain costs, minimize risk, and enjoy classic qualities of service (near 100% uptime, security, scalability, etc.).{{Citation needed|date=February 2007}}

The reexamination of attitudes toward legacy systems is also inviting more reflection on what makes legacy systems as durable as they are. Technologists are relearning the fact that sound [[Computer architecture|architecture]], practiced up front, helps businesses avoid costly and risky rewrites in the first place. The most common legacy systems tend to be those which embraced well-known IT architectural principles, with careful planning and strict methodology during implementation. Poorly designed systems often don't last, both because they wear out and because their reliability or usability are low enough that no one is inclined to make an effort to extend their term of service when replacement is an option. Thus, many organizations are rediscovering the value of both their legacy systems themselves and those systems' philosophical underpinnings.

==Euphemism==
Legacy system is also used as a euphemism for an old body of code, working or not.  The word &quot;legacy&quot; implies that the system is a thing of value, even if it provides more cost than benefit, and helps to justify not replacing or discarding it.

==See also==
* [[Data migration]]
* [[Legacy code]]
* [[Legacy encoding]]
* [[Legacy port]]
* [[Software archaeology]]
* [[Software brittleness]]
* [[Stovepipe system]]
* [[Application retirement]]

== References ==
{{reflist}}

== Further reading ==
* [http://www.controldesign.com/articles/2011/LegacyHardware1101.html &quot;Tips and Tricks for Legacy Hardware&quot;] by Danny Budzinski, ''Control Design Magazine'', January 2011
* [http://www.cio.com/archive/050105/comair.html &quot;Failure of a relatively new crew scheduling system during Christmas&quot;] by Stephanie Overby, ''CIO Magazine'', May 1, 2005
* [http://www.the-adam.com/adam/rantrave/computers.htm] &quot;THE FAILURE OF THE DIGITAL COMPUTER&quot; by Adam N. Rosenberg
* Bisbal, J., Lawless, D., Wu, B. &amp; Grimson, J. (1999). Legacy Information Systems: Issues and Directions. ''IEEE Software, 16'', 103-111.
* {{cite news|url=http://esj.com/articles/2005/10/11/legacy-systems-why-history-matters.aspx|work=Enterprise Systems Journal|title=Legacy Systems: Why History Matters|author=Jim McGee|date=2005-11-10}}

* [http://www.mousesecurity.com/?p=220 &quot;The Danger of Legacy Systems&quot;] by Steve R. Smith, May 3, 2011

{{FOLDOC}}

{{DEFAULTSORT:Legacy System}}
[[Category:Legacy systems|*Legacy system]]
[[Category:Legacy hardware]]

[[de:Altsystem]]
[[es:Sistema heredado]]
[[fr:SystÃ¨me hÃ©ritÃ©]]
[[ko:ë ê±°ì ìì¤í]]
[[hr:Legacy (raÄunarstvo)]]
[[it:Sistema legacy]]
[[ja:ã¬ã¬ã·ã¼ã·ã¹ãã ]]
[[pt:Sistema legado]]
[[simple:Legacy]]</rev></revisions></page></pages></query></api>
