<?xml version="1.0"?><api><query><pages><page pageid="2692227" ns="0" title="Static library"><revisions><rev xml:space="preserve">{{unreferenced|date=October 2011}}
In [[computer science]], a '''static library''' or '''statically-linked library''' is a set of routines,  external functions and variables which are resolved in a caller at [[compile-time]] and copied into a target application by a [[compiler]], [[Linker (computing)|linker]], or binder, producing an [[object file]] and a stand-alone [[executable]]. This executable and the process of compiling it are both known as a [[static build]] of the program. Historically, libraries could only be ''static''.  Static libraries are either merged with other static libraries and [[object file]]s during building/linking to form a single [[executable]], or they may be loaded at [[run time (program lifecycle phase)|run-time]] into the [[address space]] of the loaded executable at a [[Static memory allocation|static memory offset]] determined at compile-time/link-time.

==Advantages of static linking==
There are several advantages to statically linking libraries with an executable instead of [[Dynamic linking|dynamically linking]] them. The most significant is that the application can be certain that all its libraries are present and that they are the correct version. This avoids dependency problems. In some cases, static linking can result in a performance improvement. Static linking can also allow the application to be contained in a single executable file, simplifying distribution and installation.

With static linking, it is enough to include those parts of the library that are directly and indirectly referenced by the target executable (or target library). With dynamic libraries, the entire library is loaded, as it is not known in advance which functions will be invoked by applications. Whether this advantage is significant in practice depends on the structure of the library.

==File size==
In static linking, the size of the executable becomes greater than in dynamic linking, as the library code is stored ''within the executable'' rather than in separate files. If you include the size of the library files in the application then the total size will be similar. On [[Microsoft Windows]] it is common to include the library files an application needs with the application. On [[Unix-like]] systems this is less common as [[package management system]]s can be used to ensure the correct library files are available. This allows the library files to be shared between many applications leading to space savings. It also allows the library to be updated to fix bugs and security flaws without updating the applications that use the library. These advantages are not the sole consideration, and many executables (especially those targeting Microsoft Windows) use both static and dynamic libraries.

==Link/load==
It is important to note that any static library function can call a function or procedure in another static library. The linker/linking loader/loader handles this the same way as for any &quot;normal&quot; [[object file]].  Static library files may also be linked/loaded at [[run-time]] by a [[Linker (computing)|linker]] or [[linking loader]] (e.g., the [[X Window System|X11]] module loader). However, whether such a process can be called ''static linking'' is controversial.

==Creating static libraries in C/C++==
Static libraries can be easily created in [[C (programming language)|C]] or in [[C++]]. These two languages provide [[Storage classes in C|storage-class specifiers]] for indicating external or internal linkage, in addition to providing other features.

To create such a library, the exported functions/procedures and other objects variables must be specified for ''external linkage'' (i.e. not by using the C ''static'' keyword).

Static libraries usually have a &quot;.lib&quot; extension on Windows and a &quot;.a&quot; on [[UNIX]]

==See also==
*[[Dynamic link library]] (.DLL)
*[[External variable]]
*[[Library (computer science)]]
*[[Linker (computing)]]
*[[Loader (computing)]]
*[[Object file]]
*[[Prebinding]]
*[[Shared library]]

==External links==
*[http://publications.gbdirect.co.uk/c_book/chapter4/linkage.html The C Book - Linkage.]

[[Category:Computer libraries]]

{{compu-sci-stub}}

&lt;!-- Please respect alphabetical order --&gt;

[[ca:EnllaÃ§at estÃ tic]]
[[ja:éçãªã³ã¯]]
[[pl:Biblioteka statyczna]]
[[zh:éæé£çµå½å¼åº«]]</rev></revisions></page></pages></query></api>
