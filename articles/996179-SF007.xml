<?xml version="1.0"?><api><query><pages><page pageid="996179" ns="0" title="X86 virtualization"><revisions><rev xml:space="preserve">{{lowercase|x86 virtualization}}
{{Cleanup-rewrite|date=April 2010}}
In [[computing]], '''x86 virtualization''' is the facility that allows multiple [[operating system]]s to simultaneously share [[x86]] processor resources in a safe and efficient manner, a facility generically known as [[hardware virtualization]]. In the late 1990s x86 virtualization was achieved by complex software techniques which overcame the processor's lack of virtualization support and attained reasonable performance. In the mid 2000s, both [[Intel]] and [[AMD]] added hardware support to their processors making virtualization software simpler, and later hardware changes provided substantial speed improvements.

==Software-based virtualization==
''The following discussion focuses only on virtualization of [[protected mode]] of the x86 architecture.''

In protected mode the operating system runs at a higher privilege such as [[ring (computer security)|ring]] 0, and applications at a lower privilege such as ring 3. Similarly, a host OS must control the processor while the guest OS' are prevented from direct access to the hardware. One approach used in x86 software-based virtualization is called ''ring deprivileging'', which involves running the guest OS at a ring higher than 0.&lt;ref&gt;{{cite web|url=http://www.intel.com/technology/itj/2006/v10i3/1-hardware/3-software.htm |title=Intel Virtualization Technology: Hardware Support for Efficient Processor Virtualization |publisher=Intel.com |date=2006-08-10 |accessdate=2010-05-02}}&lt;/ref&gt; 

Three techniques made virtualization of protected mode possible:

* [[Binary translation]] is used to rewrite in terms of ring 3 instructions certain ring 0 instructions, such as POPF, that would otherwise fail silently or behave differently when executed above ring 0,&lt;ref&gt;{{cite web|url=http://www.usenix.org/events/sec2000/robin.html |title=USENIX Technical Program - Abstract - Security Symposium - 2000 |publisher=Usenix.org |date=2002-01-29 |accessdate=2010-05-02}}&lt;/ref&gt;&lt;ref name=asplos/&gt;{{rp|3}} making the classic [[Hardware-assisted virtualization|trap-and-emulate virtualization]] impossible.&lt;ref name=&quot;asplos&quot;&gt;{{cite web|title=A Comparison of Software and Hardware Techniques for x86 Virtualization|url=http://www.vmware.com/pdf/asplos235_adams.pdf|format=PDF|publisher=VMware|accessdate=8 September 2010}}&lt;/ref&gt;{{rp|1}}&lt;ref name=pat242&gt;{{US patent|6397242}}&lt;/ref&gt; To improve performance, the translated [[basic block]]s need to be cached in a coherent way that detects [[code patching]] (used in [[VxD]]s for instance), the reuse of pages by the guest OS, or even self-modifying code.&lt;ref&gt;{{US patent|6704925}}&lt;/ref&gt;
* A number of key data structures used by a processor need to be [[Shadow memory|shadowed]]. Because most operating systems use [[paged virtual memory]], and granting the guest OS direct access to the [[memory management unit|MMU]] would mean loss of control by the [[hypervisor|virtualization manager]], some of the work of the x86 MMU needs to be duplicated in software for the guest OS using a technique known as ''shadow page tables''.&lt;ref&gt;{{cite web|url=http://www.vmware.com/pdf/virtualization_considerations.pdf|title=Virtualization: architectural considerations and other evaluation criteria|format=PDF|publisher=VMware|accessdate=8 September 2010}}&lt;/ref&gt;{{rp|5}}&lt;ref name=asplos/&gt;{{rp|2}} This involves denying the guest OS any access to the actual page table entries by trapping access attempts and emulating them instead in software. The x86 architecture uses hidden state to store [[segment descriptors]] in the processor, so once the segment descriptors have been loaded into the processor, the memory from which they have been loaded may be overwritten and there is no way to get the descriptors back from the processor. ''Shadow descriptor tables'' must therefore be used to track changes made to the descriptor tables by the guest OS.&lt;ref name=pat242/&gt;
* I/O device emulation: Unsupported devices on the guest OS must be emulated by a [[Emulator|device emulator]] that runs in the host OS.&lt;ref name=pat847/&gt;

These techniques incur some performance overhead due to lack of MMU virtualization support, as compared to a VM running on a natively virtualizable architecture such as the IBM [[System/370]].&lt;ref name=asplos/&gt;{{rp|10}}&lt;ref name=tac9&gt;{{cite web|url=http://download3.vmware.com/vmworld/2006/tac9463.pdf |title=VMware and Hardware Assist Technology |format=PDF |publisher= |date= |accessdate=2010-09-08}}&lt;/ref&gt;{{rp|17 and 21}}

On traditional mainframes, the classic [[Hypervisor#Classification|type 1]] hypervisor was self-standing and did not depend on any operating system or run any user applications itself. In contrast, the first x86 virtualization products were aimed at workstation computers, and ran a guest OS inside a host OS by embedding the hypervisor in a kernel module that ran under the host OS (type 2 hypervisor).&lt;ref name=pat847&gt;{{US patent|6496847}}&lt;/ref&gt;

There has been some controversy whether the x86 architecture with no hardware assistance is virtualizable as described by [[Popek and Goldberg virtualization requirements|Popek and Goldberg]]. [[VMware]] researchers pointed out in a 2006 [[ASPLOS]] paper that the above techniques made the x86 platform virtualizable in the sense of meeting the three criteria of Popek and Goldberg, albeit not by the classic trap-and-emulate technique.&lt;ref name=asplos/&gt;{{rp|2-3}} However, as of 2009 some academics claimed that it is not.&lt;ref&gt;{{cite web|url=http://www.iaeng.org/publication/WCE2009/WCE2009_pp136-140.pdf|title=Implementation of a Purely Hardware-assisted VMM for x86 Architecture|format=PDF|accessdate=8 September 2010}}&lt;/ref&gt;

A different route was taken by other systems like [[Denali (operating system)|Denali]], [[L4 microkernel family|L4]], and [[Xen (virtual machine monitor)|Xen]], known as [[paravirtualization]], which involves [[ported|porting]] operating systems to run on the resulting virtual machine, which does not implement the parts of the actual x86 instruction set that are hard to virtualize. The paravirtualized I/O has significant performance benefits as demonstrated in the original [[SOSP]]'03 Xen paper.&lt;ref&gt;{{cite web|url=http://www.cl.cam.ac.uk/research/srg/netos/papers/2003-xensosp.pdf|title=Xen and the Art of Virtualization|format=PDF}}&lt;/ref&gt;

===64-bit===
To protect the memory of the hypervisor (ring 0) from a guest OS running at ring 1, segmentation must be used.&lt;ref&gt;[http://www.hotchips.org/archives/hc17/1_Sun/HC17.T1P2.pdf J. E. Smith, R. Uhlig (August 14, 2005) ''Virtual Machines: Architectures, Implementations and Applications'', HOTCHIPS 17, Tutorial 1, part 2]&lt;/ref&gt;{{rp|22}} The initial version of [[x86-64]] ([[AMD64]]) did not allow for a software-only full virtualization due to the lack of segmentation support in [[long mode]], which made the protection of the hypervisor's memory impossible, in particular, the protection of the trap handler that runs in the guest kernel address space.&lt;ref&gt;{{cite web|url=http://www.pagetable.com/?p=25 |title=How retiring segmentation in AMD64 long mode broke VMware  |publisher=Pagetable.com |date=2006-11-09 |accessdate=2010-05-02}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://download3.vmware.com/vmworld/2005/pac346.pdf |title=VMware and CPU Virtualization Technology |format=PDF |publisher=VMware |date= |accessdate=2010-09-08}}&lt;/ref&gt;{{rp|11 and 20}} Revision D and later 64-bit AMD processors (as a rule of thumb, those manufactured  in 90&amp;nbsp;nm or less) added basic support for segmentation in long mode, making it possible to run 64-bit guests in 64-bit hosts via binary translation. Intel did not add segmentation support to its x86-64 implementation ([[Intel 64]]), making 64-bit software-only virtualization impossible on Intel CPUs, but Intel VT-x support makes 64-bit hardware assisted virtualization possible on the Intel platform.&lt;ref&gt;{{cite web|url=http://kb.vmware.com/selfservice/microsites/search.do?language=en_US&amp;cmd=displayKC&amp;externalId=1003945 |title=VMware KB: Hardware and firmware requirements for 64bit guest operating systems |publisher=Kb.vmware.com |date= |accessdate=2010-05-02}}&lt;/ref&gt;&lt;ref&gt;{{cite web|url=http://www.vmware.com/files/pdf/software_hardware_tech_x86_virt.pdf |title=Software and Hardware Techniques for x86 Virtualization |format=PDF |date= |accessdate=2010-05-02}}&lt;/ref&gt;{{rp|4}}

On some platforms, it is possible to run a 64-bit guest on a 32-bit host OS if the underlying processor is 64-bit and supports the necessary virtualization extensions.&lt;ref&gt;[http://www.vmware.com/products/server/faqs.html VMware Server FAQs: What does 64-bit operating system support mean?], VMware Inc. retrieved on 2010-04-07&lt;/ref&gt;

=={{anchor|Hardware support}} Hardware assist==
In 2005 and 2006, [[Intel]] and [[AMD]] (working independently) created new [[x86#Extensions|processor extensions]] to the x86 architecture. The first generation of x86 hardware support for virtualization addressed the issue of privileged instructions, with support for MMU virtualization added to the Chipset later.

===Processor===
====AMD virtualization (AMD-V) {{anchor|AMD-V}} ====
[[Image:AMD Phenom die.png|thumb|thumb|[[AMD Phenom]] CPU die.]]

AMD developed its first generation virtualization extensions under the code name &quot;Pacifica&quot;, and initially published them as AMD Secure Virtual Machine (SVM),&lt;ref&gt;{{cite web|url=http://www.mimuw.edu.pl/~vincent/lecture6/sources/amd-pacifica-specification.pdf |title=33047_SecureVirtualMachineManual_3-0.book |format=PDF |date= |accessdate=2010-05-02}}&lt;/ref&gt; but later marketed them under the trademark ''AMD Virtualization'', abbreviated ''AMD-V''.

On May 23, 2006, AMD released the Athlon 64 ([[List of AMD Athlon 64 microprocessors#&quot;Orleans&quot; (F2 &amp; F3, 90 nm)|&quot;Orleans&quot;]]), the Athlon 64 X2 ([[List of AMD Athlon 64 microprocessors#&quot;Windsor&quot; (F2 &amp; F3, 90 nm)|&quot;Windsor&quot;]]) and the Athlon 64 FX ([[List of AMD Athlon 64 microprocessors#&quot;Windsor&quot; (F2, 90 nm)|&quot;Windsor&quot;]]) as the first AMD processors to support this technology. &lt;!--this was false, all AMD processors that support AMD-V always had it enabled, unlike Intel processors, this eliminates incompatible motherboards or segmenting of the market via different DRMd BIOSs but same chip--&gt;

AMD-V capability also features on the [[Athlon 64]] and [[Athlon 64 X2]] family of processors with revisions &quot;F&quot; or &quot;G&quot; on [[socket AM2]], [[Turion 64 X2]], and [[Opteron]] 2nd generation&lt;ref&gt;[http://www.amd.com/us-en/Processors/ProductInformation/0,,30_118_8796_8806~111165,00.html#111166 What are the main differences between Second-Generation AMD Opteron processors and first-generation AMD Opteron processors?]&lt;/ref&gt;
and 3rd-generation,&lt;ref&gt;[http://www.amd.com/us-en/Processors/ProductInformation/0,,30_118_8796_8806~119722,00.html#119726 What virtualization enhancements do Third-Generation AMD Opteron processors feature?]&lt;/ref&gt;
[[Phenom (processor)|Phenom]] and [[Phenom II]] processors.  The [[Accelerated Processing Unit|APU]] [[AMD Fusion|Fusion]] processors support AMD-V.  AMD-V is not supported by any Socket 939 processors. The only [[Sempron|Sempron processors]] which support it are [[List of AMD Sempron microprocessors#&quot;Huron&quot; (65 nm, Low power)|Huron]] and [[List of AMD Sempron microprocessors#&quot;Sargas&quot; (Socket AM3, Single-core, C2 &amp; C3, 45 nm)|Sargas]].

AMD Opteron CPUs beginning with the Family 0x10 Barcelona line, and Phenom II CPUs, support a second generation hardware virtualization technology called [[Rapid Virtualization Indexing]] (formerly known as Nested Page Tables during its development), later adopted by Intel as [[Extended Page Table]]s (EPT).

(The CPU flag for AMD-V is &quot;svm&quot;. This may be checked in [[Linux]] via &lt;code&gt;/proc/cpuinfo&lt;/code&gt;.)

====Intel virtualization (VT-x)====&lt;!--Re: [[VT-x]]--&gt;
{{Anchor|Intel-VT-x}}
&lt;!--
  IOMMU stuff (&quot;VT-d&quot;) belongs in [[IOMMU]] page or section
--&gt;
&lt;!-- &quot;Intel VT&quot; redirects here --&gt;
[[Image:Intel Core i7-940 bottom.jpg|thumb|240 px|right|[[Intel Core i7]] (Bloomfield) CPU]]
Previously codenamed &quot;Vanderpool&quot;, VT-x represents Intel's technology for virtualization on the x86 platform. 

On November 13, 2005, Intel released two models of Pentium 4 (Model 662 and 672) as the first Intel processors to support VT-x

{{As of | 2009 }} not all Intel processors supported VT-x, which Intel uses to [[market segment|segment its market]].&lt;ref&gt;{{cite web|last=Stokes |first=Jon |url=http://arstechnica.com/microsoft/news/2009/05/r2e-microsoft-intel-goof-up-windows-7s-xp-mode.ars |title=Microsoft, Intel goof up Windows 7's &quot;XP Mode&quot; |publisher=Arstechnica.com |date=2009-05-08 |accessdate=2010-05-02}}&lt;/ref&gt; Support for VT-x may even vary between different versions (as identified by Intel's ''sSpec Number'') of the same model number.&lt;ref&gt;{{cite web|url=http://processorfinder.intel.com/ |title=Processor Spec Finder |publisher=Processorfinder.intel.com |date= |accessdate=2010-05-02}}&lt;/ref&gt;
&lt;ref&gt;
{{cite web| last = | first = | authorlink =  | coauthors =  | title = Intel Processor Number Details | work = Intel | publisher = Intel | date = 2007-12-03 | url = http://www.intel.com/products/processor_number/chart/index.htm | doi =  | accessdate = 2008-10-03}}
&lt;/ref&gt;  For a complete and up-to-date list see the Intel website.&lt;ref&gt;{{cite web|url=http://ark.intel.com/VTList.aspx |title=Intel Virtualization Technology List |publisher=Ark.intel.com |date= |accessdate=2010-05-02}}&lt;/ref&gt;  
Even in May, 2011, the Intel CPU P6100 which is in laptops does not support hardware virtualization [http://ark.intel.com/Product.aspx?id=50175].

With some [[motherboards]], Intel's VT-x feature must be enabled in the [[BIOS]] before applications can make use of it.&lt;ref&gt;{{cite web|url=http://www.microsoft.com/windows/virtual-pc/support/configure-bios.aspx |title=Windows Virtual PC: Configure BIOS |publisher=Microsoft |date= |accessdate=2010-09-08}}&lt;/ref&gt;

Intel started to include [[Extended Page Table]]s (EPT),&lt;ref&gt;
{{cite journal | last = Neiger | first = Gil | authorlink =  | coauthors = A. Santoni, F. Leung, D. Rodgers, R. Uhlig | title = Intel Virtualization Technology: Hardware Support for Efficient Processor Virtualization | journal = Intel Technology Journal | volume = 10 | issue = 3 | pages = 167â178 | publisher = Intel | location =  | date =  | url = http://download.intel.com/technology/itj/2006/v10i3/v10-i3-art01.pdf | doi = 10.1535/itj.1003.01 | id = | accessdate = 2008-07-06}}
&lt;/ref&gt;
a technology for page-table virtualization,&lt;ref&gt;
{{cite web| last = Gillespie | first = Matt | authorlink =  | coauthors =  | title = Best Practices for Paravirtualization Enhancements from Intel Virtualization Technology: EPT and VT-d | work = Intel Software Network | publisher = Intel | date = 2007-11-12 | url = http://software.intel.com/en-us/articles/best-practices-for-paravirtualization-enhancements-from-intel-virtualization-technology-ept-and-vt-d | doi =  | accessdate = 2008-07-06}}
&lt;/ref&gt;
since the [[Nehalem (microarchitecture)|Nehalem]] architecture.&lt;ref&gt;
{{cite press release | title = First the Tick, Now the Tock: Next Generation Intel Microarchitecture (Nehalem) | publisher = Intel | date =  | format = PDF | language =  | url = http://www.intel.com/pressroom/archive/reference/whitepaper_Nehalem.pdf | accessdate = 2008-07-06}}&lt;/ref&gt;&lt;ref&gt;
{{cite web| title = Technology Brief: Intel Microarchitecture Nehalem Virtualization Technology | publisher = Intel | date = 2009-03-25 | format = PDF | language =  | url = http://download.intel.com/business/resources/briefs/xeon5500/xeon_5500_virtualization.pdf | accessdate = 2009-11-03}}
&lt;/ref&gt;

(The CPU flag for VT-x is &quot;vmx&quot;. This may be checked in [[Linux]] via &lt;code&gt;/proc/cpuinfo&lt;/code&gt;.)

====Software using AMD-V and/or Intel VT====
{{main|Comparison of platform virtual machines}}

===Chipset===
Memory and I/O virtualization is performed by the [[chipset]].&lt;ref&gt;[http://www.intel.com/technology/itj/2006/v10i3/2-io/5-platform-hardware-support.htm Intel platform hardware support for I/O virtualization]&lt;/ref&gt; Typically these features must be enabled by the BIOS, which must be able to support them and also be set to use them.

====I/O MMU virtualization (AMD-Vi and VT-d)====
{{Main|IOMMU}}
An input/output memory management unit (IOMMU) enables guest [[virtual machine]]s to directly use [[peripheral]] devices, such as Ethernet, accelerated graphics cards, and hard-drive controllers, through [[direct memory access|DMA]] and [[interrupt]] remapping. This is sometimes called ''PCI passthrough''.&lt;ref&gt;{{cite web|title=Linux virtualization and PCI passthrough|url=http://www.ibm.com/developerworks/linux/library/l-pci-passthrough/|publisher=IBM|accessdate=10 November 2010}}&lt;/ref&gt;  
Both AMD and Intel have released specifications:
* AMD's I/O Virtualization Technology, &quot;AMD-Vi&quot;, originally called &quot;IOMMU&quot;.&lt;ref&gt;{{cite web |title=AMD I/O Virtualization Technology (IOMMU) Specification Revision 1.26 |url=http://support.amd.com/us/Processor_TechDocs/34434-IOMMU-Rev_1.26_2-11-09.pdf |accessdate=2011-05-24}}&lt;/ref&gt;
* Intel's &quot;Virtualization Technology for Directed I/O&quot; (VT-d).&lt;ref&gt;[http://download.intel.com/technology/computing/vptech/Intel(r)_VT_for_Direct_IO.pdf Intel Virtualization Technology for Directed I/O (VT-d) Architecture Specification]&lt;/ref&gt;

====Network virtualization (VT-c)====
*Intel's &quot;Virtualization Technology for Connectivity&quot; (VT-c).&lt;ref&gt;[http://www.intel.com/network/connectivity/solutions/virtualization.htm?iid=tech_vt_tech+vtc Intel Virtualization Technology for Connectivity (VT-c)]&lt;/ref&gt;

====PCI-SIG I/O Virtualization (IOV)====
PCI-SIG I/O Virtualization (IOV) are a set of general (non-x86 specific) PCI Express (PCI-E) based native hardware I/O virtualization methods standardized by PCI-SIG:&lt;ref&gt;[http://www.pcisig.com/specifications/iov/ats PCI-SIG I/O Virtualization (IOV) Specifications]&lt;/ref&gt;
;Address Translation Services (ATS): this supports native IOV across PCI-E via address translation. It requires support for new transactions to configure such translations.
;[[Single Root IOV]] (SR-IOV): this supports native IOV in existing single root complex PCI-E topologies. It requires support for new device capabilities to configure multiple virtualized configuration spaces.
;Multi-Root IOV (MR-IOV): this supports native IOV in new topologies (e.g., blade servers) by building on SR-IOV to provide multiple root complexes which share a common PCI-E hierarchy.

In SR-IOV, the most common of these, a host VMM configures supported devices to create and allocate virtual &quot;shadows&quot; of their configuration spaces so that virtual machine guests can directly configure and access such &quot;shadow&quot; device resources.

==See also==
* [[Timeline of virtualization development]]
* [[Virtual machine]]
* [[Comparison of platform virtual machines]]
* [[Comparison of application virtual machines]]
* [[Hardware-assisted virtualization]]
* [[Network virtualization]]
* [[I/O virtualization]]
* [[Single Root IOV]]
* [[Operating system-level virtualization]]

==References==
{{Reflist|colwidth=30em}}

{{DEFAULTSORT:X86 Virtualization}}
[[Category:Virtual machines]]
[[Category:X86 architecture]]
[[Category:Hardware virtualization]]
[[Category:Virtualization software]]

[[de:Intel Virtualization Technology]]
[[de:Virtuelle Maschine]]
[[de:AMD-V]]
[[es:VirtualizaciÃ³n x86]]
[[fr:Machine virtuelle (informatique)]]
[[ko:X86 ê°ìí]]
[[it:Virtualizzazione X86]]
[[nl:virtuele machine]]
[[ja:X86ä»®æ³å]]
[[pl:Intel Virtualization Technology]]
[[pt:VirtualizaÃ§Ã£o x86]]</rev></revisions></page></pages></query></api>
