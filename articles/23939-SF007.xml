<?xml version="1.0"?><api><query><pages><page pageid="23939" ns="0" title="Perl"><revisions><rev xml:space="preserve">{{about|the programming language}}
{{good article}}
{{Infobox programming language
| name                   = Perl
| logo                   = [[File:Programming-republic-of-perl.png|100px]]
| paradigm               = [[multi-paradigm]]: [[Functional programming|functional]], [[Imperative programming|imperative]], [[Object-oriented programming|object-oriented]] ([[Class-based programming|class-based]]), [[Reflective programming|reflective]], [[Procedural programming|procedural]], [[Generic programming|generic]]

| year                   = 1987
| designer               = [[Larry Wall]]
| developer              = Larry Wall
| latest_release_version = 5.14.2&lt;ref&gt;{{cite web | url = http://www.perl.org/get.html | title = Download Perl | accessdate = 2011-09-30 | publisher = www.perl.org}}&lt;/ref&gt;
| latest_release_date    = {{release date|mf=yes|2011|09|26}}
| latest preview version = 5.15.3&lt;ref&gt;{{cite web | url = http://search.cpan.org/dist/perl/ | title = Download Perl | accessdate = 2011-09-30 | publisher = search.cpan.org}}&lt;/ref&gt;
| latest preview date    = {{release date|mf=yes|2011|07|21}}
| turing-complete        = Yes
| typing                 = Dynamic
| influenced_by          = [[AWK (programming language)|AWK]], [[Smalltalk 80]], [[Lisp (programming language)|Lisp]], [[C (programming language)|C]], [[C++]], [[sed]], [[Unix shell]], [[Pascal (programming language)|Pascal]]
| influenced             = [[Python (programming language)|Python]], [[PHP]], [[Ruby (programming language)|Ruby]], [[ECMAScript]], [[LPC (programming language)|LPC]], [[Windows PowerShell]],  [[JavaScript]], [[Falcon (programming language)|Falcon]], [[Perl 6]], [[Qore_Language|Qore]]
| programming_language   = [[C (programming language)|C]]
| operating_system       = [[Cross-platform]]
| license                = [[GNU General Public License]] or [[Artistic License]]&lt;ref name='licensing'&gt;{{cite web | url = http://dev.perl.org/licenses | title = Perl Licensing | accessdate = 2011-01-08 | publisher = dev.perl.org}}&lt;/ref&gt;
| website                = {{url|http://www.perl.org}}
| file_ext               = .pl .pm .t
| wikibooks              = Perl Programming
}}

&lt;!--

NOTES FOR EDITORS

* &quot;Perl&quot; is not an acronym (read the &quot;Name&quot; section below). Do not put that here.
* [[mod_perl]] is a correct link. Do not remove the underscore wherever you see it.
* Perl is described as the 'Swiss Army *chainsaw*', not the 'Swiss Army knife' of programming languages. Read the ref.

--&gt;
'''Perl''' is a [[high-level programming language|high-level]], [[General-purpose programming language|general-purpose]], [[Interpreter (computing)|interpreted]], [[dynamic programming language]]. Perl was originally developed by [[Larry Wall]] in 1987 as a general-purpose [[Unix]] scripting language to make report processing easier.&lt;ref name='sheppard00'&gt;{{cite web | url = http://www.perl.com/pub/2000/10/begperl1.html | title = Beginner's Introduction to Perl | accessdate = 2011-01-08 | last = Sheppard | first = Doug | date = 2000-10-16 | publisher = dev.perl.org}}&lt;/ref&gt; Since then, it has undergone many changes and revisions and become widely popular amongst programmers. Larry Wall continues to oversee development of the core language, and its upcoming version, [[Perl 6]]. Perl borrows features from other programming languages including [[C (programming language)|C]], [[shell script]]ing ([[Bourne shell|sh]]), [[AWK (programming language)|AWK]], and [[sed]].&lt;ref name=&quot;perltimeline&quot;&gt;{{cite web | url=http://history.perl.org/PerlTimeline.html | title=The Timeline of Perl and its Culture (v3.0_0505) | author=Ashton, Elaine | year=1999}}&lt;/ref&gt; The language provides powerful text processing facilities without the arbitrary data length limits of many contemporary Unix tools,&lt;ref name=&quot;programmingperl&quot;&gt;{{cite book | title=Programming Perl, Third Edition | author=[[Larry Wall|Wall, Larry]], Tom Christiansen and [[Jon Orwant]] | publisher=[[O'Reilly Media]] | month=July | year=2000 | isbn=0-596-00027-8}}&lt;/ref&gt; facilitating easy manipulation of [[text file]]s. Perl gained widespread popularity in the late 1990s as a [[Common Gateway Interface|CGI scripting]] language, in part due to its parsing abilities.&lt;ref name='roderick02'&gt;{{cite book | last1 = Smith | first1 = Roderick W. | title = Advanced Linux Networking | publisher = Addison-Wesley Professional | date = 21 Jun 2002 | year = 2002 | page = 594 | accessdate = 2011-01-08 | isbn = 978-0201774238}}&lt;/ref&gt;, but is now in sharp decline for this application, where it is increasingly being replaced by more user-friendly CGI languages such as [[PHP]], [[Ruby (programming language)|Ruby]] and [[Python (programming language)|Python]].&lt;ref name='stats0'&gt;{{cite web | url = http://w3techs.com/technologies/details/pl-perl/all/all | title = Usage statistics and market share of Perl for websites | accessdate = 2011-11-30}}&lt;/ref&gt; 

In addition to CGI, Perl is used for [[graphics programming]], [[System administrator|system administration]], [[computer network programming|network programming]], finance, [[bioinformatics]], and other applications. Perl is nicknamed &quot;the Swiss Army chainsaw &lt;!-- Note to editors. This should read *chainsaw*, not knife. Check the ref --&gt;of programming languages&quot; due to its flexibility and power.&lt;ref&gt;{{cite web|url=http://www.perl.com/pub/a/2000/10/begperl1.html |title=Beginner's Introduction to Perl |accessdate=2008-07-27 |last=Sheppard |first=Doug |date=2000-10-16 |publisher=[[O'Reilly Media]] }}&lt;/ref&gt;  It is also referred to as the &quot;duct tape that holds the Internet together&quot;, in reference to its ubiquity and perceived inelegance.&lt;ref name='leonard98'&gt;{{cite web | url = http://www.salon.com/21st/feature/1998/10/cov_13feature.html | title = The joy of Perl | accessdate = 2011-01-08 | last = Leonard | first = Andrew | publisher = [[Salon.com]]}}&lt;/ref&gt;

==History==
===Early versions===

[[Larry Wall]] began work on Perl in 1987, while working as a programmer at [[Unisys]],&lt;ref name='programmingperl'/&gt; and released version 1.0 to the comp.sources.misc [[newsgroup]] on December 18, 1987.&lt;ref&gt;{{cite web |url= http://groups.google.com/group/comp.sources.unix/tree/browse_frm/month/1988-02?_done=%2Fgroup%2Fcomp.sources.unix%2Fbrowse_frm%2Fmonth%2F1988-02%3F&amp; |title= comp.sources.unix |accessdate= 2011-01-13 |date= 1988-02-01 |work= Google Groups |publisher= [[Google]]}}&lt;/ref&gt; The language expanded rapidly over the next few years.

Perl 2, released in 1988, featured a better [[regular expression]] engine. Perl 3, released in 1989, added support for [[binary data]] streams.

Originally the only documentation for Perl was a single (increasingly lengthy) [[man page]]. In 1991, ''[[Programming Perl]]'',&lt;!-- 1st edition title used lowercase &quot;perl&quot; --&gt; known to many Perl programmers as the &quot;Camel Book&quot; because of its cover, was published and became the ''de facto'' reference for the language. At the same time, the Perl version number was bumped to 4, not to mark a major change in the language but to identify the version that was documented by the book.

===Early Perl 5===
Perl 4 went through a series of maintenance releases, culminating in Perl 4.036 in 1993. At that point, Wall abandoned Perl 4 to begin work on Perl 5.  Initial design of Perl 5 continued into 1994. The ''perl5-porters'' [[mailing list]] was established in May 1994 to coordinate work on porting Perl 5 to different platforms. It remains the primary forum for development, maintenance, and porting of Perl 5.&lt;ref&gt;{{cite web | url = http://www.nntp.perl.org/group/perl.perl5.porters/ | title = perl.perl5.porters archive | accessdate = 2011-01-13 | publisher = perl.org}}&lt;/ref&gt;

Perl 5.000 was released on October 17, 1994.&lt;ref&gt;{{cite web | url = http://perldoc.perl.org/perlhist.html | title = perlhist - the Perl history records | accessdate = 2011-01-21 | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt; It was a nearly complete rewrite of the [[interpreter (computing)|interpreter]], and it added many new features to the language, including objects, references, [[Local variable|lexical (my) variables]], and [[Module (programming)|modules]]. Importantly, modules provided a mechanism for extending the language without modifying the interpreter. This allowed the core interpreter to stabilize, even as it enabled ordinary Perl programmers to add new language features.  Perl 5 has been in active development since then.

Perl 5.001 was released on March 13, 1995.  Perl 5.002 was released on February 29, 1996 with the new prototypes feature.  This allowed module authors to make subroutines that behaved like Perl [[Shell builtin|builtins]].  Perl 5.003 was released June 25, 1996, as a security release.

One of the most important events in Perl 5 history took place outside of the language proper and was a consequence of its module support. On October 26, 1995, the [[Comprehensive Perl Archive Network]] (CPAN) was established as a [[Software repository|repository]] for [[Perl module]]s and Perl itself. As of January 2011, it carries over 19,000 modules by more than 8,000 authors.&lt;ref&gt;{{cite web | url = http://www.cpan.org/ | title = CPAN | accessdate = 2011-01-02 | publisher = [[CPAN]]}}&lt;/ref&gt;

Perl 5.004 was released on May 15, 1997, and included among other things the UNIVERSAL package, giving Perl a base object to which all classes were automatically derived and the ability to require versions of modules. Another significant development was the inclusion of the [[CGI.pm]] module,&lt;ref name='5004delta'&gt;{{cite web | url = http://perldoc.perl.org/perl5004delta.html | title = perl5004delta - what's new for perl5.004 | accessdate = 2011-01-08 | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt; which contributed to Perl's popularity as a CGI scripting language.&lt;ref name='patwardhan02'&gt;{{cite book | last1 = Patwardhan | first1 = Nathan | last2 = Siever | first2 = Ellen | last3 = Spainhour | first3 = Stephen | title = Perl in a Nutshell, Second Edition | publisher = O'Reilly Media | year = 2002 | accessdate = 2011-01-08 | isbn = 978-0-596-00241-1}}&lt;/ref&gt;

Perl also now supported running under Microsoft Windows and several other operating systems.&lt;ref name='5004delta'/&gt;

Perl 5.005 was released on July 22, 1998.  This release included several enhancements to the [[Regular expression|regex]] engine, new hooks into the backend through the &lt;code&gt;B::*&lt;/code&gt; modules, the &lt;code&gt;qr//&lt;/code&gt; regex quote operator, a large selection of other new core modules, and added support for several more operating systems, including [[BeOS]].&lt;ref name='5005delta'&gt;{{cite web | url = http://perldoc.perl.org/perl5005delta.html | title = perl5005delta - what's new for perl5.005 | accessdate = 2011-01-21 | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt;

===2000âpresent===

Perl 5.6 was released on March 22, 2000.  Major changes included 64-bit support, [[Unicode]] string representation, large file support (i.e. files over 2 GiB) and the &quot;our&quot; keyword.&lt;ref name='56delta'&gt;{{cite web | url = http://perldoc.perl.org/perl56delta.html | title = perl56delta - what's new for perl v5.6.0 | accessdate = 2011-01-21 | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt;&lt;ref name='561delta'&gt;{{cite web | url = http://perldoc.perl.org/perl561delta.html | title = perl56delta - what's new for perl v5.6.x | accessdate = 2011-01-21 | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt;  When developing Perl 5.6, the decision was made to switch the versioning scheme to one more similar to other open source projects; after 5.005_63, the next version became 5.5.640, with plans for development versions to have odd numbers and stable versions to have even numbers.

In 2000, Larry Wall put forth a call for suggestions for a new version of Perl from the community.  The process resulted in 361 RFC (request for comments) documents which were to be used in guiding development of Perl 6.  In 2001,&lt;ref&gt;{{cite web | url = http://dev.perl.org/perl6/doc/design/apo/A01.html | title = Apocalypse 1: The Ugly, the Bad, and the Good | accessdate = 2011-01-08 | last = Wall | first = Larry}}&lt;/ref&gt; work began on the apocalypses for [[Perl 6]], a series of documents meant to summarize the change requests and present the design of the next generation of Perl.  They were presented as a digest of the RFCs, rather than a formal document.  At this point, Perl 6 existed only as a description of a language.

Perl 5.8 was first released on July 18, 2002, and had nearly yearly updates since then.  The latest version of Perl 5.8 is 5.8.9, released December 14, 2008.  Perl 5.8 improved unicode support, added a new IO implementation, added a new thread implementation, improved numeric accuracy, and added several new modules.&lt;ref name='perl58delta'&gt;{{cite web | url = http://perldoc.perl.org/perl58delta.html | title = perl58delta - what is new for perl v5.8.0 | accessdate = 2011-01-21 | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt;

In 2004, work began on the Synopses â originally documents that summarized the Apocalypses, but which became the specification for the Perl 6 language.  In February 2005, [[Audrey Tang]] began work on [[Pugs]], a Perl 6 interpreter written in [[Haskell (programming language)|Haskell]].&lt;ref&gt;{{cite web |url=http://www.perl.com/pub/a/2005/03/03/pugs_interview.html |title=A Plan for Pugs|date=2005-03-03 |publisher=[[O'Reilly Media]] |accessdate=2011-01-27}}&lt;/ref&gt;  This was the first concerted effort towards making Perl 6 a reality.  This effort stalled in 2006.&lt;ref&gt;{{cite web | url = http://www.perlmonks.org/?node_id=835936 | title = Re: How to Implement Perl 6 in Ten Years | accessdate = 2011-01-03 | last = Tang | first = Audrey | date = 2010-04-21 | publisher = [[PerlMonks]]}}&lt;/ref&gt;

On December 18, 2007, the 20th anniversary of Perl 1.0, Perl 5.10.0 was released. Perl 5.10.0 included notable new features, which brought it closer to [[Perl 6]]. These included a [[switch statement]] (called &quot;given&quot;/&quot;when&quot;), regular expressions updates, and the smart match operator, &quot;~~&quot;.&lt;ref name='5100delta'&gt;{{cite web | url = http://perldoc.perl.org/perl5100delta.html | title = perl5100delta - what is new for perl 5.10.0 | accessdate = 2011-01-08 | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt;&lt;ref name='perlsyn-smart'&gt;{{cite web | url = http://perldoc.perl.org/perlsyn.html#Smart-matching-in-detail | title = perlsyn - Perl syntax | accessdate = 2011-01-21 | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt;
Around this same time, development began in earnest on another implementation of Perl 6 known as [[Rakudo Perl]], developed in tandem with the [[Parrot virtual machine]].  As of November 2009, Rakudo Perl has had regular monthly releases and now is the most complete implementation of [[Perl 6]].

A major change in the development process of Perl 5 occurred with Perl 5.11; the development community has switched to a monthly release cycle, with planned release dates three months ahead.

On April 12, 2010, Perl 5.12.0 was released. Notable core enhancements include new &lt;code&gt;package NAME VERSION&lt;/code&gt; syntax, the Yada Yada operator (intended to mark placeholder code that is not yet implemented), implicit strictures&lt;!-- &quot;strictures&quot; is not a typo --&gt;, full [[Y2038]] compliance, regex conversion overloading, [[DTrace]] support, and [[Unicode]] 5.2.&lt;ref name='5120delta'&gt;{{cite web | url = http://perldoc.perl.org/perl5120delta.html | title = perl5120delta - what is new for perl v5.12.0 | accessdate = 2011-01-08 | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt; On January 21, 2011, Perl 5.12.3 was released; it contains updated modules and some documentation changes.&lt;ref name='5123delta'&gt;{{cite web | url = http://perldoc.perl.org/perl5123delta.html | title = perldelta - what is new for perl v5.12.3 | accessdate = 2011-01-08 | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt; Version 5.12.4 was released on June 20, 2011.

On May 14, 2011, Perl 5.14 was released. On September 26, 2011, the latest version, 5.14.2, was released.

The latest development release of Perl 5 is 5.15.4, released by Jesse Vincent on October 20, 2011.

===Name===

Perl was originally named &quot;Pearl&quot;, after the [[Parable of the Pearl]] from the [[Gospel of Matthew]]. Larry Wall wanted to give the language a short name with positive connotations; he claims that he considered (and rejected) every three- and four-letter word in the dictionary. He also considered naming it after his wife Gloria. Wall discovered the existing [[PEARL (programming language)|PEARL]] programming language before Perl's official release and changed the spelling of the name.&lt;ref name=&quot;richardson1999&quot;&gt;{{cite web | url = http://www.linuxjournal.com/article/3394 | title = Larry Wall, the Guru of Perl | accessdate = 2011-01-03 | last = Richardson | first = Marjorie | date = 1999-05-01 | publisher = [[Linux Journal]]}}&lt;/ref&gt;

When referring to the language, the name is normally capitalized (''Perl'') as a proper noun. When referring to the interpreter program itself, the name is often uncapitalized (''perl'') because most Unix-like file systems are case-sensitive. Before the release of the first edition of ''Programming Perl'', it was common to refer to the language as ''perl''; [[Randal L. Schwartz]], however, capitalized the language's name in the book to make it stand out better when typeset. This case distinction was subsequently documented as canonical.&lt;ref name=&quot;capitalization&quot;&gt;{{cite web | url=http://perldoc.perl.org/perlfaq1.html#What's-the-difference-between-%22perl%22-and-%22Perl%22%3f | title=perlfaq1: What's the difference between &quot;perl&quot; and &quot;Perl&quot;? | work=perldoc.perl.org - Perl 5 version 12.2 documentation }}&lt;/ref&gt;

There is some contention about the all-caps spelling &quot;PERL&quot;, which the documentation declares incorrect&lt;ref name=&quot;capitalization&quot;/&gt; and which some core community members consider a [[shibboleth|sign of outsiders]].&lt;ref&gt;{{cite web | last = Schwartz | first = Randal | authorlink = Randal L. Schwartz | title = PERL as shibboleth and the Perl community | url=http://www.perlmonks.org/index.pl?node_id=510594 | publisher = [[PerlMonks]] | accessdate = 2007-06-01 }}&lt;/ref&gt; The name is occasionally [[backronym]]ed as ''Practical Extraction and Report Language'', which appears at the top of the documentation&lt;ref name=&quot;richardson1999&quot;/&gt; and in some printed literature.&lt;ref&gt;Steve McConnell (2004) ''Code Complete,'' 2nd ed., Microsoft Press, p. 65.&lt;/ref&gt; Several backronyms have been suggested as equally canonical, including Wall's own humorous ''Pathologically Eclectic Rubbish Lister''.&lt;ref&gt;{{cite web | last = Wall | first = Larry | authorlink = Larry Wall | title = perl - The Perl language interpreter | work = Perl 5 version 12.2 documentation | url = http://perldoc.perl.org/perl.html#BUGS | accessdate = 2011-01-26 }}&lt;/ref&gt; Indeed, Wall claims that the name was intended to inspire many different expansions.&lt;ref&gt;{{cite web | last = Wall | first = Larry | authorlink = Larry Wall | title = Re^7: PERL as shibboleth and the Perl community | url =http://www.perlmonks.org/index.pl?node_id=511722 | publisher=[[PerlMonks]] | accessdate = 2011-01-02 }}&lt;/ref&gt;

===Camel symbol===
[[File:Perl-camel-small.png|right|alt=The Camel symbol used by O'Reilly Media]]
''Programming Perl'', published by [[O'Reilly Media]], features a picture of a [[camel]] on the cover and is commonly referred to as the &quot;Camel Book&quot;.&lt;ref name='schwartz01'&gt;{{cite book | last1 = Schwartz | first1 = Randal L | authorlink1 = Randal L. Schwartz | last2 = Phoenix | first2 = Tom | last3 = foy | first3 = brian | authorlink3 = Brian D Foy | title = Learning Perl, Third Edition | accessdate = 2011-01-08 | isbn = 978-0-596-00132-2}}&lt;/ref&gt; This image of a camel has become an unofficial symbol of Perl as well as a general [[Hacker (programmer subculture)|hacker]] emblem, appearing on T-shirts and other clothing items.

O'Reilly owns the image as a trademark but licenses it for non-commercial use, requiring only an acknowledgement and a link to www.perl.com. Licensing for commercial use is decided on a case by case basis.&lt;ref name='camel'&gt;{{cite web | url = http://onlamp.com/pub/a/oreilly/perl/usage/ | title = The Perl Camel Usage and Trademark Information | accessdate = 2011-01-09 | publisher = [[O'Reilly Media]]}}&lt;/ref&gt; O'Reilly also provides &quot;Programming Republic of Perl&quot; logos for non-commercial sites and &quot;Powered by Perl&quot; buttons for any site that uses Perl.&lt;ref name='camel'/&gt;

====Onion symbol====
[[File:Onion 64x64.png|right|alt=The onion logo used by The Perl Foundation]]
[[The Perl Foundation]] owns an alternative symbol, an onion, which it licenses to its subsidiaries, [[Perl Mongers]], [[PerlMonks]], Perl.org, and others.&lt;ref name='onion'&gt;{{cite web | url = http://www.perlfoundation.org/perl_trademark | title = Perl Trademark | accessdate = 2011-01-09 | publisher = [[The Perl Foundation]]}}&lt;/ref&gt; The symbol is a [[visual pun]] on [[pearl onion]].&lt;ref name='gillmore98'&gt;{{cite news | first = Dan | last = Gillmore | title = Republic Of Perl | date = 1998-10-25 | url = http://articles.chicagotribune.com/1998-10-25/news/9810250094_1_programmers-open-source-movement-programming-community | work = Chicago Tribune | accessdate = 2011-01-10}}&lt;/ref&gt;

==Overview==
{{Main|Perl language structure}}
Perl is a general-purpose programming language originally developed for text manipulation, but {{as of | 2010 | lc = on}} is used for a wide range of tasks including [[system administration]], [[web development]], [[Computer network programming|network programming]], games, [[bioinformatics]], and [[GUI]] development.

The language is intended to be practical (easy to use, efficient, complete) rather than beautiful (tiny, elegant, minimal).&lt;ref&gt;{{cite web | url = http://perldoc.perl.org/perlintro.html | title = perlintro -- a brief introduction and overview of Perl | accessdate = 2011-01-10 | last = Kirrily | first = Robert | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt; Its major features include support for multiple [[programming paradigm]]s ([[procedural programming language|procedural]], [[Object-oriented programming|object-oriented]], and [[functional programming|functional]] styles), [[reference counting]] [[memory management]] (without a cycle-detecting garbage collector), built-in support for text processing, and a large collection of third-party [[Module (programming)|modules]].

According to Larry Wall, Perl has two slogans. The first is &quot;[[There's more than one way to do it]]&quot;, commonly known as TMTOWTDI. The second slogan is &quot;Easy things should be easy and hard things should be possible&quot;.&lt;ref name='programmingperl'/&gt;

===Features===
The overall structure of Perl derives broadly from C. Perl is [[procedural programming|procedural]] in nature, with [[variable (programming)|variable]]s, [[expression (programming)|expressions]], [[assignment statement]]s, [[bracket|brace]]-delimited [[block (programming)|block]]s, [[control structure]]s, and [[subroutine]]s.

Perl also takes features from shell programming. All variables are marked with leading [[sigil (computer programming)|sigils]], which unambiguously identify the data type (for example, scalar, array, hash) of the variable in context. Importantly, sigils allow variables to be interpolated directly into strings. Perl has many built-in functions that provide tools often used in shell programming (although many of these tools are implemented by programs external to the shell) such as sorting, and calling on system facilities.

Perl takes [[List (computing)|lists]] from [[Lisp (programming language)|Lisp]], [[associative array|hashes]] (&quot;associative arrays&quot;) from [[AWK]], and [[regular expression]]s from [[sed]]. These simplify and facilitate many parsing, text-handling, and data-management tasks.

Perl 5 added features that support complex [[data structure]]s, [[first-class function]]s (that is, [[Closure (computer science)|closures]] as values), and an object-oriented programming model. These include [[reference (computer science)|references]], packages, class-based method dispatch, and [[Scope (programming)|lexically scoped variables]], along with [[compiler directive]]s (for example, the &lt;code&gt;strict&lt;/code&gt; pragma). A major additional feature introduced with Perl 5 was the ability to package code as reusable modules. Larry Wall later stated that &quot;The whole intent of Perl 5's module system was to encourage the growth of Perl culture rather than the Perl core.&quot;&lt;ref&gt;Usenet post, May 10, 1997, with ID 199705101952.MAA00756@wall.org
&lt;/ref&gt;

All versions of Perl do automatic data-typing and automatic memory-management. The interpreter knows the type and storage requirements of every data object in the program; it allocates and frees storage for them as necessary using [[reference counting]] (so it cannot deallocate circular data structures without manual intervention). Legal type-conversions â for example, conversions from number to string â are done automatically at run time; illegal type conversions are fatal errors.

===Design===
The design of Perl can be understood as a response to three broad trends in the computer industry: falling hardware costs, rising labor costs, and improvements in compiler technology. Many earlier computer languages, such as [[Fortran]] and C, aimed to make efficient use of expensive computer hardware. In contrast, Perl is designed to make efficient use of expensive computer-programmers.

Perl has many features that ease the task of the programmer at the expense of greater CPU and memory requirements. These include automatic memory management; [[dynamic typing]]; strings, lists, and hashes; regular expressions; introspection; and an &lt;code&gt;eval()&lt;/code&gt; function. Perl follows the theory of &quot;no built-in limits&quot;,&lt;ref name='schwartz01'/&gt; an idea similar to the [[Zero One Infinity]] rule.

Wall was trained as a linguist, and the design of Perl is very much informed by linguistic principles. Examples include [[Huffman coding]] (common constructions should be short), good end-weighting (the important information should come first), and a large collection of language primitives. Perl favors language constructs that are concise and natural for humans to write, even where they complicate the Perl interpreter.

Perl syntax reflects the idea that &quot;things that are different should look different.&quot;&lt;ref name='wall97'&gt;{{cite web | url = http://www.linuxjournal.com/article/2070 | title = Wherefore Art, Thou? |accessdate=2011-03-13 | last = Wall | first = Larry | date = 1997-03-01 | publisher = [[Linux Journal]]}}&lt;/ref&gt; For example, scalars, arrays, and hashes have different leading sigils. Array indices and hash keys use different kinds of braces. Strings and regular expressions have different standard delimiters. This approach can be contrasted with languages such as [[Lisp programming language|Lisp]], where the same [[S-expression]] construct and basic syntax are used for many different purposes.

Perl does not enforce any particular programming paradigm (procedural, object-oriented, functional, or others) or even require the programmer to choose among them.

There is a broad practical bent to both the Perl language and the community and culture that surround it. The preface to ''Programming Perl'' begins: &quot;Perl is a language for getting your job done.&quot;&lt;ref name='programmingperl'/&gt; One consequence of this is that Perl is not a tidy language. It includes many features, tolerates exceptions to its rules, and employs [[heuristics]] to resolve syntactical ambiguities. Because of the forgiving nature of the compiler, bugs can sometimes be hard to find. Perl's function documentation remarks on the variant behavior of built-in functions in list and scalar contexts that &quot;In general, they do what you want, unless you want consistency.&quot;&lt;ref name='perlfunc'&gt;{{cite web | url = http://perldoc.perl.org/perlfunc.html | title = perlfunc - Perl builtin functions | accessdate = 2011-01-10 | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt;

No written specification or standard for the Perl language exists for Perl versions through Perl 5, and there are no plans to create one for the current version of Perl. There has been only one implementation of the interpreter, and the language has evolved along with it. That interpreter, together with its functional tests, stands as a ''de facto'' specification of the language.  [[Perl 6]], however, started with a specification,&lt;ref&gt;{{cite web | url = http://www.perl6.org/specification | title = Perl 6 Specification | accessdate = 2011-01-27 | publisher = The Perl 6 Project}}&lt;/ref&gt; and several projects&lt;ref&gt;{{cite web | url = http://www.perl6.org/compilers/ | title = Perl 6 Compilers | accessdate = 2011-01-27 | publisher = The Perl 6 Project}}&lt;/ref&gt; aim to implement some or all of the specification.

===Applications===
Perl has many and varied applications, compounded by the availability of many standard and third-party modules.

Ever since the early days of the Web, programmers have used Perl to write [[Common Gateway Interface|CGI]] scripts. Perl is known as one of &quot;the three Ps&quot; (along with [[Python (programming language)|Python]] and [[PHP]]), the most popular dynamic languages for writing Web applications. It is also an integral component of the popular [[LAMP (software bundle)|LAMP]] [[solution stack]] for web development. Large projects written in Perl include [[cPanel]], [[Slash (weblog system)|Slash]], [[Bugzilla]], [[Request Tracker|RT]], [[TWiki]], and [[Movable Type]]. Many high-traffic websites use Perl extensively. Examples include [[Amazon.com]], [[bbc.co.uk]], [[Priceline.com]], [[Craigslist]],&lt;ref&gt;{{cite book | last1 = Gilmore | first1 = W. J. | title = Beginning PHP and MySQL: From Novice to Professional, Fourth Edition | publisher = Apress | page = 484 | accessdate = 2011-02-13 | isbn = 978-1430231141}}&lt;/ref&gt; [[Internet Movie Database|IMDb]],&lt;ref&gt;{{cite web | title = IMDb Helpdesk: What software/hardware are you using to run the site? | publisher=Internet Movie Database|url = http://www.imdb.com/help/search?domain=helpdesk_faq&amp;index=1&amp;file=techinfo | accessdate = 2011-02-12 }}&lt;/ref&gt; [[LiveJournal]], [[Slashdot]] and [[Ticketmaster]]. &lt;!-- THIS IS NOT A LIST OF EVERY WEBSITE USING PERL. It's a listing of 'high traffic websites'. Please consider traffic volume before adding your own web site to it. Refs for lesser known websites certainly needed. --&gt;

Perl is often used as a [[glue language]], tying together systems and interfaces that were not specifically designed to interoperate, and for &quot;data munging&quot;,&lt;ref&gt;{{cite web |url=http://books.perl.org/book/95 |title=Perl Books - Book: Data Munging with Perl |work=Perl.org |accessdate=December 30, 2010}}&lt;/ref&gt; that is, converting or processing large amounts of data for tasks such as creating reports. In fact, these strengths are intimately linked. The combination makes Perl a popular all-purpose language for [[system administrator]]s, particularly because short programs can be entered and run on a single command line.

With a degree of care, Perl code can be made portable across [[Microsoft Windows|Windows]] and Unix. Portable Perl code is often used by suppliers of software (both [[Commercial off-the-shelf|COTS]] and bespoke) to simplify packaging and maintenance of software build- and deployment-scripts.

Graphical user interfaces (GUIs) may be developed using Perl. For example, Perl/Tk is commonly used to enable user interaction with Perl scripts. Such interaction may be synchronous or asynchronous, using callbacks to update the GUI. For more information about the technologies involved, see [[Tk (computing)|Tk]], [[Tcl]] and [[WxPerl]].

Perl is also widely used in finance and in [[bioinformatics]], where it is valued for rapid application development and deployment and for its capability to handle large data-sets.

===Implementation===
Perl is implemented as a core interpreter, written in C, together with a large collection of modules, written in Perl and C. {{As of|2010|lc=on}}, the stable version (5.12.3) is 14.2&amp;nbsp;[[megabyte|MB]] when packaged in a [[Tar (file format)|tar file]] and [[gzip]] compressed.&lt;ref&gt;{{cite web | url = http://www.cpan.org/src | title = Perl Source Code | accessdate = 2011-01-27 | publisher = [[CPAN]]}}&lt;/ref&gt; The interpreter is 150,000 lines of C code and compiles to a 1&amp;nbsp;MB executable on typical machine architectures. Alternatively, the interpreter can be compiled to a link library and embedded in other programs. There are nearly 500 modules in the distribution, comprising 200,000 lines of Perl and an additional 350,000 lines of C code. (Much of the C code in the modules consists of character-encoding tables.)

The interpreter has an object-oriented architecture. All of the elements of the Perl languageâscalars, arrays, hashes, coderefs, filehandlesâare represented in the interpreter by [[struct (C programming language)|C structs]]. Operations on these structs are defined by a large collection of macros, typedefs, and functions; these constitute the Perl C API. The Perl API can be bewildering to the uninitiated, but its entry points follow a consistent naming-scheme, which provides guidance to those who use it.

The life of a Perl interpreter divides broadly into a compile phase and a run phase.&lt;ref&gt;A description of the Perl 5 interpreter can be found in ''Programming Perl'', 3rd Ed., chapter 18. See particularly page 467, which carefully distinguishes run phase and compile phase from run time and compile time.  Perl &quot;time&quot; and &quot;phase&quot; are often confused.&lt;/ref&gt;  In Perl, the '''phases''' are the major stages in the interpreter's life-cycle. Each interpreter goes through each phase only once, and the phases follow in a fixed sequence.

Most of what happens in Perl's compile phase is compilation, and most of what happens in Perl's run phase is execution, but there are significant exceptions. Perl makes important use of its capability to execute Perl code during the compile phase. Perl will also delay compilation into the run phase. The terms that indicate the kind of processing that is actually occurring at any moment are '''compile time''' and '''run time'''.  Perl is in compile time at most points during the compile phase, but compile time may also be entered during the run phase. The compile time for code in a string argument passed to the &lt;code&gt;[[eval]]&lt;/code&gt; built-in occurs during the run phase. Perl is often in run time during the compile phase and spends most of the run phase in run time.  Code in &lt;code&gt;BEGIN&lt;/code&gt; blocks executes at run time but in the compile phase.&lt;!-- NOTE TO EDITORS:  There is something missing in the preceding sentence -- for one thing, a comma before the conjunction.  The sentence might reasonably read 'Code in BEGIN blocks executes NOT at run time, but in the compile phase,' but is that what the author intended? --&gt;

At compile time, the interpreter parses Perl code into a [[Abstract syntax tree|syntax tree]]. At run time, it executes the program by [[Tree traversal|walking the tree]]. Text is parsed only once, and the syntax tree is subject to optimization before it is executed, so that execution is relatively efficient. Compile-time optimizations on the syntax tree include [[constant folding]] and context propagation, but [[peephole optimization]] is also performed.

Perl has a [[Turing-complete]] [[formal grammar|grammar]] because parsing can be affected by run-time code executed during the compile phase.&lt;ref&gt;{{cite web | last = Schwartz | first = Randal | authorlink = Randal L. Schwartz | title = On Parsing Perl | url =http://www.perlmonks.org/index.pl?node_id=44722 | accessdate = 2007-01-03 }}&lt;/ref&gt; Therefore, Perl cannot be parsed by a straight [[Lex programming tool|Lex]]/[[Yacc]] [[Lexical analysis|lexer]]/[[parser]] combination. Instead, the interpreter implements its own lexer, which coordinates with a modified [[GNU bison]] parser to resolve ambiguities in the language.

It is often said that &quot;Only perl can parse Perl&quot;,&lt;ref&gt;{{cite web | url = ftp://ftp.ora.com/pub/labs/tpj/tpj2.pdf | title = The Perl Journal #19/9.26 | accessdate = 2011-02-04 | publisher = [[O'Reilly Media]]}}&lt;/ref&gt; meaning that only the Perl interpreter (''&lt;code&gt;perl&lt;/code&gt;'') can parse the Perl language (''Perl''), but even this is not, in general, true. Because the Perl interpreter can simulate a Turing machine during its compile phase, it would need to decide the [[Halting Problem]] in order to complete parsing in every case. It's a long-standing result that the Halting Problem is undecidable, and therefore not even perl can always parse Perl. Perl makes the unusual choice of giving the user access to its full programming power in its own compile phase. The cost in terms of theoretical purity is high, but practical inconvenience seems to be rare.

Other programs that undertake to parse Perl, such as source-code analyzers and auto-indenters, have to contend not only with ambiguous syntactic constructs but also with the undecidability of Perl parsing in the general case. Adam Kennedy's PPI project focused on parsing Perl code as a document (retaining its integrity as a document), instead of parsing Perl as executable code (which not even Perl itself can always do). It was Kennedy who first conjectured that &quot;parsing Perl suffers from the '[[Halting problem|Halting Problem]]'&quot;,&lt;ref&gt;{{cite web | url=http://search.cpan.org/~adamk/PPI-1.215/lib/PPI.pm | title=PPIâParse, Analyze and Manipulate Perl (without perl) | author=Kennedy, Adam | year=2006 | publisher=[[CPAN]]}}&lt;/ref&gt; which was later proved.&lt;ref&gt;{{cite journal
  | authorlink = Jeffrey Kegler
  | title = Rice's Theorem
  | journal = The Perl Review
  | volume = 4
  | issue = 3
  | pages = 23â29
  | date = Summer 2008}} and {{cite journal
  | authorlink = Jeffrey Kegler
  | title = Perl is Undecidable
  | journal = The Perl Review
  | volume = 5
  | issue = 0
  | pages = 7â11
  | date = Fall 2008}}, available online at {{cite web | url=http://www.jeffreykegler.com/Home/perl-and-undecidability | title=Perl and Undecidability | author=Kegler, Jeffrey}}
&lt;/ref&gt;

Perl is distributed with some 120,000 functional tests. These run as part of the normal build process and extensively exercise the interpreter and its core modules. Perl developers rely on the functional tests to ensure that changes to the interpreter do not introduce bugs; additionally, Perl users who see that the interpreter passes its functional tests on their system can have a high degree of confidence that it is working properly.

Maintenance of the Perl interpreter has become increasingly difficult over the years. The code base has undergone continuous development since 1994. The code has been optimized for performance at the expense of simplicity, clarity, and strong internal interfaces. New features have been added, yet virtually complete backward compatibility with earlier versions is maintained. Major releases of Perl were coordinated by Perl pumpkings,&lt;ref&gt;http://www.perlfoundation.org/perl5/index.cgi?pumpking&lt;/ref&gt; which handled integrating patch submissions and bug fixes, but the language has since changed to a rotating, monthly release cycle.  Development discussion takes place via the perl5_porters mailing list.  As of Perl 5.11, development efforts have included refactoring certain core modules known as 'dual lifed' modules out of the Perl core&lt;ref name='5110delta'&gt;{{cite web | url = http://perldoc.perl.org/perl5110delta.html | title = perl5110delta - what is new for perl v5.11.0 | accessdate = 2011-01-08 | work = Perl 5 version 12.2 documentation | publisher = perldoc.perl.org}}&lt;/ref&gt; to help alleviate some of these problems.

===Availability===
&lt;!--Note to editors:
Perl is available on so many platforms that it doesn't make sense to keep a laundry list in this article.
Do not list a specific platform unless there are notable issues about running Perl on it.
--&gt;
Perl is [[dual licensed]] under both the [[Artistic License]] and the [[GNU General Public License]]. Distributions are available for most [[operating system]]s. It is particularly prevalent on [[Unix]] and [[Unix-like]] systems, but it has been ported to most modern (and many obsolete) platforms. With only six reported exceptions, Perl can be compiled from [[source code]] on all [[POSIX]]-compliant, or otherwise-Unix-compatible platforms.&lt;ref name=&quot;cpanports&quot;&gt;{{cite web | url=http://www.cpan.org/ports/ | title=Perl Ports (Binary Distributions) | publisher=CPAN.org | author=Hietaniemi, Jarkko | year=1998}}&lt;/ref&gt;

Because of unusual changes required for the [[Mac OS history|Mac OS Classic]] environment, a special port called MacPerl was shipped independently.&lt;ref name=&quot;macperl&quot;&gt;{{cite web | url=http://www.macperl.com/ | title=The MacPerl Pages | year=1997 | publisher=Prime Time Freeware}}&lt;/ref&gt;

The [[CPAN|Comprehensive Perl Archive Network]] carries a complete list of supported platforms with links to the distributions available on each.&lt;ref&gt;{{cite web | url = http://www.cpan.org/ports/ | title = Perl Ports (Binary Distributions) | accessdate = 2011-01-27 | publisher = [[CPAN]]}}&lt;/ref&gt; CPAN is also the source for publicly available Perl modules that are not part of the core Perl distribution.

====Windows====

Users of [[Microsoft Windows]] typically install one of the native binary distributions of Perl for Win32, most commonly [[Strawberry Perl]] or [[ActivePerl]]. Compiling Perl from [[source code]] under Windows is possible, but most installations lack the requisite C compiler and build tools. This also makes it difficult to install modules from the CPAN, particularly those that are partially written in C.

[[ActivePerl]] is a closed source distribution from [[ActiveState]] that has regular releases that track the core Perl releases.&lt;ref name='activestate'&gt;{{cite web | url = http://www.activestate.com/activeperl | title = ActivePerl is Perl for Windows, Mac, Linux, AIX, HP-UX &amp; Solaris | accessdate = 2011-01-09 | publisher = [[ActiveState|ActiveState Software]]}}&lt;/ref&gt; The distribution also includes the [[Perl package manager]] (PPM),&lt;ref name='activestateppm'&gt;{{cite web | url = http://docs.activestate.com/activeperl/5.12/faq/ActivePerl-faq2.html | title = Using PPM | accessdate = 2011-01-09 | publisher = [[ActiveState|ActiveState Software]]}}&lt;/ref&gt; a popular tool for installing, removing, upgrading, and managing the use of common Perl modules.

[[Strawberry Perl]] is an open source distribution for Windows.  It has had regular, quarterly releases since January 2008, including new modules as feedback and requests come in.  Strawberry Perl aims to be able to install modules like standard Perl distributions on other platforms, including compiling XS modules.

The [[Cygwin]] emulation layer is another way of running Perl under Windows. Cygwin provides a Unix-like environment on Windows, and both Perl and CPAN are available as standard pre-compiled packages in the Cygwin setup program. Because Cygwin also includes the [[GNU Compiler Collection|gcc]], compiling Perl from source is also possible.

==Database interfaces==
Perl is widely favored for database applications. Its text-handling facilities are useful for generating [[SQL]] queries; arrays, hashes, and automatic memory management make it easy to collect and process the returned data.

In early versions of Perl, database interfaces were created by relinking the interpreter with a client-side database library. This was sufficiently difficult that it was done for only a few of the most-important and most widely used databases, and it restricted the resulting &lt;code&gt;perl&lt;/code&gt; executable to using just one database interface at a time.

In Perl 5, database interfaces are implemented by [[Perl DBI]] modules. The DBI (Database Interface) module presents a single, database-independent interface to Perl applications, while the DBD (Database Driver) modules handle the details of accessing some 50 different databases; there are DBD drivers for most [[American National Standards Institute|ANSI]] [[SQL]] databases.

DBI provides caching for database handles and queries, which can greatly improve performance in long-lived execution environments such as [[mod perl|mod_perl]],&lt;ref&gt;{{cite web | last = Bekman | first = Stas | title = Efficient Work with Databases under mod_perl | url = http://perl.apache.org/docs/1.0/guide/performance.html#Efficient_Work_with_Databases_under_mod_perl | accessdate = 2007-09-01 }}&lt;/ref&gt; helping high-volume systems avert load spikes as in the [[Slashdot effect]].

In modern Perl applications, especially those written using [[Web application framework]]s such as [[Catalyst (software)|Catalyst]], the DBI module is often used indirectly via [[object-relational mapper]]s such as [[DBIx::Class]], [[Class::DBI]] or [[Rose::DB::Object]] which generate SQL queries and handle data transparently to the application author.

==Comparative performance==
The Computer Language Benchmarks Game, a project hosted by [[Alioth (Debian)|Alioth]], compares the performance of implementations of typical programming problems in several programming languages.&lt;ref&gt;{{cite web | url = http://alioth.debian.org/projects/shootout/ | title = Alioth: The Computer Language Benchmarks Game: Project Info | accessdate = 2011-01-13 | publisher = [[Alioth]]}}
&lt;/ref&gt; The submitted Perl implementations typically perform toward the high end of the memory-usage spectrum and give varied speed results. Perl's performance in the benchmarks game is typical for interpreted languages.&lt;ref&gt;{{cite web | url = http://shootout.alioth.debian.org/u32/benchmark.php?test=allã=all&amp;d=data&amp;v8=on&amp;lua=on&amp;python=on&amp;php=on&amp;perl=on&amp;yarv=on Boxplot Summary | title = Which programming languages are fastest? | accessdate = 2011-01-13 | work = Computer Language Benchmarks Game | publisher = [[Alioth]]}}&lt;/ref&gt;

Large Perl programs start more slowly than similar programs in compiled languages because perl has to compile the source every time it runs. In a talk at the [[YAPC|YAPC::Europe 2005]] conference and subsequent article &quot;A Timely Start&quot;, Jean-Louis Leroy found that his Perl programs took much longer to run than he expected because the perl interpreter spent much of the time finding modules because of his over-large include path.&lt;ref&gt;{{cite web | url=http://www.perl.com/pub/a/2005/12/21/a_timely_start.html | title=A Timely Start | author=Leroy, Jean-Louis | date=2005-12-01 | publisher=O'Reilly }}&lt;/ref&gt; Unlike Java, Python, and Ruby, Perl has only experimental support for pre-compiling.&lt;ref&gt;{{cite web | url=http://search.cpan.org/~nwclark/perl-5.8.8/ext/B/B/Bytecode.pm#KNOWN_BUGS | title=B::Bytecode Perl compiler's bytecode backend | author=Beattie, Malcolm and Enache Adrian | year=2003 | publisher=[[CPAN]] }}&lt;/ref&gt; Therefore Perl programs pay this overhead penalty on every execution. The run phase of typical programs is long enough that [[amortized]] startup time is not substantial, but benchmarks that measure very short execution times are likely to be skewed due to this overhead.

A number of tools have been introduced to improve this situation. The first such tool was Apache's [[mod perl|mod_perl]], which sought to address one of the most-common reasons that small Perl programs were invoked rapidly: [[Common Gateway Interface|CGI]] [[World Wide Web|Web]] development. [[ActiveState|ActivePerl]], via Microsoft [[ISAPI]], provides similar performance improvements.

Once Perl code is compiled, there is additional overhead during the execution phase that typically isn't present for programs written in compiled languages such as C or C++. Examples of such overhead include [[bytecode]] interpretation, reference-counting memory management, and dynamic type-checking.

===Optimizing===
Like any code, Perl programs can be [[Optimization (computer science)|tuned for performance]] using [[Benchmark (computing)|benchmarks]] and [[Performance analysis|profiles]] after a readable and correct implementation is finished. In part because of Perl's interpreted nature, writing more-efficient Perl will not always be enough to meet one's performance goals for a program.

In such situations, the most-critical routines of a Perl program can be written in other languages such as [[C (programming language)|C]] or [[Assembly language|Assembler]], which can be connected to Perl via simple Inline modules or the more-complex-but-flexible [[XS (Perl)|XS]] mechanism.&lt;ref&gt;{{cite web | url = http://search.cpan.org/~sisyphus/Inline-0.47/Inline.pod | title = Inline - search.cpan.org | accessdate = 2011-01-26 | last = Ingerson | first = Brian | publisher = [[CPAN]]}}&lt;/ref&gt; Nicholas Clark, a Perl core developer, discusses some Perl design trade-offs and solutions in a 2002 document called &quot;When perl is not quite fast enough&quot;.&lt;ref&gt;{{cite web | url = http://www.ccl4.org/~nick/P/Fast_Enough/ | title = When perl is not quite fast enough | accessdate = 2011-01-02 | last = Clark | first = Nicholas}}&lt;/ref&gt;

==Future==
{{Main|Perl 6}}
[[Image:Camelia.svg|thumb|right|200px|''Camelia'', the logo for the Perl 6 project.&lt;ref&gt;{{cite web | url = http://perl6.org/ | title = Perl 6 | accessdate = 2011-02-27 | publisher = The Perl 6 Project}}&lt;/ref&gt;]]
At the 2000 [[O'Reilly Open Source Convention|Perl Conference]], [[Jon Orwant]] made a case for a major new language initiative.&lt;ref&gt;{{cite web | url = http://www.nntp.perl.org/group/perl.perl6.meta/2000/10/msg424.html | title = Transcription of Larry's talk | accessdate = 2011-01-25 | last = Torkington | first = Nathan | publisher = nntp.perl.org}}&lt;/ref&gt; This led to a decision to begin work on a redesign of the language, to be called Perl 6. Proposals for new language features were solicited from the Perl community at large, and more than 300 [[Request for Comments|RFCs]] were submitted.

[[Larry Wall]] spent the next few years digesting the RFCs and synthesizing them into a coherent framework for Perl 6. He has presented his design for Perl 6 in a series of documents called &quot;apocalypses&quot;, which are numbered to correspond to chapters in ''Programming Perl''. {{as of|2011|January}}, the developing specification of Perl 6 is encapsulated in design documents called Synopses, which are numbered to correspond to Apocalypses.&lt;ref name='syn6'&gt;{{cite web | url = http://perlcabal.org/syn/ | title = Official Perl 6 Documentation | accessdate = 2011-01-25 | publisher = The Perl 6 Project}}&lt;/ref&gt;

Perl 6 is not intended to be backward compatible, although there will be a compatibility mode. Perl 6 and Perl 5 are distinct languages with a common ancestry.&lt;ref name='perl6dev'&gt;{{cite web | url = http://dev.perl.org/perl6/ | title = Perl 6 - dev.perl.org | accessdate = 2011-01-25 | publisher = dev.perl.org}}&lt;/ref&gt;

Thesis work by [[Bradley M. Kuhn]], overseen by Larry Wall, considered the possible use of the [[Java virtual machine]] as a runtime for Perl.&lt;ref&gt;{{cite journal
  | last = Kuhn
  | first = Bradley
  | authorlink = Bradley M. Kuhn
  | title = Considerations on Porting Perl to the Java Virtual Machine
  | publisher = University of Cincinnati
  | date = January 2001
  | url = http://www.ebb.org/bkuhn/writings/technical/thesis/
  | accessdate = 2008-06-28}}&lt;/ref&gt;  Kuhn's thesis showed this approach to be problematic. In 2001, it was decided that Perl 6 would run on a cross-language [[virtual machine]] called [[Parrot virtual machine|Parrot]]. This will mean that other languages targeting the Parrot will gain native access to [[CPAN]], allowing some level of cross-language development.

In 2005, [[Audrey Tang]] created the [[pugs]] project, an implementation of Perl 6 in [[Haskell (programming language)|Haskell]]. This was, and continues to act as, a test platform for the Perl 6 language (separate from the development of the actual implementation) allowing the language designers to explore. The pugs project spawned an active Perl/Haskell cross-language community centered around the [[freenode]] #perl6 IRC channel.

A number of features in the Perl 6 language now show similarities to Haskell. {{Citation needed|date=August 2011}}

As of early 2009, Perl 6 development is primarily centered around Rakudo Perl 6, an implementation running on top of the Parrot virtual machine. Another implementation, Mildew, is also under active development and does not use Parrot.

Development of Perl 5 is also continuing. Perl 5.12.0 was released in April 2010 with some new features influenced by the design of Perl 6.&lt;ref name='5120delta' /&gt;&lt;ref name='heise2010'&gt;{{cite web | url = http://www.h-online.com/open/news/item/Perl-5-12-0-released-Update-976919.html | title = Perl 5.12.0 released - Update | accessdate = 2011-01-08 | date = 2010-04-13 | publisher = Heise Media UK}}&lt;/ref&gt; New maintenance versions are scheduled to be released on a monthly basis, the latest in the 5.12-series, 5.12.4, was released on June 20, 2011. Perl 5.14.1 was released on June 17, 2011
==Perl community==
Perl's culture and community has developed alongside the language itself. [[Usenet]] was the first public venue in which Perl was introduced, but over the course of its evolution, Perl's community was shaped by the growth of broadening Internet-based services including the introduction of the World Wide Web. The community that surrounds Perl was, in fact, the topic of Larry Wall's first &quot;State of the Onion&quot; talk.&lt;ref&gt;{{cite web | url=http://www.wall.org/~larry/keynote/keynote.html | title=Perl Culture (AKA the first State of the Onion) | first=Larry | last=Wall | authorlink=Larry Wall | date=1997-08-20 }}&lt;/ref&gt;

===State of the Onion===
State of the Onion is the name for Larry Wallâs yearly [[keynote]]-style summaries on the progress of Perl and its community.  They are characterized by his hallmark humor, employing references to Perlâs culture, the wider hacker culture, Wallâs linguistic background, sometimes his family life, and occasionally even his [[Christian]] background.

Each talk is first given at various Perl conferences and is eventually also published online.

===Perl pastimes===
; JAPHs
: In email, Usenet, and message board postings, &quot;[[Just another Perl hacker]]&quot; (JAPH) programs are a common trend, originated by [[Randal L. Schwartz]], one of the earliest professional Perl trainers.&lt;ref&gt;
{{cite newsgroup | author = [[Randal L. Schwartz]] | title = Who is Just another Perl hacker? | id = http://groups.google.com/group/comp.lang.perl.misc/msg/ecc405feeefc120c?pli=1 | newsgroup = comp.lang.perl.misc | date = 1999-05-02 | url = http://groups.google.com/group/comp.lang.perl.misc/msg/ecc405feeefc120c?pli=1| accessdate = 2007-11-12 }}
&lt;/ref&gt; In the parlance of Perl culture, Perl programmers are known as Perl hackers, and from this derives the practice of writing short programs to print out the phrase &quot;[[Just another Perl hacker]],&quot;. In the spirit of the original concept, these programs are moderately obfuscated and short enough to fit into the signature of an email or Usenet message. The &quot;canonical&quot; JAPH as developed by Schwartz includes the comma at the end, although this is often omitted.&lt;ref&gt; {{cite web | url = http://www.perlmonks.org/bare/?node_id=443856 | title = Canonical JAPH | accessdate = 2011-05-16 | last = Schwartz | first = Randal | authorlink = Randal L. Schwartz | date = 2005-03-31 | publisher = [[PerlMonks]]}}&lt;/ref&gt;
; Perl golf
: Perl &quot;golf&quot; is the pastime of reducing the number of characters (key &quot;strokes&quot;) used in a Perl program to the bare minimum, much as how [[golf]] players seek to take as few shots as possible in a round. The phrase's first use &lt;ref name='perl-golf-coined'&gt;{{cite newsgroup | author = Greg Bacon | title = Re: Incrementing a value in a slice | id = 7imnti$mjh$1@info2.uah.edu | newsgroup = comp.lang.perl.misc | date = 1999-05-28 | url = http://groups.google.com/group/comp.lang.perl.misc/msg/7b97c434492c8d20 | accessdate = 2011-07-12}}&lt;/ref&gt; emphasized the difference between pedestrian code meant to teach a newcomer and terse hacks likely to amuse experienced Perl programmers, an example of the latter being [[JAPH]]s that were already used in signatures in Usenet postings and elsewhere. Similar stunts had been an unnamed pastime in the language [[APL (programming language)|APL]] in previous decades. The use of Perl to write a program that performed [[RSA (algorithm)|RSA]] encryption prompted a widespread and practical interest in this pastime.&lt;ref name='rsa'&gt;
{{cite web | url = http://www.cypherspace.org/rsa/pureperl.html | title = RSA in 5 lines of perl | accessdate = 2011-01-10 | last = Back | first = Adam}}&lt;/ref&gt; In subsequent years, the term &quot;[[code golf]]&quot; has been applied to the pastime in other languages.&lt;ref&gt;{{cite web | url=http://codegolf.com/ | title=Code Golf: What is Code Golf? | publisher=29degrees | year=2007 }}
&lt;/ref&gt; A [[Perl Golf Apocalypse]] was held at Perl Conference 4.0 in Monterey, California in July 2000.
; Obfuscation
: As with C, [[obfuscated code]] competitions were a well known pastime in the late 1990s. The [[Obfuscated Perl Contest]] was a competition held by [[The Perl Journal]] from 1996 to 2000 that made an arch virtue of Perl's syntactic flexibility. Awards were given for categories such as &quot;most powerful&quot;âprograms that made efficient use of spaceâand &quot;best four-line signature&quot; for programs that fit into four lines of 76 characters in the style of a Usenet [[signature block]].&lt;ref name='gallo03'&gt;
{{cite book | last1 = Gallo | first1 = Felix | title = Games, diversions, and Perl culture: best of the Perl journal | chapter = The Zeroth Obfuscated Perl Contest | editors = Jon Orwant | publisher = O'Reilly Media | year = 2003 | url = oreilly.com/catalog/tpj3/chapter/ch43.pdf | accessdate = 2011-01-12}}
&lt;/ref&gt;
; Poetry
: Perl poetry is the practice of writing poems that can be compiled as legal Perl code, for example the piece known as [[Black Perl]]. This hobby is made possible by the large number of English words that are used in the Perl. New poems are regularly submitted to the community at [[PerlMonks]].&lt;ref&gt;
{{cite web | url = http://www.perlmonks.org/?node_id=1590 | title = Perl Poetry | accessdate = 2011-01-27 | publisher = [[PerlMonks]]}}
&lt;/ref&gt;

===Perl on IRC===

There are a number of [[Internet Relay Chat|IRC]] channels that offer support for the language and some modules.

{| class=&quot;wikitable&quot;
|-
! IRC Network
! Channels
|-
| irc.freenode.net
| #perl #perl6 #cbstream #perlcafe #poe
|-
| irc.perl.org
| #moose #poe #catalyst #dbix-class #perl-help #distzilla #epo #corehackers #sdl #win32 #toolchain #padre
|-
| irc.slashnet.org
| #perlmonks
|-
| irc.oftc.net
| #perl
|-
| irc.efnet.net
| #perlhelp
|-
| irc.rizon.net
| #perl
|-
| irc.debian.org
| #debian-perl
|}

===CPAN Acme===
There are also many examples of code written purely for entertainment on the [[CPAN]]. &lt;code&gt;Lingua::Romana::Perligata&lt;/code&gt;, for example, allows writing programs in [[Latin]].&lt;ref&gt;{{cite web | url=http://www.csse.monash.edu.au/~damian/papers/HTML/Perligata.html | title=Lingua::Romana::Perligata -- Perl for the XXI-imum Century | author=Conway, Damian }}&lt;/ref&gt; Upon execution of such a program, the module translates its source code into regular Perl and runs it.

The Perl community has set aside the &quot;[[Acme Corporation|Acme]]&quot; namespace for modules that are fun in nature (but its scope has widened to include exploratory or experimental code or any other module that is not meant to ever be used in production). Some of the Acme modules are deliberately implemented in amusing ways. This includes &lt;code&gt;Acme::Bleach&lt;/code&gt;, one of the first modules in the &lt;code&gt;Acme::&lt;/code&gt; namespace,&lt;ref&gt;{{cite web | url=http://use.perl.org/~acme/journal/200 | title=use Perl; Journal of acme | date=2001-05-23 | author=Brocard, Leon | publisher=use Perl}}&lt;/ref&gt; which allows the program's source code to be &quot;whitened&quot; (i.e., all characters replaced with whitespace) and yet still work.

==See also==
{{Portal|Free software}}
* [[Perl language structure]]
* [[Perl Data Language]]
* [[Perl Object Environment]]
* [[Plain Old Documentation]]

==References==
{{Reflist|2}}

==Further reading==
* ''[[Perl Cookbook]]'', ISBN 0-596-00313-7
* [http://www.ddj.com/web-development/tpj.jhtml The Perl Journal] published 1996â2006 was the leading publication for and about Perl Programming during this time.
* {{cite book|last=Dominus|first=Mark Jason|title=Higher Order Perl|url=http://hop.perl.plover.com/book/|year=2005|publisher=Morgan Kaufmann|isbn=1-55860-701-3}}

==External links==
&lt;!-- Before adding any links, make sure you have read the External Links style guide, then stopped and reread it again. If you aren't absolutely sure the link is in compliance, ask on the talk page first --&gt;
{{Wikibooks|Perl Programming}}
{{Wikiversity|at=Topic:Perl}}
* {{Official website|http://www.perl.org}} Perl.org
* [http://www.cpan.org/ CPAN]
* [http://www.perlfoundation.org/ The Perl Foundation]
* {{dmoz|Computers/Programming/Languages/Perl|Perl}}
&lt;!-- Before adding any links, make sure you have read the External Links style guide, then stopped and reread it again. If you aren't absolutely sure the link is in compliance, ask on the talk page first --&gt;
{{Perl}}
{{FOSS}}

[[Category:Perl|*]]
[[Category:Dynamic programming languages]]
[[Category:Dynamically typed programming languages]]
[[Category:Free compilers and interpreters]]
[[Category:Free software programmed in C]]
[[Category:Procedural programming languages]]
[[Category:Object-oriented programming languages]]
[[Category:Scripting languages]]
[[Category:Text-oriented programming languages]]
[[Category:Unix programming tools]]
[[Category:Cross-platform software]]
[[Category:American inventions]]
[[Category:Programming languages created in 1987]]
[[Category:High-level programming languages]]

{{Link GA|de}}

[[als:Perl]]
[[ar:Ø¨ÙØ±Ù]]
[[bn:à¦ªà¦¾à¦°à§à¦² (à¦ªà§à¦°à§à¦à§à¦°à¦¾à¦®à¦¿à¦ à¦­à¦¾à¦·à¦¾)]]
[[zh-min-nan:Perl]]
[[bs:Perl]]
[[bg:ÐÑÑÐ» (ÐµÐ·Ð¸Ðº Ð·Ð° Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¸ÑÐ°Ð½Ðµ)]]
[[ca:Perl]]
[[cs:Perl]]
[[cy:Perl (cyfrifiadureg)]]
[[da:Perl]]
[[pdc:Perl]]
[[de:Perl (Programmiersprache)]]
[[et:Perl]]
[[el:Perl]]
[[es:Perl]]
[[eo:Perl]]
[[eu:Perl]]
[[fa:Ù¾Ø±Ù (Ø²Ø¨Ø§Ù Ø¨Ø±ÙØ§ÙÙâÙÙÛØ³Û)]]
[[fr:Perl (langage)]]
[[ga:Perl]]
[[gl:Perl]]
[[gu:àªªàª°à«àª²]]
[[ko:í]]
[[hi:à¤ªà¤°à¥à¤²]]
[[hr:Perl]]
[[id:Perl]]
[[it:Perl]]
[[he:Perl]]
[[ka:ááá áá]]
[[ku:Perl]]
[[la:Perl]]
[[lv:Perl]]
[[lb:Perl (ProgrammÃ©iersprooch)]]
[[lt:Perl]]
[[hu:Perl (programozÃ¡si nyelv)]]
[[mk:Perl]]
[[ml:à´ªàµà´³àµâ]]
[[mr:à¤ªà¤°à¥à¤² (à¤¸à¤à¤à¤£à¤à¤­à¤¾à¤·à¤¾)]]
[[ms:Perl]]
[[my:Perl]]
[[nl:Perl (programmeertaal)]]
[[ja:Perl]]
[[no:Perl]]
[[nn:Perl]]
[[pl:Perl]]
[[pt:Perl]]
[[ro:Perl]]
[[ru:Perl]]
[[sah:Perl]]
[[sq:Perl]]
[[simple:Perl]]
[[sk:Perl]]
[[sl:Perl]]
[[ckb:Ù¾ÛØ±Úµ (ÙÛØ¨ Ø¯Ø§ÚØ´ØªÙ)]]
[[sr:ÐÑÐ¾Ð³ÑÐ°Ð¼ÑÐºÐ¸ ÑÐµÐ·Ð¸Ðº ÐÐµÑÐ»]]
[[sh:Perl]]
[[fi:Perl]]
[[sv:Perl]]
[[ta:à®ªà¯à®°à¯à®³à¯]]
[[th:à¸ à¸²à¸©à¸²à¹à¸à¸´à¸£à¹à¸¥]]
[[tg:ÐÐµÑÐ» (Ð·Ð°Ð±Ð¾Ð½Ð¸ Ð±Ð°ÑÐ½Ð¾Ð¼Ð°ÑÐ¾Ð·Ó£)]]
[[tr:Perl]]
[[uk:Perl]]
[[ur:Perl]]
[[vi:Perl]]
[[bat-smg:Perl]]
[[zh:Perl]]</rev></revisions></page></pages></query></api>
