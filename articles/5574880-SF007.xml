<?xml version="1.0"?><api><query><pages><page pageid="5574880" ns="0" title="MINIX 3"><revisions><rev xml:space="preserve">{{ Infobox OS
| name                   = MINIX 3
| logo                   = &lt;!-- Image with inadequate rationale removed: [[Image:Minix3.png]] --&gt;
| screenshot             = [[Image:Minix 3.png|250px|Screenshot of MINIX 3]]
| caption                = Minix 3 running [[X11]] with [[TWM]] as Window Manager.
| developer              = [[Andrew S. Tanenbaum]]
| family                 = [[Unix-like]]
| source model           = [[Free and open source software]]
| frequently updated  = yes &lt;!-- Release version update? Don't edit this page, just click on the version number! --&gt;
| kernel type            = [[Microkernel]]
| ui                     = [[Almquist shell|ash]]
| supported platforms    = [[i386]] architecture
| license                = [[BSD License]]
| working state          = Current
| website                = {{url|http://www.minix3.org}}
}}

'''MINIX 3''' is a project to create a small, [[high availability|highly reliable]] and functional [[Unix-like]] [[operating system]]. It is published under the [[BSD license]].

The main goal of the project is for the system to be [[fault-tolerant]] by detecting and repairing its own faults on the fly, without user intervention. The main uses of the operating system are envisaged to be [[embedded systems]] as well as the education sector, such as universities or the [[XO-1 (laptop)|XO-1 laptop]].&lt;ref&gt;&quot;LWN.net.&quot; LWN: MINIX 3 hits the net. 28 Oct 2005. Eklektix, Inc.. 4 Jul 2006 [http://lwn.net/Articles/156828/].&lt;/ref&gt;

MINIX 3 currently supports [[IA-32]] architecture [[PC compatible]] systems.  It is also possible to run MINIX under [[emulator]]s or [[virtual machine]]s, such as [[Bochs]],&lt;ref&gt;Woodhull, Al. Getting Started with Minix on Bochs on Mac OS. 20 Feb 2003. 8 Jul 2006 [http://www.woodhull.com/newfaq/faq/bochstart.html].&lt;/ref&gt;&lt;ref&gt;Senn, Will. &quot;OSNews.com.&quot; Virtually Minix: A Tutorial &amp; Intro to Minix on XP via Bochs - OSNews.com. 08 Jul 2006. OSNews.com. 8 Jul 2006 [http://www.osnews.com/story.php?news_id=7303].&lt;/ref&gt; [[VMware Workstation]],&lt;ref&gt;Wagstrom, Patrick. Minix under VMWare Installation How-To. 8 Jul 2006 [http://patrick.wagstrom.net/projects/academic/cs551/minix.html].&lt;/ref&gt; [[Microsoft Virtual PC]],&lt;ref&gt;[http://www.woodhull.com/newfaq/faq/pre-vpc.html Woodhull, Al. Minix on Virtual PC: first look. 02 Jun 2005. 8 Jul 2006]&lt;/ref&gt; and [[QEMU]]. Ports to the [[PowerPC]]&lt;ref&gt;Alting, Ingmar A. MinixPPC: A port of MINIX 3 to the PowerPC platform, 15 Sep 2006. [http://www.minix3.org/doc/alting_thesis.pdf]&lt;/ref&gt; and [[ARM architecture|ARM]]s ([[Intel XScale]])&lt;ref name=&quot;homepage&quot;&gt;[http://www.minix3.org MINIX 3 Operating System official website]&lt;/ref&gt; are in development.

The distribution comes on a [[Live CD]] and also can be downloaded as a [[USB stick image]].&lt;ref&gt;[http://www.minix3.org/download/ Download&lt;!-- Bot generated title --&gt;]&lt;/ref&gt;

== Goals of the project ==
[[Image:OS-structure.svg|thumb|500px|Structure of [[monolithic]] and [[microkernel]]-based operating systems, respectively]]
Reflecting on the nature of [[monolithic kernel]] based systems, where a driver (which has, according to MINIX creator [[Andrew S. Tanenbaum|Tanenbaum]], approximately 3-7 times as many bugs as a usual program)&lt;ref&gt;{{cite web | last = Tanenbaum | first = Andy | authorlink = Andrew S. Tanenbaum | title =  Introduction to MINIX 3 | work = OSnew | publisher = OSnews | date = 2006-09-25 | url = http://osnews.com/story.php/15960/Introduction-to-MINIX-3 | accessdate = 2008-07-04 | quote = From '''Rebirth''' section: &quot;Various studies have shown that software broadly contains something like 6-16 bugs per 1000 lines of code and that device drivers have 3-7 times as many bugs as the rest of the operating system. When combined with the fact that 70% of a typical operating system consists of device drivers, it is clear that device drivers are a big source of trouble. For [[Windows XP]], 85% of the crashes are due to bugs in device drivers. Obviously, to make OSes reliable, something has to be done to deal with buggy device drivers. Building a reliable system despite the inevitable bugs in device drivers was the original driving force behind MINIX 3.&quot;}}&lt;/ref&gt; can bring down the whole system,&lt;ref&gt;Tanenbaum, Andrew. CSAIL Event Calendar. 25 Aug 2006 [http://www.csail.mit.edu/events/eventcalendar/calendar.php?show=event&amp;id=1128].&lt;/ref&gt; MINIX 3 aims to create an operating system that is a &quot;reliable, self-healing, multiserver UNIX clone&quot;.&lt;ref name = &quot;reliable-os&quot;&gt;Tanenbaum, Andrew. &quot;Tanenbaum-Torvalds debate, Part II:.&quot; 12 May 2006. Vrije Universiteit. 15 Jun 2006 [http://www.cs.vu.nl/~ast/reliable-os/].&lt;/ref&gt; 

In order to achieve that, the code running in kernel must be minimal, with the file server, process server, and each device driver running as separate user-mode processes. Each driver is carefully monitored by a part of the system known as the reincarnation server. If a driver fails to respond to pings from the reincarnation server, it is shut down and replaced by a fresh copy of the driver. 

In a monolithic system, a bug in a driver can easily crash the whole kernel, something that is much less likely to occur in MINIX 3.&lt;ref&gt;Tanenbaum, Andrew S.. &quot;Reliability.&quot; The MINIX 3 Operating System. Vrije Universiteit.. 22 Jun 2006 [http://www.MINIX3.org/reliability.html]&lt;/ref&gt;
{{-}}

== History ==
{| class=&quot;wikitable sortable&quot; style=&quot;float:right; width:350px; margin-left:25px; text-align: left; font-size:80%&quot;
|+ MINIX 3 versions &lt;ref&gt;[http://wiki.minix3.org/en/MinixReleases MINIX Releases]&lt;/ref&gt;
|-
! Version
! Release Date
! Description
|-
|style=&quot;white-space:nowrap; background:#FFA500;&quot; | 3.1.0
|2005-10-24
|
*The first release of MINIX 3 (Book Release).
|-
|style=&quot;white-space:nowrap; background:salmon;&quot; | 3.1.2a
|2006-05-29
|
*New Packman package manager. 
*Fixed an installation issue with auto-partitioning disks. 
|-
|style=&quot;white-space:nowrap; background:salmon;&quot; | 3.1.3
|2007-04-13
|
*Added new [[Virtual File System]]
|-
|style=&quot;white-space:nowrap; background:salmon;&quot; | 3.1.3a
|2007-06-08
|
*Bug fixes.
|-
|style=&quot;white-space:nowrap; background:salmon;&quot; | 3.1.4
|2009-06-09
|
*[[Virtual Memory]] support. 
*Improved [[Virtual Machine]] support (when MINIX runs as guest).
|-
|style=&quot;white-space:nowrap; background:salmon;&quot; | 3.1.5
|2009-11-05
|
*Improvements performance
*[[Shared memory]]
*setitimer function
*[[ISO 9660]] file system
*[[Open Sound System]]
*Trap NULL accesses now, for user convenience
*Improved signal handling
*Better support for debuggers ([[ptrace]] improvements, etc.)
*Network card autodetection (for supported [[PCI card]]s), improved network configuration 
|-
|style=&quot;white-space:nowrap; background:salmon;&quot; | 3.1.6
|2010-02-08
|
*New Network drivers: Atheros L2, Intel E1000, Realtek 8169, DEC Tulip
*PipeFS - removed pipe handling from filesystem drivers
*[[HGFS]] - support for mounting VMware shared folders as file system
*VFS: supplemental group support and sticky bit support
*[[Floating-point unit]] support
*[[System Event Framework]] (SEF) 
*Experimental [[Advanced Configuration and Power Interface|APIC]] support
|-
|style=&quot;white-space:nowrap; background:salmon;&quot; | 3.1.7
|2010-06-16
|
*Userspace scheduling and a scheduling server
*Proper support for multiple ethernet cards of the same type
*Boot monitor allows loading images &gt; 16 MB
*Buildsystem support for building MINIX with [[GCC]]
*Support for the [[cp1251]] and [[KOI8-U|koi8-u]] charsets
|-
|style=&quot;white-space:nowrap; background:#a0e75a;&quot; | 3.1.8
|2010-10-04
|
*New package management infrastructure: [[pkgsrc]] and [[pkgin]]
*[[Unix domain socket]] support 
*Multiboot support 
*[[ext2]] support 
*[[Advanced Configuration and Power Interface|ACPI]] driver
*full APIC mode including [[I/O]] [[Advanced Configuration and Power Interface|APIC]]s
*Experimental [[Advanced Host Controller Interface|AHCI]] support
|-
|style=&quot;white-space:nowrap; background:lightblue;&quot; | 3.2.0
|2010-10-04
|
*Porting [[GNU Debugger]] to MINIX 3 and implementing core dumping support
*[[Filesystem in Userspace|FUSE]] Support with experimental [[NTFS-3G]] file system
*Replace the old and obsolete MINIX [[User space|userland]] with [[NetBSD]] Userland
*Replace the default compiler [[Amsterdam Compiler Kit|ACK]] with [[GNU Compiler Collection|GCC]] and [[Clang]]
*Switch to [[Executable and Linkable Format|ELF]] and NetBSD [[libc]] libraries 
*Pkgsrc Upstreaming and Application Porting
|-
| colspan=&quot;3&quot; |
*{{legend|#FFA500|Book Release}}
*{{legend|salmon|Old release}}
*{{legend|#A0E75A|Current stable release}}
*{{legend|lightblue|Current development release}}
|}
MINIX 3 was publicly announced on 24 October 2005 by Andrew Tanenbaum during his keynote speech on top of the [[Association for Computing Machinery|ACM]] Symposium Operating Systems Principles conference. Although it still serves as an example for the new edition of Tanenbaum and Woodhull's textbook, it is comprehensively redesigned to be &quot;usable as a serious system on resource-limited and embedded computers and for applications requiring high reliability.&quot;

== Reliability in MINIX 3 ==
One of the main goals of MINIX 3 is reliability. Below, some of the more important principles that enhance MINIX 3's reliability are discussed.
===Reduce kernel size===
Monolithic operating systems such as [[Linux]] and [[FreeBSD]] and Hybrids like [[Microsoft Windows|Windows]] have millions of lines of [[Kernel (computer science)|kernel]] code. In contrast, MINIX 3 has about 6,000 lines of executable kernel code, which can make problems easier to find in the code.

===Cage the bugs===
In monolithic operating systems, [[device drivers]] reside in the kernel. This means that when a new peripheral is installed, unknown, untrusted code is inserted in the kernel. A single bad line of code in a driver can bring down the system. In MINIX 3, each device driver is a separate user-mode process. Drivers cannot execute privileged instructions, change the [[page table]]s, perform arbitrary [[I/O]], or write to absolute memory. They have to make kernel calls for these services and the kernel checks each call for authority.

===Limit drivers' memory access===
In monolithic operating systems, a driver can write to any word of memory and thus accidentally trash user programs. In MINIX 3, when a user expects data from, for example, the file system, it builds a descriptor telling who has access and at what addresses. It then passes an index to this descriptor to the file system, which may pass it to a driver. The file system or driver then asks the kernel to write via the descriptor, making it impossible for them to write to addresses outside the buffer.

===Survive bad pointers===
Dereferencing a bad pointer within a driver will crash the driver process, but will have no effect on the system as a whole. The reincarnation server will restart the crashed driver automatically. For some drivers (e.g., disk and network) recovery is transparent to user processes. For others (e.g., audio and printer), the user may notice. In monolithic systems, dereferencing a bad pointer in a (kernel) driver normally leads to a system crash.

===Tame infinite loops===
If a driver gets into an [[infinite loop]], the scheduler will gradually lower its priority until it becomes idle. Eventually the reincarnation server will see that it is not responding to status requests, so it will kill and restart the looping driver. In a monolithic system, a looping driver could hang the system.

===Limit damage from buffer overruns===
MINIX 3 uses fixed-length messages for internal communication, which eliminates certain [[buffer overruns]] and buffer management problems. Also, many exploits work by overrunning a buffer to trick the program into returning from a function call using an overwritten stacked return address pointing into the overrun buffer. In MINIX 3, this attack does not work because instruction and data space are split and only code in (read-only) instruction space can be executed.

===Restrict access to kernel functions===
Device drivers obtain kernel services (such as copying data to users' address spaces) by making kernel calls. The MINIX 3 kernel has a bit map for each driver specifying which calls it is authorized to make. In monolithic systems every driver can call every kernel function, authorized or not.

===Restrict access to I/O ports===
The kernel also maintains a table telling which [[I/O port]]s each driver may access. As a result, a driver can only touch its own I/O ports. In monolithic systems, a buggy driver can access I/O ports belonging to another device.

===Restrict communication with OS components===
Not every driver and server needs to communicate with every other driver and server. Accordingly, a per-process bit map determines which destinations each process may send to.

===Reincarnate dead or sick drivers===
A special process, called the reincarnation server, periodically pings each device driver. If the driver dies or fails to respond correctly to pings, the reincarnation server automatically replaces it with a fresh copy. The detection and replacement of non-functioning drivers is automatic, without any user action required. This feature does not work for disk drivers at present, but in the next release the system will be able to recover even disk drivers, which will be shadowed in [[Random access memory|RAM]]. &lt;!-- And what version would that be? Is this comment even still up-to-date? specifics would help... --&gt; Driver recovery does not affect running processes.

=== Integrate interrupts and messages ===
When an [[interrupt]] occurs, it is converted at a low level to a notification sent to the appropriate driver. If the driver is waiting for a message, it gets the interrupt immediately; otherwise it gets the notification the next time it does a RECEIVE to get a message. This scheme eliminates nested interrupts and makes driver programming easier.

== Architecture ==
[[Image:The MINIX 3 Microkernel Architecture.png|300px|thumb|The Architecture of MINIX 3]]

As can be seen, at the bottom level is the [[microkernel]], which is about
4,000 lines of code (mostly in [[C (programming language)|C]], plus a small amount of [[assembly language]]). It handles [[interrupts]], [[Scheduling (computing)|scheduling]], and message passing. In addition it supports an [[API]] of about 30 kernel calls that authorized servers and drivers can make. User programs cannot make these calls. Instead, they can issue [[POSIX]] [[system call]]s which send messages to the servers. The kernel calls perform functions such as setting interrupts and copying data between address spaces.

At the next level up, we find the [[device drivers]], each one running as a separate [[User space|user-mode]] process. Each one controls some I/O device, such as a disk or printer. The drivers do not have access to the I/O port space and cannot issue I/O instructions directly. Instead, they must make kernel calls giving a list of I/O ports to write to and the values to be written. While there is a small amount of overhead in doing this (typically 500 nsec), this scheme makes it possible for the kernel to check authorization, so that, for example, the audio driver cannot write on the disk.

At the next level we find the [[Server (computing)|servers]]. This is where nearly all the operating system functionality is located. User processes obtain file service, for example, by sending messages to the file server to open, close, read, and write files. In turn, the file server gets disk I/O performed by sending messages to the disk driver, which actually controls the disk.

One of the key servers is the reincarnation server. Its job is to poll all the other servers and drivers to check on their health periodically. If a component fails to respond correctly, or exits or gets into an [[infinite loop]], the reincarnation server (which is the parent process of the drivers and servers) kills the faulty component and replaces it with a fresh copy. In this way the system is automatically made [[self-healing]] without interfering with running programs. 

Currently the reincarnation server, the file server, the process server, and the microkernel are part of the trusted computing base.  If any of them fail, the system crashes. Nevertheless, reducing the trusted computing base from 3-5 million lines of code found in Linux and Windows systems to about 20,000 lines greatly enhances system reliability.

== Differences between MINIX 3 and prior versions ==
{{Main|MINIX}}
[[Image:Unix history-simple.svg|thumb|450px|Diagram of the relationships between several Unix-like systems]]
{{-}}
[[MINIX]] 1, 1.5, and 2 were developed as tools to help people learn about the design of operating systems.  

MINIX 1.0, released in 1987, was 12,000 lines of [[C (programming language)|C]] and some x86 [[assembly language]]. Source code of the kernel, [[memory manager]], and [[file system]] of MINIX 1.0 are printed in the book. Tanenbaum originally developed MINIX for compatibility with the [[IBM PC]] and [[IBM PC/AT]] [[microcomputers]] available at the time. 

MINIX 1.5, released in 1991, included support for [[MicroChannel]] [[IBM PS/2]] systems and was also ported to the [[Motorola 68000]] and [[SPARC]] architectures, supporting the [[Atari ST]], [[Commodore International|Commodore]] [[Amiga]], [[macintosh|Apple Macintosh]] and [[Sun Microsystems]] [[SPARCstation]] computer platforms. A version of MINIX running as a user process under [[SunOS]] was also available. 

MINIX 2.0, released in 1997, was only available for the [[x86]] and [[Solaris (operating system)|Solaris]]-hosted SPARC architectures. [[Minix-vmd]] was created by two [[Vrije Universiteit]] researchers, and added [[virtual memory]] and support for the [[X Window System]].

MINIX 3 does the same, and provides a modern operating system with many newer tools and many [[UNIX]] applications.&lt;ref name = &quot;faq&quot;&gt;Woodhull, Albert S.. &quot;MINIX 3: A small, reliable free operating system:&quot; MINIX 3 FAQ. 24 Oct 2005. Vrije Universiteit. 15 Jun 2006 [http://www.MINIX3.org/doc/faq.html].&lt;/ref&gt; Prof. Tanenbaum once said:

{{cquote|Please be aware that MINIX 3 is not your grandfather's MINIX ... MINIX 1 was written as an educational tool ... MINIX 3 is that plus a start at building a highly reliable, self-healing,  bloat-free operating system ... MINIX 1 and MINIX 3 are related in the same way as Windows 3.1 and Windows XP are: same first name.&lt;ref name = &quot;reliable-os&quot;/&gt;}} There have also been many improvements in the structure of the kernel since MINIX 2 was released, making the operating system more reliable.&lt;ref name=&quot;improvements&quot;&gt;Tanenbaum, Andrew. &quot;The MINIX 3 Operating System.&quot; Improvements since V2. 05 Jul 2006 [http://www.minix3.org/improvements.html].&lt;/ref&gt;

MINIX version 3.1.5 was released 5 Nov 2009. It contains [[X11]], [[Emacs]], [[vi]], cc, [[GNU Compiler Collection|GCC]], [[Perl]], [[Python (programming language)|Python]], [[Almquist shell]], [[Bash (Unix shell)|Bash]], [[Z shell]], [[File Transfer Protocol|FTP client]], [[Secure Shell|SSH client]], [[Telnet|Telnet client]], [[Pine (e-mail client)|Pine]], and over 400 other common [[UNIX]] utility programs. With the addition of X11, this version marks the transition away from a text-only system.  Another feature of this version, which will be improved in future ones, is the ability of the system to withstand device driver crashes, and in many cases having them automatically replaced without affecting running processes. In this way, MINIX is [[self-healing]] and can be used in applications demanding high reliability.

== Further reading ==
{{Refbegin}}
*{{cite book
 | last       = Tanenbaum
 | first      = Andrew S
 | authorlink =
 | coauthors  = Albert S. Woodhull
 | title      = '''Operating Systems: Design and Implementation'''
 | edition    = 3rd
 | isbn       = 0131429388
 | date       = 14 January 2006
 | publisher  = [[Prentice Hall]]
 | url        = http://www.pearsonhighered.com/educator/academic/product/0,,0131429388,00%2Ben-USS_01DBC.html
}}
*[http://www.minix3.org/theses/herder_phd_thesis.pdf Building a dependable operating system: fault tolerance in MINIX 3] by Jorrit N. Herder
*[http://www.cs.vu.nl/~ast/publications/acsac-2006.pdf Reorganizing UNIX for Reliability] by Jorrit N. Herder, Herbert Bos, Ben Gras, Philip Homburg, and Andrew S. Tanenbaum.
*[http://www.usenix.com/publications/login/2006-04/openpdfs/herder.pdf Modular system programming in MINIX 3] by Jorrit N. Herder, Herbert Bos, Ben Gras, Philip Homburg, and Andrew S Tanenbaum
*J.N. Herder et al., Modular System Programming in MINIX 3, ;Login, April 2006 [http://www.usenix.org/publications/login/2006-04/openpdfs/herder.pdf]
* Pablo A Pessolani. ''MINIX4RT: A Real-Time Operating System Based on MINIX'' [http://sites.google.com/site/minix4rt/Home]
*Building Performance Measurement Tools for the MINIX 3 Operating System, by Rogier Meurs [http://www.minix3.ru/docs/meurs_thesis.pdf]
*Design and implementation of the MINIX Virtual File system [http://www.minix3.ru/docs/gerofi_thesis.pdf]
*Reference manual for MINIX 3 Kernel API [http://www.minix3.ru/docs/kernel-api.pdf]
*Towards a true microkernel operating system [http://www.minix3.ru/docs/herder_thesis.pdf]
*Construction of a Highly Dependable Operating System [http://www.minix3.org/doc/EDCC-2006.pdf]
* [http://www.linux-magazine.com/w3/issue/99/Minix_3_Review.pdf Minix 3 and the microkernel experience: Smart Kernel] by RÃ¼diger Weis
{{Refend}}

== See also ==
{{Portal|Free software}}
{{Refbegin|2}}
*[[Comparison of operating system kernels]]
*[[Elle (Elle Looks Like Emacs)]]
*[[GNU Hurd]]
*[[MINIX]]
*[[MINIX file system]]
{{Refend}}

== References ==
&lt;!--See http://en.wikipedia.org/wiki/Wikipedia:Footnotes for an explanation of how to generate footnotes using the &lt;ref&gt; and &lt;/ref&gt; tags and the tag below --&gt;
{{Reflist|2}}

==External links==
{{Wikibooks|Minix 3}}
*[http://www.minix3.org Minix3 official homepage]:
** [http://wiki.minix3.org Wiki]
*{{youtube|bx3KuE7UjGA|MINIX 3: a Modular, Self-Healing POSIX-compatible Operating System}}
*[http://www.minix3.ru http://www.minix3.ru - official russian site]
*[http://groups.google.com/group/comp.os.minix comp.os.minix - official forum(since 1987)]
*[http://osnews.com/story.php/15960/Introduction-to-MINIX-3 A very good description of Minix 3] by [[Andy Tanenbaum]]
*[http://www.freesoftwaremagazine.com/articles/minix MINIX: what is it, and why is it still relevant?] An interview with Andy Tanenbaum
*[http://www.os-forum.com/minix/net/ Minix Network Service Documentation]
*[http://www.computer.org/portal/site/computer/menuitem.5d61c1d591162e4b0ef1bd108bcd45f3/index.jsp?&amp;pName=computer_level1_article&amp;TheCat=1005&amp;path=computer/homepage/0506&amp;file=cover1.xml&amp;xsl=article.xsl&amp; Can We Make Operating Systems Reliable and Secure?]
*[http://www.minixtips.com/ Minix Tips for running the Operating System Version]
*{{youtube|m_HAkXoPWhA|Minix3 installation}}
{{unix-like}}

&lt;!-- Interlang --&gt;

&lt;!-- Categories --&gt;
[[Category:Computing platforms]]
[[Category:Unix variants]]
[[Category:Free software operating systems]]
[[Category:Microkernels]]
[[Category:Operating system distributions bootable from read-only media]]
[[Category:Educational operating systems]]

[[mn:ÐÐÐÐÐÐ¡ 3]]
[[uk:Minix 3]]</rev></revisions></page></pages></query></api>
