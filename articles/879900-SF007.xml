<?xml version="1.0"?><api><query><pages><page pageid="879900" ns="0" title="Mandatory access control"><revisions><rev xml:space="preserve">{{Cleanup|date=January 2008}}
In [[computer security]], '''mandatory access control''' ('''MAC''') refers to a type of [[access control]] by which the [[operating system]] constrains the ability of a ''subject'' or ''initiator'' to access or generally perform some sort of operation on an ''object'' or ''target''.  In practice, a subject is usually a process or thread; objects are constructs such as files, directories, [[Transmission Control Protocol|TCP]]/[[User Datagram Protocol|UDP]] ports, shared memory segments, etc.  Subjects and objects each have a set of security attributes.  Whenever a subject attempts to access an object, an authorization rule enforced by the operating system [[kernel (computing)|kernel]] examines these security attributes and decides whether the access can take place.  Any operation by any subject on any object will be tested against the set of authorization rules (aka ''policy'') to determine if the operation is allowed. A [[database management system]], in its access control mechanism, can also apply mandatory access control; in this case, the objects are tables, views, procedures, etc.

With mandatory access control, this security policy is centrally controlled by a security policy administrator; users do not have the ability to override the policy and, for example, grant access to files that would otherwise be restricted.  By contrast, [[discretionary access control]] (DAC), which also governs the ability of subjects to access objects, allows users the ability to make policy decisions and/or assign security attributes.  (The traditional [[Unix]] system of users, groups, and read-write-execute permissions is an example of DAC.) MAC-enabled systems allow policy administrators to implement organization-wide security policies.  Unlike with DAC, users cannot override or modify this policy, either accidentally or intentionally.  This allows security administrators to define a central policy that is guaranteed (in principle) to be enforced for all users.

Historically and traditionally, MAC has been closely associated with [[multi-level secure]] ('''MLS''') systems.  The [[Trusted Computer System Evaluation Criteria]]&lt;ref&gt;
{{ cite book
 | title = Trusted Computer System Evaluation Criteria
 | publisher = United States Department of Defense
 | month = December | year = 1985
 | url = http://www.radium.ncsc.mil/tpep/library/rainbow/5200.28-STD.html
 | id = DoD Standard 5200.28-STD
}}&lt;/ref&gt;(TCSEC), the seminal work on the subject which is often referred to as the &quot;Orange Book&quot;, defines MAC as &quot;a means of restricting access to objects based on the sensitivity (as represented by a label) of the information contained in the objects and the formal authorization (''i.e.'', clearance) of subjects to access information of such sensitivity&quot;.  Early implementations of MAC such as [[Honeywell]]'s SCOMP, [[USAF]] SACDIN, [[NSA]] Blacker, and [[Boeing]]'s MLS LAN focused on MLS to protect military-oriented security classification levels with robust enforcement.  Originally, the term MAC denoted that the access controls were not only guaranteed in principle, but in fact.  Early security strategies&lt;ref&gt;{{ cite book
 | title = Building a Secure Computer System
 | publisher = Published by Van Nostrand Reinhold Co.
 | author = Gasser
 | year = 1988
 | url = http://books.google.com/?id=NdJQAAAAMAAJ&amp;q=Building+a+Secure+Computer+System+gasser&amp;dq=Building+a+Secure+Computer+System+gasser
 | id =
 | isbn = 9780442230227 
}}&lt;/ref&gt; enabled enforcement guarantees that were dependable in the face of national lab level attacks.

More recently, with the advent of implementations such as [[Security-Enhanced Linux|SELinux]] (incorporated into Linux kernels from 2.6) and [[Mandatory Integrity Control]] (incorporated into [[Windows Vista]] and newer), MAC has started to become more mainstream and is evolving out of the MLS niche.  These more recent MAC implementations have recognized that the narrow [[TCSEC]] definition, focused as it was on MLS, is too specific for general use.&lt;ref name=&quot;Ref_&quot;&gt;{{cite paper |url=http://csrc.nist.gov/nissc/1998/proceedings/paperF1.pdf |format=PDF |title=The Inevitability of Failure |publisher=National Security Agency |accessdate = 2008-03-15}}&lt;/ref&gt;   These implementations provide more depth and flexibility than earlier MLS-focused implementations,&lt;ref name=&quot;Loscocco&quot;&gt;{{cite paper | url = http://www.nsa.gov/selinux/papers/ottawa01.pdf | format=PDF| first = Peter A | last = Loscocco | coauthors = Smalley, Stephen D | title = Meeting Critical Security Objectives with Security-Enhanced Linux | accessdate = 2008-03-15 |archiveurl = http://web.archive.org/web/20080726150155/http://www.nsa.gov/selinux/papers/ottawa01.pdf &lt;!-- Bot retrieved archive --&gt; |archivedate = 2008-07-26}}&lt;/ref&gt; allowing (for example) administrators to focus on issues such as network attacks and malware without the rigor or constraints of MLS systems.

== Implications of the term ''mandatory'' ==

In the context of MLS, the term ''mandatory'' used with access controls has historically implied a very high degree of robustness that assures that the control mechanisms resist subversion, thereby enabling them to enforce an access control policy that is mandated by some regulation that must be absolutely enforced, such as the [[Executive Order 12958]] for US classified information.

For MAC, the access control decision is contingent on verifying the compatibility of the security properties of the data and the clearance properties of the individual (or the process proxying for the individual).  The decision depends on the integrity of the metadata (e.g. label) that defines the security properties of the data, as well as the security clearance of the individual or process requesting access.  For example, if a security label can be changed by a user, a surprisingly common vulnerability in some self-proclaimed 'MAC capable' systems, then that user can corrupt the access controls.  Security mechanisms that protect such metadata and the access control decision logic from corruption are MAC-critical objects and require appropriate robustness.

The term mandatory in MAC has acquired a special meaning derived from its use with military systems.  MAC means access controls that are mandated by order of a government and so enforcement is supposed to be more imperative than for commercial applications.  This precludes enforcement by best-effort mechanisms, only mechanisms that can provide absolute, or near-absolute enforcement of the mandate are acceptable for MAC.  This is a tall order and sometimes assumed unrealistic by those unfamiliar with high assurance strategies, and very difficult for those who are.

Vendors claiming to enforce MAC are sometimes making claims beyond their capability, and sometimes making claims beyond their understanding.  The claim that MAC is enforced implies a claim of very high robustness.  Vendors claiming MAC capability do usually have functions that enable defining of MAC privileges and rules but their implementations can be woefully unable to enforce them under even the mildest of attack.  Ordinary 'best practices' does not produce software that has this kind of assurance level; in fact, no successful software-only approach has ever been documented.  The only approach that has succeeded at protecting MAC controls from subversion has been to design the kernel to maintain a domain for its own execution using highly specialized hardware designed into the microprocessor architecture.{{Citation needed|date=October 2009}}  Besides its cost, this is often unpopular because it affects portability of the operating system.

== Degrees of MAC system strength ==
In some systems users have the authority to decide whether to grant access to any other user.  To allow that, all users have clearances for all data.  This is not necessarily true of a MAC system.  If individuals or processes exist that may be denied access to any of the data in the system environment, then the system must be trusted to enforce MAC.  Since there can be various levels of data classification and user clearances, this implies a quantified scale for robustness.  For example, more robustness is indicated for system environments containing classified [[Top Secret]] information and uncleared users than for one with Secret information and users cleared to at least Confidential.  To promote consistency and eliminate subjectivity in degrees of robustness, an extensive scientific analysis and risk assessment of the topic produced a landmark benchmark standardization quantifying security robustness capabilities of systems and mapping them to the degrees of trust warranted for various security environments.  The result was documented in CSC-STD-004-85.&lt;ref name=&quot;Ref_1985&quot;&gt;{{cite web | url = http://csrc.nist.gov/secpubs/rainbow/std004.txt | title = Technical Rational Behind CSC-STD-003-85: Computer Security Requirements | date = 1985-06-25 | accessdate = 2008-03-15}} {{Dead link|date=September 2010|bot=H3llBot}}&lt;/ref&gt; Two relatively independent components of robustness were defined: Assurance Level and Functionality.  Both were specified with a degree of precision that warranted significant confidence in certifications based on these criteria.

== Evaluation of MAC system strength ==
The [[Common Criteria]]&lt;ref name=&quot;Ref_a&quot;&gt;{{cite web | url = http://www.commoncriteriaportal.org/ | title = The Common Criteria Portal | accessdate = 2008-03-15}}&lt;/ref&gt; is based on this science and it intended to preserve the Assurance Level as [[Evaluation Assurance Level|EAL levels]] and the functionality specifications as [[Protection Profile]]s.  Of these two essential components of objective robustness benchmarks, only EAL levels were faithfully preserved.  In one case, [[TCSEC]] level C2&lt;ref name=&quot;Department1985&quot;&gt;{{cite web | url = http://www.fas.org/irp/nsa/rainbow/std001.htm | title = DoD 5200.28-STD: Trusted Computer System Evaluation Criteria | author = US Department of Defense | date = 1985-12 | accessdate = 2008-03-15}}&lt;/ref&gt; (not a MAC capable category) was fairly faithfully preserved in the Common Criteria, as the [[Controlled Access Protection Profile]] (CAPP).&lt;ref name=&quot;Ref_1999&quot;&gt;{{cite web | url = http://www.niap-ccevs.org/cc-scheme/pp/pp.cfm/id/PP_OS_CA_V1.d/ | title = Controlled Access Protection Profile, Version 1.d | date = 1999-10-08 | publisher = National Security Agency | accessdate = 2008-03-15}}&lt;/ref&gt;  [[Multilevel security]] (MLS) Protection Profiles (such as MLSOSPP similar to B2)&lt;ref name=&quot;Ref_2001&quot;&gt;{{cite web | title = Protection Profile for Multi-Level Operating Systems in Environments Requiring Medium Robustness, Version 1.22 | url = http://www.niap-ccevs.org/cc-scheme/pp/pp.cfm/id/pp_os_ml_mr_v1.22/ | publisher = National Security Agency | date = 2001-05-23 | accessdate = 2008-03-15}}&lt;/ref&gt; is more general than B2.  They are pursuant to MLS, but lack the detailed implementation requirements of their [[Trusted Computer System Evaluation Criteria|Orange Book]] predecessors, focusing more on objectives.  This gives certifiers more subjective flexibility in deciding whether the evaluated productâs technical features adequately achieve the objective, potentially eroding consistency of evaluated products and making it easier to attain certification for less trustworthy products.  For these reasons, the importance of the technical details of the Protection Profile is critical to determining the suitability of a product.

Such an architecture prevents an authenticated user or process at a specific classification or trust-level from accessing information, processes, or devices in a different level. This provides a containment mechanism of users and processes, both known and unknown (an unknown program (for example) might comprise an untrusted application where the system should monitor and/or control accesses to devices and files).

==Implementations==
A few MAC implementations, such as [[Unisys]]' [[BLACKER]] project, were certified robust enough to separate Top Secret from Unclassified late in the last millennium.  Their underlying technology became obsolete and they were not refreshed.  Today there are no current implementations certified by [[TCSEC]] to that level of robust implementation.  However, some less robust products exist.

* Amon Ott's RSBAC (Rule Set Based Access Control) provides a framework for Linux kernels that allows several different security policy / decision modules. One of the models implemented is Mandatory Access Control model. A general goal of RSBAC design was to try to reach (obsolete) Orange Book (TCSEC) B1 level. The model of mandatory access control used in RSBAC is mostly the same as in Unix System V/MLS, Version 1.2.1 (developed in 1989 by the National Computer Security Center of the USA with classification B1/TCSEC). RSBAC requires a set of patches to the stock kernel, which are maintained quite well by the project owner.

* An [[NSA]] research project called '''[[Security-Enhanced Linux|SELinux]]''' added a Mandatory Access Control architecture to the [[Linux Kernel]], which was merged into the mainline version of Linux in August 2003. It utilizes a Linux 2.6 kernel feature called [[Linux Security Modules|LSM]] (Linux Security Modules interface). [[Red Hat Enterprise Linux]] version 4 (and later versions) come with an SELinux-enabled kernel. Although SELinux is capable of restricting all processes in the system, the default ''targeted'' policy in [[Red Hat Enterprise Linux|RHEL]] confines the most vulnerable programs from the ''unconfined domain'' in which all other programs run. RHEL 5 ships 2 other binary policy types: ''strict'', which attempts to implement [[least privilege]], and ''MLS'', which is based on ''strict'' and adds [[Multilevel security|MLS]] labels.  RHEL 5 contains additional MLS enhancements and received 2 [[Labeled Security Protection Profile|LSPP]]/RBACPP/CAPP/EAL4+ certifications in June 2007.&lt;ref name=&quot;National&quot;&gt;{{cite web | author = National Information Assurance Partnership | url = http://www.niap-ccevs.org/cc%2Dscheme/vpl/ | title =The Common Criteria Evaluation and Validation Scheme Validated Products List | accessdate = 2008-03-15 |archiveurl = http://web.archive.org/web/20080314060625/http://www.niap-ccevs.org/cc-scheme/vpl/ &lt;!-- Bot retrieved archive --&gt; |archivedate = 2008-03-14}}&lt;/ref&gt;

* '''[[TOMOYO Linux]]''' is a lightweight MAC implementation for [[Linux]] and [[Embedded Linux]], developed by [[NTT Data Corporation]]. It has been recently merged in Linux Kernel mainline version 2.6.30 (June 2009).&lt;ref name=&quot;Ref_b&quot;&gt;{{cite web | title=TOMOYO Linux, an alternative Mandatory Access Control | publisher=Linux Kernel Newbies | work=Linux 2 6 30 | url=http://kernelnewbies.org/Linux_2_6_30#head-eeb259e0ba81d96d59015b8f79456d9a5283c650}}&lt;/ref&gt; Differently from the ''label-based'' approach used by [[SELinux]], TOMOYO Linux performs a ''pathname-based'' [[Mandatory Access Control]], separating security domains according to process invocation history, which describes the system behavior. Policy are described in terms of pathnames. A security domain is simply defined by a process call chain, and represented as a string. There are 4 modes: disabled, ''learning'', permissive, enforcing. Administrators can assign different modes for different domains. TOMOYO Linux introduced the &quot;learning&quot; mode, in which the accesses occurred in the kernel are automatically analyzed and stored to generate MAC policy: this mode can be used as first step of policy writing, making it easy to customize later.

* [[SUSE Linux]] ({{As of|2006|alt=now}} supported by [[Novell]]) and [[Ubuntu (operating system)|Ubuntu]] 7.10 have added a MAC implementation called '''[[AppArmor]]'''.  AppArmor utilizes a Linux 2.6 kernel feature called [[Linux Security Modules|LSM]] (Linux Security Modules interface).  LSM provides a kernel [[application programming interface|API]] that allows modules of kernel code to govern access control.  AppArmor is not capable of restricting all programs and is merged into the mainline Linux kernel as of version 2.6.36.&lt;ref name=&quot;Ref_c&quot;&gt;{{cite web | title=Linux 2.6.36 released 20 October 2010 | publisher=Linux Kernel Newbies | work=Linux 2.6.36 | url=http://kernelnewbies.org/Linux_2_6_36}}&lt;/ref&gt; In most Linux distributions MAC is not installed.

* [[grsecurity]] is a patch for the Linux kernel providing a MAC implementation (precisely, it is a [[RBAC]] implementation). Compared to [[SELinux]] and [[AppArmor]], grsecurity is not implemented by default in any [[Linux]] distribution except for the [[Tor-ramdisk]] micro Linux distribution.&lt;ref&gt;{{cite web | url=http://opensource.dyc.edu/tor-ramdisk-technical | title=Tor-ramdisk Technical Considerations | accessdate=2011-04-15}}&lt;/ref&gt;  [[Hardened Gentoo]] offers a pre-patched kernel with grsecurity. grsecurity also disables the kernel [[Linux Security Modules|LSM]] API. Despite LSM being developed as a security API, LSM provides hooks that could be used by [[rootkit]]s.&lt;ref name=&quot;Ref_d&quot;&gt;{{cite web | title=Why doesn't grsecurity use LSM? | url=http://grsecurity.net/lsm.php}}&lt;/ref&gt;

* [[Microsoft]] Starting with [[Windows Vista]] and [[Windows Server 2008|Server 2008]] Windows incorporates '''[[Mandatory Integrity Control]]''', which adds ''Integrity Levels'' (IL) to processes running in a login session.  MIC restricts the access permissions of applications that are running under the same user account and which may be less trustworthy. Five integrity levels are defined: Low, Medium, High, System, and Trusted Installer.&lt;ref name=&quot;symantec&quot;&gt;{{cite web | url = http://www.symantec.com/enterprise/security_response/weblog/2006/08/windows_vista_windows_security.html | title = Analysis of the Windows Vista Security Model | author = Matthew Conover | publisher = [[Symantec Corporation]] | accessdate = 2007-10-08}}&lt;/ref&gt; Processes started by a regular user gain a Medium IL; [[UAC|elevated]] processes have High IL.&lt;ref name=&quot;steve&quot;&gt;{{cite web | url = http://blogs.technet.com/steriley/archive/2006/07/21/442870.aspx | title = Mandatory Integrity Control in Windows Vista | author = Steve Riley | accessdate = 2007-10-08}}&lt;/ref&gt; While processes inherit the integrity level of the process that spawned it, the integrity level can be customized on a per-process basis: e.g. [[Internet Explorer 7|IE7]] and downloaded executables run with Low IL. Windows controls access to [[Object Manager (Windows)|objects]] based on ILs, as well as for defining the boundary for window messages via [[User Interface Privilege Isolation]].  Named [[Object Manager (Windows)|objects]], including [[Computer file|files]], [[Windows Registry|registry]] keys or other [[Process (computing)|processes]] and [[Thread (computer science)|threads]], have an entry in the [[Access Control List|ACL]] governing access to them that defines the minimum IL of the process that can use the object.  MIC enforces that a process can write to or delete an object only when its IL is equal to or higher than the objectâs IL.  Furthermore, to prevent access to sensitive data in memory, processes canât open processes with a higher IL for read access.&lt;ref name=&quot;mark&quot;&gt;{{cite web | url = http://blogs.technet.com/markrussinovich/archive/2007/02/12/638372.aspx | title = PsExec, User Account Control and Security Boundaries | accessdate = 2007-10-08 | author = [[Mark Russinovich]]}}&lt;/ref&gt;

* [[FreeBSD]] supports '''Mandatory Access Control''', implemented as part of the TrustedBSD project.  It was introduced in FreeBSD 5.0.  Since FreeBSD 7.2, MAC support is enabled by default.  The framework is extensible; various MAC modules implement policies such as [[Biba Integrity Model|Biba]] and [[Multi-Level Security]].

* Sun's '''[[Trusted Solaris]]''' uses a mandatory and system-enforced access control mechanism (MAC), where clearances and labels are used to enforce a security policy. However note that the capability to manage labels does not imply the kernel strength to operate in [[Multi-Level Security]] mode{{Citation needed|date=November 2009}}.  Access to the labels and control mechanisms are not{{Citation needed|date=November 2009}} robustly protected from corruption in protected domain maintained by a kernel.  The applications a user runs are combined with the security label at which the user works in the session. Access to information, programs and devices are only weakly controlled{{Citation needed|date=November 2009}}.

* Apple's Mac OS X MAC framework is an implementation of the '''TrustedBSD''' MAC framework.&lt;ref name=&quot;TrustedBSD&quot;&gt;{{cite web | url = http://www.trustedbsd.org/mac.html | title = TrustedBSD Mandatory Access Control (MAC) Framework | author = TrustedBSD Project | accessdate = 2008-03-15}}&lt;/ref&gt;  A limited high-level sandboxing interface is provided by the command-line function sandbox_init.  See the sandbox_init manual page for documentation.&lt;ref name=&quot;Ref_2007&quot;&gt;{{cite web | url = http://developer.apple.com/DOCUMENTATION/Darwin/Reference/ManPages/man3/sandbox_init.3.html | accessdate = 2008-03-15 | date = 2007-07-07 | title = sandbox_init(3) man page}}&lt;/ref&gt;

* [[Oracle Label Security]] is an implementation of mandatory access control in the [[Oracle DBMS]].

* [[SE-PostgreSQL]] is a work in progress as of 2008-01-27,&lt;ref name = &quot;SE Postgres wiki&quot;&gt;{{cite web | url = http://wiki.postgresql.org/wiki/SEPostgreSQL-patch | title = SEPostgreSQL-patch}}&lt;/ref&gt;&lt;ref name = &quot;SE Postgres&quot;&gt;{{cite web | url = http://code.google.com/p/sepgsql/ | title = Security Enhanced PostgreSQL}}&lt;/ref&gt; providing integration into SE-Linux.  It aims for integration into version 8.4, together with row-level restrictions.

* [[Trusted RUBIX]] is a mandatory access control enforcing DBMS that fully integrates with SE-Linux to restrict access to all database objects.&lt;ref name = &quot;Trusted RUBIX&quot;&gt;{{cite web | url = http://www.rubix.com | title = Trusted RUBIX}}&lt;/ref&gt;

== See also ==
* [[Mandatory Integrity Control]]
* [[Role-based access control]] â RBAC
* [[Discretionary access control]]
* [[Capability-based security]]
* Security-related [[security classification]]
* Security-related [[type enforcement]]
* [[GWVr2]] â Least Privilege Infrastructure and Information Flow Security Policy
* [[RSBAC|Rule-Set-Based Access Control (RSBAC)]]
* [[Security Modes|Security Modes of Operation]]
* [[BellâLaPadula model]]
* [[Multiple Single-Level|Multiple Single-Level (MSL)]]
* [[Organisation-Based Access Control|Organisation-Based Access Control (Or-BAC)]]
* [[Take-Grant Model]]
* [[The Clark-Wilson Integrity Model]]
* [[Graham-Denning Model]]
* [[Systrace]]

==Footnotes==
{{Reflist|colwidth=30em}}

==References==
*P. A. Loscocco, S. D. Smalley, P. A. Muckelbauer, R. C. Taylor, S. J. Turner, and J. F. Farrell. ''[http://www.jya.com/paperF1.htm The Inevitability of Failure: The Flawed Assumption of Security in Modern Computing Environments]''. In Proceedings of the 21st National Information Systems Security Conference, pages 303â314, Oct. 1998.

*P. A. Loscocco, S. D. Smalley, ''[http://www.nsa.gov/selinux/papers/ottawa01-abs.cfm Meeting Critical Security Objectives with Security-Enhanced Linux]'' Proceedings of the 2001 Ottawa Linux Symposium.
*ISO/IEC DIS 10181-3, Information Technology, OSI Security Model, Security FrameWorks, Part 3: Access Control, 1993

==External links==
* [http://rentzsch.com/notes/virtualizationAsAnAntivirus Weblog post] on the how virtualization can be used to implement Mandatory Access Control.
* [http://blogs.technet.com/steriley/archive/2006/07/21/442870.aspx Weblog post] from a Microsoft employee detailing Mandatory Integrity Control and how it differs from MAC implementations.
* [http://hokiepokie.org/docs/acl22003/security-policy.pdf GWV Formal Security Policy Model] A Separation Kernel Formal Security Policy, David Greve, Matthew Wilding, and W. Mark Vanfleet.

{{DEFAULTSORT:Mandatory Access Control}}
[[Category:Computer security models]]
[[Category:Computer access control]]
[[Category:Operating system security]]

[[cs:Mandatory access control]]
[[de:Mandatory Access Control]]
[[fr:ContrÃ´le d'accÃ¨s obligatoire]]
[[it:Mandatory Access Control]]
[[ja:å¼·å¶ã¢ã¯ã»ã¹å¶å¾¡]]
[[pl:Mandatory Access Control]]
[[ru:ÐÐ°Ð½Ð´Ð°ÑÐ½Ð¾Ðµ ÑÐ¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸Ðµ Ð´Ð¾ÑÑÑÐ¿Ð¾Ð¼]]
[[simple:Mandatory access control]]
[[vi:Äiá»u khiá»n truy cáº­p báº¯t buá»c]]</rev></revisions></page></pages></query></api>
