<?xml version="1.0"?><api><query><redirects><r from="Offline repository" to="Software repository" /></redirects><pages><page pageid="9570763" ns="0" title="Software repository"><revisions><rev xml:space="preserve">A '''software repository''' is a storage location from which [[Software package (installation)|software packages]] may be retrieved and installed on a computer.

== Discussion ==

Many software publishers and other organizations maintain servers on the [[Internet]] for this purpose, either free of charge or for a subscription fee. Repositories may be solely for particular programs, such as [[CPAN]] for the [[Perl]] programming language, or for an entire [[operating system]]. Operators of such repositories typically provide a [[package management system]], tools intended to search for, install and otherwise manipulate software packages from the repositories. For example, many [[Linux distribution]]s use [[Advanced Packaging Tool]] (APT), commonly found in [[Debian]] based distributions or [[Yellowdog Updater, Modified|yum]], found in [[Red Hat]] based distributions. There are also multiple independent package management systems, such as pacman, used in [[Arch Linux]] and equo, found in [[Sabayon Linux]].

As software repositories are designed to include useful packages, major repositories are designed to be [[malware]] free. If a computer is configured to use a [[digitally signed]] repository from a reputable vendor, and is coupled with an appropriate [[File system permissions|permissions system]], this significantly reduces the threat of malware to these systems. As a side effect, many systems that have these capabilities do not require anti-malware software such as [[anti-virus software]].&lt;ref&gt;[http://www.itmweb.com/essay503.htm itmWEB: Coping with Computer Viruses&lt;!-- Bot generated title --&gt;]&lt;/ref&gt;

Most major [[Linux distribution]]s have many repositories around the world that mirror the main repository.

== Package management system vs. package development process ==

A [[package management system]] is different from a [[package development process]].  A typical use of the former is to facilitate the integration of code from possibly different sources into a coherent stand-alone operating unit.  Thus, a package management system might be used to produce a distribution of Linux, possibly a distribution tailored to a specific restricted application.  A package development process, by contrast is used to manage the co-development of code and documentation of a collection of functions or routines with a common theme, producing thereby a package of software functions that typically will not be complete and usable by themselves.  A good package development process will help users conform to good documentation and coding practices, integrating some level of [[unit testing]].  The table below provides examples of package development processes.

== Selected repositories ==

The following table lists a few languages with repositories for contributed software.  The &quot;Autochecks&quot; column describes the routine checks done.

Very few people have the ability to test their software under multiple operating systems with different versions of the core code and with other contributed packages they may use.  For [[R (programming language)|R]], [[CRAN|the Comprehensive R Archive Network (CRAN)]] runs tests routinely.  To see how this is valuable, suppose Sally contributes a package A.  Sally only runs the current version of the software under one version of Windows and has only tested it there.  At more or less regular intervals, CRAN tests Sally's contribution under a dozen combinations of operating system and version of the core R language software.  If one of them generates an error, she gets that error message.  With luck, that error message may be sufficient to allow her to fix the error, even if she cannot replicated it with the hardware and software she has.  Next, suppose John contributes to the repository a package B that uses a package A.  Package B passes all the tests and is made available to users.  Later, Sally submits an improved version of A, which unfortunately, breaks B.  The autochecks make it possible to provide information to John so he can fix the problem.

This example exposes both a strength and a weakness in the R contributed package system:  The strength is that CRAN supports this kind of automated testing of contributed packages.  The weakness is that packages contributed to CRAN need not specify the versions of other contributed packages that they use.  There are procedures for requesting specific versions of packages, but they might not be used.

Beyond this, a repository such as CRAN running regular checks of contributed packages actually provides an extensive if ad hoc test suite for development versions of the core language.  If Sally (in the example above) gets an error message she does not understand or thinks is inappropriate, especially from a development version of the language, she can (and often does with R) ask the core development team for the language for help.  In this way, the repository can contribute to improving the quality of the core language software.

{| class=&quot;wikitable&quot;
! Language / purpose
! Package Development Process
! Repository
! How to install
! Collaborative development platform
! Autochecks
|-
| [[C++]]
| 
| [[Boost C++ Libraries|Boost]]
|
|
|
|-
| [[Haskell (programming language)|Haskell]]
| Common Architecture for Building Applications and Libraries ([http://www.haskell.org/cabal CABAL])
| [[Hackage]]
| [http://haskell.org/haskellwiki/Cabal/How_to_install_a_Cabal_package]
|
|
|-
| [[Perl]]
|
| [[CPAN]]
|
|
| 
|-
| [[PHP]]
| [[PEAR]]
| [[PHP Extension Community Library#PECL|PECL]]
|
|
|
|-
| [[Python (programming language)|Python]]
|
| [[PyPI]]
| [[Python Package Manager]]
|
|
|-
| rowspan = &quot;2&quot; | [[R (programming language)|R]]
| R CMD check process&lt;ref&gt;{{cite news
  | last = Leisch | first = Friedrich
  | title = Creating R Packages: A Tutorial
  | url =http://cran.r-project.org/doc/contrib/Leisch-CreatingPackages.pdf }}
&lt;/ref&gt;&lt;ref&gt;{{cite news
  | last1 = Graves | first1 = Spencer B. | last2 = Dorai-Raj | first2=Sundar
  | title = Creating R Packages, Using CRAN, R-Forge, And Local R Archive Networks And Subversion (SVN) Repositories
  | url =http://cran.r-project.org/doc/contrib/Graves+DoraiRaj-RPackageDevelopment.pdf}}
&lt;/ref&gt;
| [http://cran.r-project.org CRAN]
| [http://cran.r-project.org/doc/manuals/R-admin.html#Installing-packages install.packages]
| [http://r-forge.r-project.org R-Forge]
| Roughly weekly on 12 platforms or combinations of different version of R (devel, prerel, patched, release) with up to 7 different operating systems (different versions of Linux, Windows, and Mac).
|-
|
| [[Bioconductor]]
| [http://www.bioconductor.org/docs/install BiocLite.R]
|
|
|-
| [[Ruby (programming language)|Ruby]]
| [[RubyGems]]
| [[Ruby Application Archive]]
| 
| [[RubyForge]]
|
|-
| [[TeX]], [[LaTeX]]
|
| [[CTAN]]
|
|
| 
|}
(Parts of this table were copied from [http://stackoverflow.com/questions/1693529].)

== See also ==
* [[Package management system]]
* [[Synaptic (software)|Synaptic]]
* [[RPM Package Manager]]
* [[dpkg]]
* [[Simtel]]
* [[APTonCD]]
* [[RUNZ]]

== References ==
&lt;references/&gt;

== External links ==
* [http://unofficial.debian-maintainers.org/ Debian unofficial repository]
* [http://rpmlinux.org/ RPM packages repository for Mandriva]

[[Category:Software distribution|Repository]]


[[ar:ÙØ³ØªÙØ¯Ø¹ Ø¨Ø±ÙØ¬ÙØ§Øª]]
[[ca:Font de programari]]
[[cs:RepozitÃ¡Å]]
[[de:Repository]]
[[es:Repositorio]]
[[fr:DÃ©pÃ´t (informatique)]]
[[it:Repository]]
[[ja:ãªãã¸ããª]]
[[pl:Repozytorium]]
[[pt:RepositÃ³rio]]
[[ru:Ð ÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÐ¸Ð¹]]
[[fi:Pakettivarasto (tietokoneohjelmat)]]
[[uk:Ð ÐµÐ¿Ð¾Ð·Ð¸ÑÐ¾ÑÑÐ¹]]</rev></revisions></page></pages></query></api>
