<?xml version="1.0"?><api><query><pages><page pageid="362110" ns="0" title="MinGW"><revisions><rev xml:space="preserve">{{Infobox software
| name                   = MinGW
| author                 = [[Colin Peters]]
| developer              = MinGW Project
| released               = 1 July 1998
| programming language = [[Ada (programming language)|Ada]], [[C (programming language)|C]], [[C++]], [[Fortran]], [[Java (programming language)|Java]], [[Pascal (programming language)|Pascal]]
| latest_release_version = 4.5.2
| latest_release_date    = {{release date and age|2011|1|12}}&lt;ref name=&quot;dates&quot;&gt;Release information corresponds to the GCC package only.&lt;/ref&gt;
| latest_preview_version = none
| latest_preview_date    = n/a
| operating_system       = [[Microsoft Windows]]
| genre                  = [[Compiler]]
| license                = [[Public domain]] (headers)&lt;br /&gt;[[GNU General Public License]] (compiler and toolchain)
| website                = [http://mingw.org/ mingw.org]
}}

'''MinGW''' (''Minimalist GNU for Windows''), formerly '''mingw32''', is a native [[porting|software port]] of the [[GNU Compiler Collection]] (GCC) and [[GNU Binutils]] for use in the development of native [[Microsoft Windows]] applications; MinGW can function either as a [[cross compiler]] targeting Windows or as a native [[toolchain]] run on Windows itself.&lt;ref&gt;http://fedoraproject.org/wiki/SIGs/MinGW â MinGW for [[Fedora (operating system)|Fedora Linux]]&lt;/ref&gt; It is deployed along with a set of freely distributable import libraries and [[header files]] for the [[Windows API]].&lt;ref name=&quot;MinGWSummaryPage&quot;&gt;[http://sourceforge.net/projects/mingw/ SourceForge.net: MinGW - Minimalist GNU for Windows]&lt;/ref&gt;

==History==
MinGW was originally called mingw32; the numbers were dropped in order to avoid the implication that it would be limited to 32-bit systems.&lt;ref name=&quot;FAQ-What&quot;&gt;[http://mingw.org/mingwfaq.shtml What is MinGW?]&lt;/ref&gt; Colin Peters authored the initial release in 1998, consisting only of a [[Cygwin]] port of [[GNU Compiler Collection|GCC]].&lt;ref name=&quot;history&quot;&gt;[http://mingw.org/history MinGW - History&lt;!-- Bot generated title --&gt;]&lt;/ref&gt;&lt;ref name=&quot;potm&quot;/&gt; Jan-Jaap van der Heijden created a Windows-native port of GCC and added [[binutils]] and [[make (software)|make]].&lt;ref name=&quot;history&quot;/&gt;&lt;ref name=&quot;potm&quot;/&gt; Mumit Khan later took over development, adding more Windows-specific features to the package, including the [[Win32]] headers by Anders Norlander.&lt;ref name=&quot;history&quot;/&gt;&lt;ref name=&quot;potm&quot;/&gt; In 2000, the project was moved to [[SourceForge.net]] in order to solicit more assistance from the community and centralize its development.&lt;ref name=&quot;history&quot;/&gt;&lt;ref name=&quot;potm&quot;/&gt;

MinGW was selected as Project of the Month at [[SourceForge.net]] for September 2005.&lt;ref name=&quot;potm&quot;&gt;[http://sourceforge.net/potm/potm-2005-09.php SourceForge Project of the Month]&lt;/ref&gt;

=={{anchor|Programming Language Support}}Programming language support==
For languages other than C, MinGW uses the GNU [[runtime library|runtime libraries]] (for example, GNU [[libstdc++]] for C++).{{citation needed|date=March 2011}}

However, because GCC does not supply its own C runtime library, MinGW's C compiler targets Microsoft's old [[Visual C++|Visual&amp;nbsp;C]] runtime library, [[Microsoft_Windows_library_files#Msvcrt.dll|MSVCRT]], which was released in 1998 and therefore does not include support for [[C99]] features (let alone all of [[ANSI C|C89]]); while targeting MSVCRT yields programs that are as native as possible, the lack of support for C99 has caused porting problems, particularly where [[printf]]-style conversion specifiers are concerned. These issues have been partially mitigated by the implementation of a C99 compatibility library, ''libmingwex'', but the extensive work required is far from complete and may never be fully realized.&lt;ref&gt;{{cite web | url=http://mingw.org/wiki/C99 | title=C99 | author=gcc | date=2010-06-21}}&lt;/ref&gt;

==Components of MinGW==
The MinGW project maintains and distributes a number of different core components and supplementary packages, including various ports of [[GNU toolchain]], such as [[GNU Compiler Collection|GCC]] and [[binutils]], translated into equivalent packages.&lt;ref name=&quot;FAQ-What&quot;&gt;[http://mingw.org/mingwfaq.shtml#faq-what What is MinGW?]&lt;/ref&gt;&lt;ref name=&quot;MinGWComponents&quot;&gt;[http://sourceforge.net/project/showfiles.php?group_id=2435 MinGW Components]&lt;/ref&gt; These utilities can be used from the [[Windows command line]] or integrated into an [[integrated development environment|IDE]].
MinGW supports libraries named according to the &quot;&lt;name&gt;.lib&quot; and&quot;&lt;name&gt;.dll&quot; conventions, in addition to the normal &quot;lib&lt;name&gt;.a&quot; convention common on Unix-like systems.

In addition, a component of MinGW known as '''MSYS''' (''Minimal SYStem'') provides win32 ports of a lightweight Unix-like [[shell (computer science)|shell]] environment including [[rxvt]] and a selection of [[POSIX]] tools sufficient to enable [[autoconf]] scripts to run,&lt;ref name=&quot;msys-what&quot;&gt;[http://mingw.org/node/18 What is MSYS?]&lt;/ref&gt;&lt;ref name=&quot;msys&quot;&gt;[http://www.mingw.org/msys.shtml MinGW - Minimal SYStem]&lt;/ref&gt; but it does not provide a C compiler or a case-sensitive file system.&lt;ref&gt;{{cite web
| accessdate = 2011-05-20
| location = http://www.mingw.org/
| publisher = MinGW - Minimalist GNU for Windows 
| title = MSYS
| quote = A common misunderstanding is MSYS is &quot;UNIX on Windows&quot;, MSYS by itself does not contain a compiler or a C library, [...] nor does it provide any UNIX specific functionality like case-sensitive filenames.
| url = http://www.mingw.org/wiki/MSYS}}&lt;/ref&gt;

'''mingwPORT'''s are user contributed additions to the MinGW software collection. Rather than providing these &quot;add-ons&quot; as precompiled binary packages, they are supplied in the form of interactive [[Bourne shell]] scripts, which guide the end user through the process of automatically downloading and patching original source code, then building and installing it. Users who wish to build any application from a mingwPORT must first install both MinGW and MSYS.&lt;ref name=&quot;mingwport&quot;&gt;[http://oldwiki.mingw.org/index.php/mingwPORT]&lt;/ref&gt;&lt;ref&gt;[http://www.mingw.org/wiki/mingwPORT]&lt;/ref&gt;

The implementation of Win32 header files and Win32 import libraries for run-time linking are released under a [[permissive license]],&lt;ref name=&quot;w32api&quot;&gt;http://www.mingw.org/license&lt;/ref&gt; while the GNU ports are provided under the [[GNU General Public License]]. Binary downloads of both the complete MSYS package and individual MinGW GNU utilities are available from the MinGW site.

[http://sourceforge.net/projects/mingw/files/Automated%20MinGW%20Installer/mingw-get/ mingw-get] is a tool which allows users to manage the installation of MinGW and MSYS software. This provides a more convenient way to update and install the libraries, compilers, and utilities in command-line.

==Comparison with Cygwin==
MinGW forked from version 1.3.3 of Cygwin.&lt;ref name=&quot;history&quot;/&gt; Although both Cygwin and MinGW can be used to port Unix software to Windows, they have different approaches:&lt;ref name=&quot;differencesCygwinMinGW&quot;&gt;http://www.mingw.org/node/21&lt;/ref&gt; Cygwin aims to provide a complete [[Posix|POSIX]] layer that provides emulations of several system calls and libraries that exist on Linux, Unix, and the BSD variants. The [[Posix|POSIX]] layer runs on top of Windows, sacrificing performance where necessary for compatibility. Accordingly, this approach requires Win32 programs written with Cygwin to run on top of a [[copyleft]]ed compatibility library that must be distributed with the program, along with the program's source code. MinGW aims to provide native functionality and performance via direct Windows API calls. Unlike Cygwin, MinGW does not require a [[compatibility layer]] [[Microsoft Dynamic Link Library|DLL]] and thus programs do not need to be distributed with source code.

Because MinGW is dependent upon Win32 API calls, it cannot provide a full [[Posix|POSIX]] API; it is unable to compile some Unix applications that can be compiled with Cygwin. Specifically, this applies to applications that require POSIX functionality like fork(), mmap() or ioctl()&lt;ref name=&quot;differencesCygwinMinGW&quot;/&gt; and those that expect to be run in a POSIX environment. Applications written using a cross-platform library that has itself been ported to MinGW, such as [[Simple DirectMedia Layer|SDL]], [[wxWidgets]], [[Qt (toolkit)|Qt]], or [[GTK+]] will usually compile as easily in MinGW as they would in Cygwin.

The combination of MinGW and MSYS provides a small, self-contained environment that can be loaded onto removable media without leaving entries in the [[Windows Registry|Registry]] or files on the computer.  Cygwin Portable provides a similar feature. By providing more functionality, Cygwin becomes more complicated to install and maintain.

It is also possible to [[cross compiler|cross-compile]] Windows applications with MinGW-GCC under POSIX systems. This means that developers do not need a Windows installation with MSYS to compile software that will run on Windows without Cygwin.

==See also==
{{Portal|Free software}}

* [[Cygwin]]
* [[UnxUtils]]
* [[DJGPP]]
* [[Interix|Microsoft Services for UNIX-based Applications (SUA, formerly Interix)]]
* [[TinyCC|TinyCC: lightweight cross-compilers for Linux, Windows, ARM and C67]]

==References==
{{Reflist|2}}

==External links==
* [http://mingw.org/ MinGW Official website]
* {{SourceForge|mingw|MinGW}}
* [http://mingw-w64.sourceforge.net/ MinGW-w64 - GCC for Win64]
* [http://tdragon.net/recentgcc/ Unofficial TDM-MinGW GCC 4.6.1 builds]
* [http://code.google.com/p/mingw-builds/ MinGW GCC 4.6.x-4.7.x builds]
* [http://sourceforge.net/apps/mediawiki/takeoffgw/index.php?title=Main_Page TakeoffGW - GNU/Windows distribution with package manager] includes MinGW GCC 4.4, MSYS
* [http://nuwen.net/mingw.html Prebuilt MinGW package with the boost libraries already built with an installer]
* [http://sourceforge.net/projects/swatwork/files MinGW GCC and MSYS tools installer (includes C, C++ and Objective-C compilers)]

{{Use dmy dates|date=September 2010}}

&lt;!--Categories--&gt;
{{DEFAULTSORT:Mingw}}
[[Category:1998 software]]
[[Category:Compilers]]
[[Category:Cross-compilers]]
[[Category:Free compilers and interpreters]]
[[Category:Free software programmed in Ada]]
[[Category:Free software programmed in C]]
[[Category:Free software programmed in C++]]
[[Category:Free software programmed in Fortran]]
[[Category:Free software programmed in Java]]
[[Category:Free software programmed in Pascal]]
[[Category:Public domain software]]
[[Category:Windows-only free software]]
[[Category:C++ compilers]]
[[Category:C compilers]]

&lt;!--Interwikies--&gt;

[[cs:MinGW]]
[[de:MinGW]]
[[el:MinGW]]
[[es:MinGW]]
[[fr:MinGW]]
[[ko:MinGW]]
[[it:MinGW]]
[[hu:Mingw]]
[[nl:MinGW]]
[[ja:MinGW]]
[[pl:MinGW]]
[[pt:MinGW]]
[[ro:MinGW]]
[[ru:MinGW]]
[[sv:MinGW]]
[[zh:MinGW]]</rev></revisions></page></pages></query></api>
