<?xml version="1.0"?><api><query><pages><page pageid="4547" ns="0" title="Bash (Unix shell)"><revisions><rev xml:space="preserve">{{Redirect|Bash (software)|other software|Bash (disambiguation)}}
{{Infobox software
| name                   = Bash
| logo                   =
| screenshot             = [[Image:Bash demo.png|250px]]
| caption                = Screenshot of Bash and [[Bourne shell|sh]] sessions demonstrating some features
| author                 = [[Brian Fox (computer programmer)|Brian Fox]]
| released               = {{start date and age|1989|6|7}}
| frequently updated     = yes
| programming language   = [[C (programming language)|C]]
| operating system       = [[Cross-platform]]
| platform               = [[GNU]]
| language               = English, multilingual ([[gettext]])
| status                 = Active
| genre                  = [[Unix shell]]
| source model           = [[Free software]]
| license                = [[GPLv3|GNU General Public License version 3]]+&lt;ref name=&quot;license&quot;&gt;{{cite web
| author                 = GNU Project
| authorlink             = GNU Project
| title                  = README file
| url                    = http://www.gnu.org/software/bash/
| quote                  = Bash is free software, distributed under the terms of the [GNU] General Public License as published by the Free Software Foundation, version 3 of the License (or any later version).
}}&lt;/ref&gt;
| website                = [http://www.gnu.org/software/bash/ Bash GNU project home page]
}}

'''Bash''' is a [[Unix shell]] written by [[Brian Fox (computer programmer)|Brian Fox]] for the [[GNU Project]] as a [[free software]] replacement for the [[Bourne shell]] (sh).&lt;ref name=&quot;GNUBSD&quot;&gt;
{{Cite newsgroup
  | title = GNU + BSD = ?
  | author = [[Richard Stallman]] (forwarded with comments by Chet Ramey)
  | date = February 10, 1988
  | newsgroup = comp.unix.questions
  | id =
  | url = http://groups.google.com/group/comp.unix.questions/msg/e44ad620f76be7c9?hl=en
  | accessdate = Mar 22, 2011
  | quote = For a year and a half, the GNU shell was &quot;just about done&quot;.  The author made repeated promises to deliver what he had done, and never kept them.  Finally I could no longer believe he would ever deliver anything.  So Foundation staff member Brian Fox is now implementing an imitation of the Bourne shell.
}}
&lt;/ref&gt;&lt;ref&gt;
{{Citation
  | last = Hamilton
  | first = Naomi
  | author-link = http://www.computerworld.com.au/author/97635374/naomi-hamilton/articles
  | title = The A-Z of Programming Languages: BASH/Bourne-Again Shell
  | journal = Computerworld
  | pages = 2
  | date = May 30, 2008
  | accessdate = Mar 21, 2011
  | url = http://www.computerworld.com.au/article/222764/a-z_programming_languages_bash_bourne-again_shell/?pp=2&amp;fp=16&amp;fpid=1
  | quote = When Richard Stallman decided to create a full replacement for the then-encumbered Unix systems, he knew that he would eventually have to have replacements for all of the common utilities, especially the standard shell, and those replacements would have to have acceptable licensing.
}}
&lt;/ref&gt;  Released in 1989,&lt;ref name=BashBeta&gt;
{{Cite newsgroup
  | title = Bash is in beta release!
  | author = Brian Fox (forwarded by Leonard H. Tower Jr.)
  | date = June 8, 1989
  | newsgroup = gnu.announce
  | url = http://groups.google.com/group/gnu.announce/msg/a509f48ffb298c35?hl=en
  | accessdate = Oct 28 2010
}}
&lt;/ref&gt; it has been distributed widely as the shell for the [[GNU operating system]] and as the default shell on [[Linux]], [[Mac OS X]] and [[Darwin (operating system)|Darwin]].  It has been ported to [[Microsoft Windows]] and distributed with [[Cygwin]] and [[MinGW]], to [[DOS]] by the [[DJGPP]] project and to [[Novell NetWare]].

Bash is a [[Command-line interpreter|command processor]], typically run in a text window, allowing the user to type commands which cause actions.  Bash can also read commands from a file, called a [[Shell script|script]].  Like all Unix shells, it supports  filename [[Wildcard character|wildcarding]], [[Pipeline (Unix)|piping]], [[here document]]s, [[command substitution]], [[Variable (programming)|variables]] and [[control flow|control structures]] for [[Conditional (programming)|condition-testing]] and [[iteration]].  The [[Keyword (computer programming)|keywords]], [[Syntax (programming languages)|syntax]] and other basic features of the [[Language (computer science)|language]] were all copied from sh.  Other features, e.g., [[C shell#History|history]], were copied from [[C shell|csh]] and [[Korn shell|ksh]].  Bash is a [[POSIX]] shell but with a number of extensions.

The name itself is an [[acronym]], a [[pun]] and descriptive.  As an acronym, it stands for ''Bourne-again shell'', referring to its objective as a free replacement for the Bourne shell.&lt;ref&gt;[http://www.ddj.com/cpp/184404693 C Programming] by Al Stevens, [[Dr. Dobb's Journal]], July 1, 2001&lt;/ref&gt;
As a pun, it expressed that objective in a phrase that sounds the same as ''[[Born again (Christianity)|born again]]'', a term for spiritual rebirth.&lt;ref&gt;
{{Cite web
  | author = [[Richard Stallman]]
  | title = About the GNU Project
  | publisher = [[Free Software Foundation]]
  | date =  Nov 12, 2010
  | url = http://www.gnu.org/gnu/thegnuproject.html
  | quote = âBourne Again Shellâ is a play on the name âBourne Shellâ, which was the usual shell on Unix.
  | accessdate = Mar 13, 2011
}}
&lt;/ref&gt;&lt;ref&gt;
{{Citation
  | last = Gattol
  | first = Markus
  | title = Bourne-again Shell
  | date = Mar 13, 2011
  | url = http://www.markus-gattol.name/ws/bash.html
  | quote = The name is a pun on the name of the Bourne shell (sh), an early and important Unix shell written by Stephen Bourne and distributed with Version 7 Unix circa 1978, and the concept of being &quot;born again&quot;.
  | accessdate = Mar 13, 2011
}}
&lt;/ref&gt; The name is also descriptive of what it did, ''bashing together'' the features of sh, [[C shell|csh]] and [[Korn shell|ksh]].&lt;ref&gt;
{{Cite newsgroup
  | title = at&amp;t-free ksh (was: job control is a bug, not a feature)
  | author = Ian Darwin
  | date = June 13, 1989
  | newsgroup = comp.os.minix
  | id =
  | url = http://groups.google.com/group/comp.os.minix/msg/63c036d82ceca4d6?hl=en
  | accessdate = Mar 21, 2011
  | quote = Yup, the gnu project's Born Again Shell (&quot;bash&quot;) is an attempt at bashing all the features of sh together with many of those from both csh and ksh.
}}
&lt;/ref&gt;

== History ==
Brian Fox began [[Computer programming|coding]] Bash on January 10, 1988&lt;ref&gt;
{{Citation
  | author = Brian Fox
  | title = shell.c
  | place =
  | publisher = [[Free Software Foundation]]
  | date = August 29, 1996
  | url = http://ftp.gnu.org/gnu/bash/bash-1.14.7.tar.gz
  | quote = Birthdate:  Sunday, January 10th, 1988.  Initial author:  Brian Fox
 }}
&lt;/ref&gt; after [[Richard Stallman]] became dissatisfied with the lack of progress being made by a prior developer.&lt;ref name=GNUBSD/&gt;  Stallman and the [[Free Software Foundation]] (FSF) considered a free shell that could run existing sh scripts so strategic to a completely free system built from BSD and GNU code that this was one of the few projects they funded themselves, with Fox undertaking the work as an employee of FSF.&lt;ref name=GNUBSD/&gt;&lt;ref&gt;
{{Cite web
  | author = [[Richard Stallman]]
  | title = About the GNU Project
  | publisher = [[Free Software Foundation]]
  | date =  October 3, 2010
  | url = http://www.gnu.org/gnu/thegnuproject.html
  | accessdate = Mar 21, 2011
  | quote = Free Software Foundation employees have written and maintained a number of GNU software packages. Two notable ones are the C library and the shell. ...  We funded development of these programs because the GNU Project was not just about tools or a development environment. Our goal was a complete operating system, and these programs were needed for that goal.
}}
&lt;/ref&gt; Fox  released Bash as a beta, version .99, on June 7, 1989&lt;ref name=BashBeta/&gt; and remained the primary maintainer until sometime between mid-1992&lt;ref&gt;
{{Cite newsgroup
  | title = January 1993 GNU's Bulletin
  | author = len (g...@prep.ai.mit.edu)
  | date = April 20, 1993
  | newsgroup = gnu.announce
  | id = gnusenet930421bulletin@prep.ai.mit.edu
  | url = http://groups.google.com/group/gnu.misc.discuss/msg/4f42c739cd7e8bd8
  | accessdate = Oct 28 2010
}}
&lt;/ref&gt; and mid-1994,&lt;ref name=&quot;Bourne shell grammar&quot;&gt;{{cite web|first=Chet|last=Ramey|title=Bash - the GNU shell (Reflections and Lessons Learned)|url=http://www.linuxjournal.com/article/2800#N0xa50890.0xb46380|accessdate=2008-11-13| date=1994-08-01|work=[[Linux Journal]]}}&lt;/ref&gt; when he was laid off from FSF&lt;ref&gt;
{{Citation
  | title = Dates in your Computerworld interview
  | author = Chet Ramey
  | date = October 31, 2010
  | url = http://www.scribd.com/doc/40556434/2010-10-31-Chet-Ramey-Early-Bash-Dates
  | accessdate = Oct 31 2010
}}
&lt;/ref&gt; and his responsibility was transitioned to another early contributor, Chet Ramey.&lt;ref&gt;
{{Cite newsgroup
  | title = Bash 0.99 fixes &amp; improvements
  | author = Chet Ramey
  | date = June 12, 1989
  | newsgroup = gnu.bash.bug
  | id =
  | url = http://groups.google.com/group/gnu.bash.bug/msg/1fc7b688f5d44438?hl=en
  | accessdate = Nov 1 2010
}}
&lt;/ref&gt;&lt;ref&gt;
{{Cite newsgroup
  | title = Some bash-1.02 fixes
  | author = Chet Ramey
  | date = July 24, 1989
  | newsgroup = gnu.bash.bug
  | id =
  | url = http://groups.google.com/group/gnu.bash.bug/msg/072a03645663caea?hl=en
  | accessdate = Oct 30 2010
}}
&lt;/ref&gt;&lt;ref&gt;
{{Cite newsgroup
  | title = Availability of bash 1.05
  | author = Brian Fox
  | date = March 2, 1990
  | newsgroup = gnu.bash.bug
  | id =
  | url = http://groups.google.com/group/gnu.bash.bug/msg/e6112ccc8866e2f4?hl=en
  | accessdate = Oct 30 2010
}}
&lt;/ref&gt;

==Features==
The Bash [[command (computing)|command]] syntax is a [[superset]] of the Bourne shell command syntax. The vast majority of Bourne shell scripts can be executed by Bash without modification, with the exception of Bourne shell scripts stumbling into fringe syntax behavior interpreted differently in Bash or attempting to run a system command matching a newer Bash builtin, etc.  Bash command syntax includes ideas drawn from the [[Korn shell]] (ksh) and the [[C shell]] (csh) such as command line editing, [[command history]], the directory stack, the &lt;tt&gt;$RANDOM&lt;/tt&gt; and &lt;tt&gt;$PPID&lt;/tt&gt; variables, and POSIX [[command substitution]] syntax &lt;tt&gt;$(â¦)&lt;/tt&gt;. When used as an interactive command shell and pressing the [[tab key]], Bash automatically uses [[command line completion]] to match partly typed program names, filenames and variable names.  The Bash commmand-line completion system is very flexible and customizable, and is often packaged with functions that complete arguments and filenames for specific programs and tasks.

Bash's syntax has many extensions which the Bourne shell lacks. Bash can perform integer calculations without spawning external processes, unlike the Bourne shell. Bash uses the &lt;tt&gt;((â¦))&lt;/tt&gt; command and the &lt;tt&gt;$((â¦))&lt;/tt&gt; variable syntax for this purpose. Bash syntax simplifies [[redirection (computing)|I/O redirection]] in ways that are not possible in the traditional Bourne shell. For example, Bash can redirect [[standard streams#Standard output (stdout)|standard output]] (stdout) and [[standard streams#Standard error (stderr)|standard error]] (stderr) at the same time using the &lt;tt&gt;&amp;&gt;&lt;/tt&gt; operator. This is simpler to type than the Bourne shell equivalent '&lt;tt&gt;command &gt; file 2&gt;&amp;1&lt;/tt&gt;'.  Bash supports [[process substitution]] using the &lt;tt&gt;&lt;(command)&lt;/tt&gt; syntax, which substitutes the output of (or input to) a command where a filename is normally used.

When using the 'function' keyword, Bash function declarations are not compatible with Bourne/Korn/POSIX scripts (the Korn shell has the same problem when using 'function'), but Bash accepts the same function declaration syntax as the Bourne and Korn shells, and is POSIX conformant.  Due to these and other differences, Bash shell scripts are rarely runnable under the Bourne or Korn shell interpreters unless deliberately written with that compatibility in mind, which is becoming less common as Linux becomes more widespread.  But in POSIX mode,&lt;ref name=&quot;GNUBASHREF&quot;&gt;
{{Citation
  | title = The GNU Bash Reference Manual, for Bash, Version 4.1
  | place =
  | publisher =
  | origyear =
  | date = December 23, 2009
  | volume =
  | edition =
  | chapter = 6.11 Bash POSIX Mode
  | chapterurl = http://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html
  | accessdate = Oct 26 2010

  | url = http://www.gnu.org/software/bash/manual/html_node/index.html
}}
&lt;/ref&gt; Bash conformance with POSIX is nearly perfect.

Bash supports [[here document]]s just as the Bourne shell always has. However, since version 2.05b Bash can redirect [[standard streams#Standard input (stdin)|standard input]] (stdin) from a &quot;here string&quot; using the &lt;tt&gt;&lt;&lt;&lt;&lt;/tt&gt; operator.

Bash 3.0 supports in-process [[regular expression]] matching using a syntax reminiscent of [[Perl]].&lt;ref&gt;The syntax matches that shown on the &lt;code&gt;[http://www.tin.org/bin/man.cgi?section=7&amp;topic=regex regex(7)]&lt;/code&gt; [[man page]].&lt;/ref&gt;

Bash 4.0 supports associative arrays&lt;ref name=GNUBASHREF/&gt; allowing faked support for multi-dimensional arrays, in a similar way to awk:

&lt;source lang=&quot;bash&quot;&gt;
declare -A a         # declare an associative array 'a'
i=1; j=2             # initialize some indices
a[$i,$j]=5           # associate value &quot;5&quot; to key &quot;$i,$j&quot; (i.e. &quot;1,2&quot;)
echo ${a[$i,$j]}     # print the stored value at key &quot;$i,$j&quot;
&lt;/source&gt;

===Brace expansion===

Brace expansion, also called alternation, is a feature copied from the [[C shell]] that generates the set of alternative combinations. The generated results need not exist as files. The results of each expanded string are not sorted and left to right order is preserved:

&lt;source lang=&quot;bash&quot;&gt;
echo a{p,c,d,b}e # ape ace ade abe
echo {a,b,c}{d,e,f} # ad ae af bd be bf cd ce cf
&lt;/source&gt;
Brace expansions should not be used in portable shell scripts, because the Bourne shell will not produce the same output.

&lt;source lang=&quot;bash&quot;&gt;
#!/bin/sh

# A traditional shell does not produce the same output
echo a{p,c,d,b}e # a{p,c,d,b}e
&lt;/source&gt;

When brace expansion is combined with wildcards, the braces are expanded first, then the resulting wildcards are substituted normally.  Hence, a listing of JPEG and PNG images in the current directory could be obtained with:

&lt;source lang=&quot;bash&quot;&gt;
ls *.{jpg,jpeg,png}    # expands to *.jpg *.jpeg *.png - after which,
                       # the wildcards are processed
&lt;/source&gt;

===Startup scripts===
When Bash starts, it executes the commands in a variety of different scripts.

&lt;!-- A little margin for readability --&gt;
&lt;div style=&quot;margin: 1.5em 3em&quot;&gt;
'''When started as an interactive login shell:'''
* Bash reads and executes the &lt;tt&gt;/etc/profile&lt;/tt&gt; (if it exists).
* After reading that file, it looks for &lt;tt&gt;~/.bash_profile&lt;/tt&gt;, &lt;tt&gt;~/.bash_login&lt;/tt&gt;, and &lt;tt&gt;~/.profile&lt;/tt&gt; ''in that order'', and reads and executes the first one (that exists and is readable).


'''When a login shell exits:'''
* Bash reads and executes &lt;tt&gt;~/.bash_logout&lt;/tt&gt; (if it exists).


'''When started as an interactive shell (but not a login shell):'''
* Bash reads and executes &lt;tt&gt;~/.bashrc&lt;/tt&gt; (if it exists). This may be inhibited by using the &lt;tt&gt;--norc&lt;/tt&gt; option. The &lt;tt&gt;--rcfile file&lt;/tt&gt; option will force Bash to read and execute commands from &lt;tt&gt;file&lt;/tt&gt; instead of &lt;tt&gt;~/.bashrc&lt;/tt&gt;.
&lt;/div&gt;

Some versions of Unix have especially contorted system scripts for Bash which violate the documented script load order (by loading scripts too early or attempting to combine Bash startup with the startup scripts for other shells in various ways).{{Citation needed|date=June 2010}}

===Portability===
Shell scripts written with  Bash-specific features (''bashisms'') will not function on a system using the Bourne shell or one of its replacements, unless Bash is also installed and the script begins with a &quot;[[Shebang (Unix)|''shebang'']] ''line''&quot; of ''#![[/bin]]/bash'' [[interpreter directive]] instead of ''#!/bin/sh''.

===Keyboard shortcuts===
The following shortcuts work when using default ([[Emacs]]) key bindings. [[Vim (text editor)|Vi]]-bindings can be enabled by running &lt;code&gt;set -o vi&lt;/code&gt;.&lt;ref&gt;http://www.hypexr.org/bash_tutorial.php#emacs&lt;/ref&gt;

{{See also|Readline}}

* {{key press|TAB}} : [[Autocomplete]]s from the cursor position.
* {{key press|Ctrl|a}} : Moves the cursor to the line start (equivalent to the key {{key press|[[home key|Home]]}}).
* {{key press|Ctrl|b}} : Moves the cursor back one character.
* {{key press|Ctrl|c}} : Sends the signal [[SIGINT (POSIX)|SIGINT]] to the current task, which aborts and closes it.
* {{key press|Ctrl|d}} : Sends an EOF marker, which (unless disabled by an option) closes the current [[shell (computing)|shell]] (equivalent to the command &lt;code&gt;[[exit (command)|exit]]&lt;/code&gt;). (Only if there is no text on the current line)
* {{key press|Ctrl|d}} : Deletes the current character. (Only if there is text on the current line)
* {{key press|Ctrl|e}} : ([[wikt:end|end]]) moves the cursor to the line end (equivalent to the key {{key press|[[end key|End]]}}).
* {{key press|Ctrl|f}} : Moves the cursor forward one character.
* {{key press|Ctrl|g}} : Abort the research and restore the original line.
* {{key press|Ctrl|h}} : Deletes the previous character (same as backspace).
* {{key press|Ctrl|i}} : Equivalent to the tab key.
* {{key press|Ctrl|j}} : Equivalent to the enter key.
* {{key press|Ctrl|k}} : Clears the line content after the cursor and copies it into the [[clipboard (software)|clipboard]].
* {{key press|Ctrl|l}} : Clears the screen content (equivalent to the command &lt;code&gt;[[clear (Unix)|clear]]&lt;/code&gt;).
* {{key press|Ctrl|n}} : ([[wikt:next|next]]) recalls the next command (equivalent to the key {{key press|[[arrow keys|Down]]}}).
* {{key press|Ctrl|o}} : Executes the found command from history, and fetch the next line relative to the current line from the history for editing.
* {{key press|Ctrl|p}} : ([[wikt:previous|previous]]) recalls the prior command (equivalent to the key {{key press|[[arrow keys|Up]]}}).
* {{key press|Ctrl|q}} : Add the next character typed to the line verbatim.
* {{key press|Ctrl|r}} : ([[wikt:research|research]]) recalls the last command including the specified character(s). A second {{key press|Ctrl|r}} recalls the next anterior command which corresponds to the research
* {{key press|Ctrl|s}} : Go back to the next more recent command of the research (beware to not execute it from a terminal because this command also launches its XOFF). If you changed that XOFF setting, use {{key press|Ctrl|q}} to return.
* {{key press|Ctrl|t}} : Transpose the previous two characters.
* {{key press|Ctrl|u}} : Clears the line content before the cursor and copies it into the [[clipboard (software)|clipboard]].
* {{key press|Ctrl|v}} : Add the next character typed to the line verbatim.
* {{key press|Ctrl|w}} : Clears the word before the cursor and copies it into the [[clipboard (software)|clipboard]].
* {{key press|Ctrl|y}} : ([[wikt:yank|yank]]) adds the [[clipboard (software)|clipboard]] content from the cursor position.
* {{key press|Ctrl|x}} {{key press|Ctrl|e}} : Edits the current line in the $EDITOR program, or [[vi]] if undefined.
* {{key press|Ctrl|x}} {{key press|Ctrl|r}} : Read in the contents of the inputrc file, and incorporate any bindings or variable assignments found there.
* {{key press|Ctrl|x}} {{key press|Ctrl|u}} : Incremental undo, separately remembered for each line.
* {{key press|Ctrl|x}} {{key press|Ctrl|v}} : Display version information about the current instance of bash.
* {{key press|Ctrl|x}} {{key press|Ctrl|x}} : Alternates the cursor with its old position. (C-x, because x has a crossing shape).
* {{key press|Ctrl|z}} : Sends the signal [[SIGTSTP]] to the current task, which suspends it. To execute it in background one can enter &lt;code&gt;bg&lt;/code&gt;. To bring it back from background or suspension &lt;code&gt;fg ['process name or job id']&lt;/code&gt; ([[foreground process|foreground]]) can be issued.
* {{key press|Ctrl|_}} : Incremental undo, separately remembered for each line.
* {{key press|Alt|b}} : ([[wikt:backward|backward]]) moves backward the cursor of one word.
* {{key press|Alt|c}} : Capitalizes the character under the cursor and moves to the end of the word.
* {{key press|Alt|d}} : Cuts the word after the cursor.
* {{key press|Alt|f}} : ([[wikt:forward|forward]]) moves forward the cursor of one word.
* {{key press|Alt|l}} : Lowers the case of every character from the cursor's position to the end of the current word.
* {{key press|Alt|r}} : Cancels the changes and put back the line as it was in the history.
* {{key press|Alt|u}} : Capitalizes every character from the cursor's position to the end of the current word.
* {{key press|Alt|.}} : Insert the last argument to the previous command (the last word of the previous history entry).

==See also==
{{Portal|Free software}}

* [[Comparison of command shells]]

==References==
{{Reflist}}

==External links==
{{wikibooks|Bash Shell Scripting}}
* {{official website|http://www.gnu.org/software/bash/bash.html}}
* [http://www.gnu.org/software/bash/manual/ Bash Reference Manual]&amp;nbsp; ([http://www.gnu.org/software/bash/manual/html_node/index.html HTML] [http://www.gnu.org/software/bash/manual/bash.ps.gz PS] [http://www.gnu.org/software/bash/manual/bash.pdf PDF])

* {{tldp|LDP/Bash-Beginners-Guide|Bash Guide for Beginners}}
* {{tldp|LDP/abs|Advanced Bash Scripting Guide}}

* [http://bash.cyberciti.biz/guide/Main_Page Linux Shell Scripting Tutorial (LSST) v2.0 wiki]
* [http://www.bashcookbook.com/bashinfo/ &quot;The Comprehensive List of bash Reference Documentation and Examples&quot;]
* [http://spsneo.com/blog/2009/09/19/bash-history-tips-and-tricks/ Useful Bash History Tips and Tricks]
* [http://www.computerworld.com.au/index.php/id;1591223321;fp;16;fpid;1;pf;1 2008 interview with GNU Bash's maintainer, Chet Ramey]
* [http://www.geeksww.com/tutorials/operating_systems/linux/tips_and_tricks/working_bash_environment_variables_beginners_linux.php Working with BASH environment variables]
* [http://www.galatech.co.uk/index.php/tutorials/viewpost/100 Video Tutorial for Creating a Bash Script]
* [http://www.shell-fu.org/lister.php?tag=bash Bash commands and examples]
* [http://www.markus-gattol.name/ws/bash.html#colorized_shell_prompt Colorized Bash prompt] - how to set up a colorized Bash prompt based on the current connection method (SSH, telnet, etc.).
* [http://code.google.com/p/jbash/ jBash Project is a Java Parser for the Bourne Again Shell]
* [http://mywiki.wooledge.org/EnglishFrontPage The 'official' channel FAQ for freenode's #bash channel is BashFAQ.]
* [http://bashdb.sourceforge.net/ BASHDB - Bash with a built-in debugger.]
* [http://www.digilife.be/quickreferences/QRC/Bash%20Quick%20Reference.pdf Bash Quick Reference card]

{{GNU}}
{{Unix Shells}}

{{DEFAULTSORT:Bash (Unix Shell)}}
[[Category:Text-oriented programming languages]]
[[Category:Scripting languages]]
[[Category:Unix shells]]
[[Category:GNU Project software]]
[[Category:Free software programmed in C]]
[[Category:Free cross-platform software]]
[[Category:1989 software]]

[[ar:Ø¨Ø§Ø´]]
[[bs:Bash]]
[[bg:Bash]]
[[ca:Bash]]
[[cs:Bash]]
[[de:Bourne-again shell]]
[[et:Bash]]
[[el:ÎÎ­Î»ÏÏÎ¿Ï bash]]
[[es:Bash]]
[[eo:Bash]]
[[eu:Bash]]
[[fa:Ø¨Ø´]]
[[fr:Bourne-Again shell]]
[[gl:Bash]]
[[ko:Bash]]
[[hr:Bash]]
[[id:Bourne-Again shell]]
[[is:Bash]]
[[it:Bash]]
[[he:×××©]]
[[hu:Bash]]
[[ms:Bash]]
[[nl:Bash]]
[[ja:Bash]]
[[pl:Bash]]
[[pt:Bash]]
[[ro:Bash]]
[[ru:Bash]]
[[sk:Bash]]
[[sr:ÐÐ°Ñ]]
[[sh:Bash]]
[[fi:Bash]]
[[sv:Bash]]
[[th:à¹à¸à¸]]
[[tr:Bash]]
[[uk:Bash]]
[[zh:Bash]]</rev></revisions></page></pages></query></api>
