<?xml version="1.0"?><api><query><pages><page pageid="59441" ns="0" title="DLL Hell"><revisions><rev revid="337698827" parentid="337683234" user="SF007" timestamp="2010-01-13T23:49:57Z" comment="portable apps are a very effective way to deal with this"><diff from="337683234" to="337698827" xml:space="preserve">&lt;tr&gt;
  &lt;td colspan=&quot;2&quot; class=&quot;diff-lineno&quot;&gt;Line 66:&lt;/td&gt;
  &lt;td colspan=&quot;2&quot; class=&quot;diff-lineno&quot;&gt;Line 66:&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;Windows XP introduced a solution called ''[[Features_new_to_Windows_XP#Application_isolation_.26_side-by-side_assemblies|Side-by-Side Component Sharing]]''&lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;Windows XP introduced a solution called ''[[Features_new_to_Windows_XP#Application_isolation_.26_side-by-side_assemblies|Side-by-Side Component Sharing]]''&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;([http://msdn2.microsoft.com/en-us/library/ms811700.aspx MSDN page]), which loads separate copies of DLLs for each application that requires them (and thus allows applications that require conflicting DLLs to run simultaneously).  This approach eliminates conflicts by allowing applications to load unique versions of a module into their address space, while preserving the primary benefit of sharing DLLs between applications (i.e. reducing memory use) by using memory mapping techniques to share common code between different processes that do still use the same module. However DLLs that use shared data between multiple processes cannot take this approach.&amp;lt;ref&amp;gt;{{cite web|url=http://msdn.microsoft.com/en-us/library/h90dkhs0(VS.71).aspx|title=How do I share data in my DLL with an application or with other DLLs?|publisher=[[Microsoft]]|accessdate=2008-11-11}}&amp;lt;/ref&amp;gt;  One negative side-effect is that orphaned instances of DLLs may not be updated during automated processes.&lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;([http://msdn2.microsoft.com/en-us/library/ms811700.aspx MSDN page]), which loads separate copies of DLLs for each application that requires them (and thus allows applications that require conflicting DLLs to run simultaneously).  This approach eliminates conflicts by allowing applications to load unique versions of a module into their address space, while preserving the primary benefit of sharing DLLs between applications (i.e. reducing memory use) by using memory mapping techniques to share common code between different processes that do still use the same module. However DLLs that use shared data between multiple processes cannot take this approach.&amp;lt;ref&amp;gt;{{cite web|url=http://msdn.microsoft.com/en-us/library/h90dkhs0(VS.71).aspx|title=How do I share data in my DLL with an application or with other DLLs?|publisher=[[Microsoft]]|accessdate=2008-11-11}}&amp;lt;/ref&amp;gt;  One negative side-effect is that orphaned instances of DLLs may not be updated during automated processes.&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;+&lt;/td&gt;
  &lt;td class=&quot;diff-addedline&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;+&lt;/td&gt;
  &lt;td class=&quot;diff-addedline&quot;&gt;&lt;div&gt;==Portable Applications==&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;+&lt;/td&gt;
  &lt;td class=&quot;diff-addedline&quot;&gt;&lt;div&gt;[[Portable Applications]] (also known as &quot;portable apps&quot;) are an effective way to reduce DLL problems, since every program contains their required DLLs bundled-in and they sometimes run into some sort of &quot;container&quot;, using [[Application virtualization]], which avoids installing DLL files into the operating system.&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;+&lt;/td&gt;
  &lt;td class=&quot;diff-addedline&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;=== Countermeasures ===&lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;=== Countermeasures ===&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
</diff></rev></revisions></page></pages></query><query-continue><revisions rvstartid="337683234" /></query-continue></api>
