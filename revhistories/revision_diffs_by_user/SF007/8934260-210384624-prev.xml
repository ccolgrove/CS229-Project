<?xml version="1.0"?><api><query><pages><page pageid="8934260" ns="0" title="VirtualBox"><revisions><rev revid="210384624" parentid="210278920" user="SF007" timestamp="2008-05-05T18:47:18Z" comment="/* Hardware emulation */"><diff from="210278920" to="210384624" xml:space="preserve">&lt;tr&gt;
  &lt;td colspan=&quot;2&quot; class=&quot;diff-lineno&quot;&gt;Line 70:&lt;/td&gt;
  &lt;td colspan=&quot;2&quot; class=&quot;diff-lineno&quot;&gt;Line 70:&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;* For a sound card, VirtualBox virtualizes an Intel ICH AC'97 device or a [[SoundBlaster 16]] card.&lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;* For a sound card, VirtualBox virtualizes an Intel ICH AC'97 device or a [[SoundBlaster 16]] card.&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;â&lt;/td&gt;
  &lt;td class=&quot;diff-deletedline&quot;&gt;&lt;div&gt;* In the &lt;span class=&quot;diffchange diffchange-inline&quot;&gt;proprietary release &lt;/span&gt;(not in the [[open-source software|open-source]] edition), a USB controller is emulated so that any USB devices attached to the host can be seen in the guest. If VirtualBox acts as an RDP server, it can also use USB devices on the remote RDP client as if they were connected to the host.&lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;+&lt;/td&gt;
  &lt;td class=&quot;diff-addedline&quot;&gt;&lt;div&gt;* In the &lt;span class=&quot;diffchange diffchange-inline&quot;&gt;&quot;full release&quot; &lt;/span&gt;(not in the [[open-source software|open-source]] edition), a USB controller is emulated so that any USB devices attached to the host can be seen in the guest. If VirtualBox acts as an RDP server, it can also use USB devices on the remote RDP client as if they were connected to the host.&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;VirtualBox attempts to run as much guest code natively (that is, directly on the host processor) as possible. This works well for user-mode code running in the guest's ring 3 of the Intel [[ring (computer security)|ring]] architecture. However, the guest's ring-0 code, which will usually contain many privileged instructions, will need to be intercepted. VirtualBox has a rather novel approach to fix this conflict: It tricks the guest operating system to actually execute its ring-0 code in ring 1, which is normally unused on the Intel architecture. &lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;VirtualBox attempts to run as much guest code natively (that is, directly on the host processor) as possible. This works well for user-mode code running in the guest's ring 3 of the Intel [[ring (computer security)|ring]] architecture. However, the guest's ring-0 code, which will usually contain many privileged instructions, will need to be intercepted. VirtualBox has a rather novel approach to fix this conflict: It tricks the guest operating system to actually execute its ring-0 code in ring 1, which is normally unused on the Intel architecture. &lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
</diff></rev></revisions></page></pages></query><query-continue><revisions rvstartid="210278920" /></query-continue></api>
