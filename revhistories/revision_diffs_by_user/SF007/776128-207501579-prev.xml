<?xml version="1.0"?><api><query><pages><page pageid="776128" ns="0" title="/dev/random"><revisions><rev revid="207501579" parentid="201957805" user="SF007" timestamp="2008-04-23T01:20:25Z" comment="fixed internal link"><diff from="201957805" to="207501579" xml:space="preserve">&lt;tr&gt;
  &lt;td colspan=&quot;2&quot; class=&quot;diff-lineno&quot;&gt;Line 14:&lt;/td&gt;
  &lt;td colspan=&quot;2&quot; class=&quot;diff-lineno&quot;&gt;Line 14:&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;It is also possible to write to &amp;lt;code&amp;gt;/dev/random&amp;lt;/code&amp;gt;. This allows any user to mix random data into the pool. Non-random data is harmless, because only a privileged user can issue the [[ioctl]] needed to increase the entropy estimate. The current amount of entropy and the size of your entropy pool are available in &amp;lt;code&amp;gt;/proc/sys/kernel/random/&amp;lt;/code&amp;gt;.&lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;It is also possible to write to &amp;lt;code&amp;gt;/dev/random&amp;lt;/code&amp;gt;. This allows any user to mix random data into the pool. Non-random data is harmless, because only a privileged user can issue the [[ioctl]] needed to increase the entropy estimate. The current amount of entropy and the size of your entropy pool are available in &amp;lt;code&amp;gt;/proc/sys/kernel/random/&amp;lt;/code&amp;gt;.&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;â&lt;/td&gt;
  &lt;td class=&quot;diff-deletedline&quot;&gt;&lt;div&gt;Gutterman, Pinkas, &amp;amp; Reinman in March 2006 published a detailed cryptographic analysis of the Linux random number generator [http://www.pinkas.net/PAPERS/gpr06.pdf] in which they describe several weaknesses. Perhaps the most severe issue they report is with [[embedded system|embedded]] or &lt;span class=&quot;diffchange diffchange-inline&quot;&gt;[[LiveCD]] &lt;/span&gt;systems such as routers and diskless clients, for which the bootup state is predictable and the available supply of entropy from the environment may be limited. For a system with non-volatile memory, they recommend saving some state from the RNG at shutdown so that it can be included in the RNG state on the next reboot. In the case of a router for which network traffic represents the primary available source of entropy, they note that saving state across reboots &quot;would require potential attackers to either eavesdrop on all network traffic&quot; from when the router is first put into service, or obtain direct access to the router's internal state. This issue, they note, is particularly critical in the case of a wireless router whose network traffic can be captured from a distance, and which may be using the RNG to generate keys for data encryption.&lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;+&lt;/td&gt;
  &lt;td class=&quot;diff-addedline&quot;&gt;&lt;div&gt;Gutterman, Pinkas, &amp;amp; Reinman in March 2006 published a detailed cryptographic analysis of the Linux random number generator [http://www.pinkas.net/PAPERS/gpr06.pdf] in which they describe several weaknesses. Perhaps the most severe issue they report is with [[embedded system|embedded]] or &lt;span class=&quot;diffchange diffchange-inline&quot;&gt;[[Live CD]] &lt;/span&gt;systems such as routers and diskless clients, for which the bootup state is predictable and the available supply of entropy from the environment may be limited. For a system with non-volatile memory, they recommend saving some state from the RNG at shutdown so that it can be included in the RNG state on the next reboot. In the case of a router for which network traffic represents the primary available source of entropy, they note that saving state across reboots &quot;would require potential attackers to either eavesdrop on all network traffic&quot; from when the router is first put into service, or obtain direct access to the router's internal state. This issue, they note, is particularly critical in the case of a wireless router whose network traffic can be captured from a distance, and which may be using the RNG to generate keys for data encryption.&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;==FreeBSD==&lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;==FreeBSD==&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
</diff></rev></revisions></page></pages></query><query-continue><revisions rvstartid="201957805" /></query-continue></api>
