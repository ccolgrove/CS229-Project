<?xml version="1.0"?><api><query><pages><page pageid="32353" ns="0" title="Virtual machine"><revisions><rev revid="283057174" parentid="283056411" user="SF007" timestamp="2009-04-10T21:39:17Z" comment="reverting possible vandalism"><diff from="283056411" to="283057174" xml:space="preserve">&lt;tr&gt;
  &lt;td colspan=&quot;2&quot; class=&quot;diff-lineno&quot;&gt;Line 66:&lt;/td&gt;
  &lt;td colspan=&quot;2&quot; class=&quot;diff-lineno&quot;&gt;Line 66:&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;[[Image:VMware Workstation.png|260px|right|thumb|[[VMware Workstation]]  running [[Ubuntu]], on Windows Vista]]&lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;[[Image:VMware Workstation.png|260px|right|thumb|[[VMware Workstation]]  running [[Ubuntu]], on Windows Vista]]&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;This approach is described as [[full virtualization]] of the hardware, and can be implemented using a Type 1 or Type 2 [[hypervisor]]. (A Type 1 hypervisor runs directly on the hardware; a Type 2 hypervisor runs on another operating system, such as [[Linux]]). Each virtual machine can run any operating system supported by the underlying hardware. Users can thus run two or more different &quot;guest&quot; operating systems simultaneously, in separate &quot;private&quot; virtual computers.&lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;This approach is described as [[full virtualization]] of the hardware, and can be implemented using a Type 1 or Type 2 [[hypervisor]]. (A Type 1 hypervisor runs directly on the hardware; a Type 2 hypervisor runs on another operating system, such as [[Linux]]). Each virtual machine can run any operating system supported by the underlying hardware. Users can thus run two or more different &quot;guest&quot; operating systems simultaneously, in separate &quot;private&quot; virtual computers.&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;+&lt;/td&gt;
  &lt;td class=&quot;diff-addedline&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;+&lt;/td&gt;
  &lt;td class=&quot;diff-addedline&quot;&gt;&lt;div&gt;The pioneer system using this concept was IBM's [[IBM CP-40|CP-40]], the first (1967) version of IBM's [[CP/CMS]] (1967-1972) and the precursor to IBM's [[VM (operating system)|VM family]] (1972-present). With the VM architecture, most users run a relatively simple [[interactive computing]] single-user operating system, [[Conversational Monitor System|CMS]], as a &quot;guest&quot; on top of the VM control program ([[VM-CP]]). This approach kept the CMS design simple, as if it were running alone; the control program quietly provides multitasking and resource management services &quot;behind the scenes&quot;. In addition to CMS, VM users can run any of the other IBM operating systems, such as [[MVS]] or [[z/OS]]. [[z/VM]] is the current version of VM, and is used to support hundreds or thousands of virtual machines on a given mainframe. Some installations use [[Linux for zSeries]] to run [[Web server]]s, where [[Linux]] runs as the operating system within many virtual machines.&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;+&lt;/td&gt;
  &lt;td class=&quot;diff-addedline&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;+&lt;/td&gt;
  &lt;td class=&quot;diff-addedline&quot;&gt;&lt;div&gt;Full virtualization is particularly helpful in operating system development, when experimental new code can be run at the same time as older, more stable, versions, each in a separate virtual machine. The process can even be [[Recursion#Recursion in computing|recursive]]: [[IBM]] debugged new versions of its virtual machine operating system, [[VM (operating system)|VM]], in a virtual machine running under an older version of VM, and even used this technique to simulate new hardware.&amp;lt;ref&amp;gt;See [[History of CP/CMS]] for IBM's use of virtual machines for operating system development and simulation of new hardware&amp;lt;/ref&amp;gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;The standard [[x86]] [[processor architecture]] as used in modern PCs does not actually meet the [[Popek and Goldberg virtualization requirements]]. Notably, there is no execution mode where all sensitive machine instructions always trap, which would allow per-instruction virtualization. &lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;The standard [[x86]] [[processor architecture]] as used in modern PCs does not actually meet the [[Popek and Goldberg virtualization requirements]]. Notably, there is no execution mode where all sensitive machine instructions always trap, which would allow per-instruction virtualization. &lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;+&lt;/td&gt;
  &lt;td class=&quot;diff-addedline&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;&amp;nbsp;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt;+&lt;/td&gt;
  &lt;td class=&quot;diff-addedline&quot;&gt;&lt;div&gt;Despite these limitations, several software packages have managed to provide [[x86 virtualization|virtualization on the x86 architecture]], even though [[dynamic recompilation]] of privileged code, as first implemented by [[VMware]], incurs some performance overhead as compared to a VM running on a natively virtualizable architecture such as the IBM System/370 or [[Motorola 68020|Motorola MC68020]]. By now, several other software packages such as [[Virtual PC]], [[VirtualBox]], [[Parallels Workstation]] and [[Virtual Iron]] manage to implement virtualization on x86 hardware.&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;[[Intel]] and [[AMD]] have introduced features to their x86 processors to enable virtualization in hardware.&lt;/div&gt;&lt;/td&gt;
  &lt;td class=&quot;diff-marker&quot;&gt; &lt;/td&gt;
  &lt;td class=&quot;diff-context&quot;&gt;&lt;div&gt;[[Intel]] and [[AMD]] have introduced features to their x86 processors to enable virtualization in hardware.&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
</diff></rev></revisions></page></pages></query><query-continue><revisions rvstartid="283056411" /></query-continue></api>
